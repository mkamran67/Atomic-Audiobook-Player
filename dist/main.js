/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/content-type/index.js":
/*!********************************************!*\
  !*** ./node_modules/content-type/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("/*!\n * content-type\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n\n\n/**\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\n *\n * parameter     = token \"=\" ( token / quoted-string )\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\n * obs-text      = %x80-FF\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n */\nvar PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g\nvar TEXT_REGEXP = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/\nvar TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\n *\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n * obs-text    = %x80-FF\n */\nvar QESC_REGEXP = /\\\\([\\u000b\\u0020-\\u00ff])/g\n\n/**\n * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6\n */\nvar QUOTE_REGEXP = /([\\\\\"])/g\n\n/**\n * RegExp to match type in RFC 7231 sec 3.1.1.1\n *\n * media-type = type \"/\" subtype\n * type       = token\n * subtype    = token\n */\nvar TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * Module exports.\n * @public\n */\n\nexports.format = format\nexports.parse = parse\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format (obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var parameters = obj.parameters\n  var type = obj.type\n\n  if (!type || !TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  var string = type\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param\n    var params = Object.keys(parameters).sort()\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i]\n\n      if (!TOKEN_REGEXP.test(param)) {\n        throw new TypeError('invalid parameter name')\n      }\n\n      string += '; ' + param + '=' + qstring(parameters[param])\n    }\n  }\n\n  return string\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string|object} string\n * @return {Object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  // support req/res-like objects as argument\n  var header = typeof string === 'object'\n    ? getcontenttype(string)\n    : string\n\n  if (typeof header !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var index = header.indexOf(';')\n  var type = index !== -1\n    ? header.substr(0, index).trim()\n    : header.trim()\n\n  if (!TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid media type')\n  }\n\n  var obj = new ContentType(type.toLowerCase())\n\n  // parse parameters\n  if (index !== -1) {\n    var key\n    var match\n    var value\n\n    PARAM_REGEXP.lastIndex = index\n\n    while ((match = PARAM_REGEXP.exec(header))) {\n      if (match.index !== index) {\n        throw new TypeError('invalid parameter format')\n      }\n\n      index += match[0].length\n      key = match[1].toLowerCase()\n      value = match[2]\n\n      if (value[0] === '\"') {\n        // remove quotes and escapes\n        value = value\n          .substr(1, value.length - 2)\n          .replace(QESC_REGEXP, '$1')\n      }\n\n      obj.parameters[key] = value\n    }\n\n    if (index !== header.length) {\n      throw new TypeError('invalid parameter format')\n    }\n  }\n\n  return obj\n}\n\n/**\n * Get content-type from req/res objects.\n *\n * @param {object}\n * @return {Object}\n * @private\n */\n\nfunction getcontenttype (obj) {\n  var header\n\n  if (typeof obj.getHeader === 'function') {\n    // res-like\n    header = obj.getHeader('content-type')\n  } else if (typeof obj.headers === 'object') {\n    // req-like\n    header = obj.headers && obj.headers['content-type']\n  }\n\n  if (typeof header !== 'string') {\n    throw new TypeError('content-type header is missing from object')\n  }\n\n  return header\n}\n\n/**\n * Quote a string if necessary.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction qstring (val) {\n  var str = String(val)\n\n  // no need to quote tokens\n  if (TOKEN_REGEXP.test(str)) {\n    return str\n  }\n\n  if (str.length > 0 && !TEXT_REGEXP.test(str)) {\n    throw new TypeError('invalid parameter value')\n  }\n\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"'\n}\n\n/**\n * Class to represent a content type.\n * @private\n */\nfunction ContentType (type) {\n  this.parameters = Object.create(null)\n  this.type = type\n}\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/content-type/index.js?");

/***/ }),

/***/ "./node_modules/electron-is-dev/index.js":
/*!***********************************************!*\
  !*** ./node_modules/electron-is-dev/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst electron = __webpack_require__(/*! electron */ \"electron\");\n\nif (typeof electron === 'string') {\n\tthrow new TypeError('Not running in an Electron environment!');\n}\n\nconst isEnvSet = 'ELECTRON_IS_DEV' in process.env;\nconst getFromEnv = Number.parseInt(process.env.ELECTRON_IS_DEV, 10) === 1;\n\nmodule.exports = isEnvSet ? getFromEnv : !electron.app.isPackaged;\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/electron-is-dev/index.js?");

/***/ }),

/***/ "./node_modules/file-type/core.js":
/*!****************************************!*\
  !*** ./node_modules/file-type/core.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\nconst {\n\tstringToBytes,\n\ttarHeaderChecksumMatches,\n\tuint32SyncSafeToken\n} = __webpack_require__(/*! ./util */ \"./node_modules/file-type/util.js\");\nconst supported = __webpack_require__(/*! ./supported */ \"./node_modules/file-type/supported.js\");\n\nconst minimumBytes = 4100; // A fair amount of file-types are detectable within this range\n\nasync function fromStream(stream) {\n\tconst tokenizer = await strtok3.fromStream(stream);\n\ttry {\n\t\treturn await fromTokenizer(tokenizer);\n\t} finally {\n\t\tawait tokenizer.close();\n\t}\n}\n\nasync function fromBuffer(input) {\n\tif (!(input instanceof Uint8Array || input instanceof ArrayBuffer || Buffer.isBuffer(input))) {\n\t\tthrow new TypeError(`Expected the \\`input\\` argument to be of type \\`Uint8Array\\` or \\`Buffer\\` or \\`ArrayBuffer\\`, got \\`${typeof input}\\``);\n\t}\n\n\tconst buffer = input instanceof Buffer ? input : Buffer.from(input);\n\n\tif (!(buffer && buffer.length > 1)) {\n\t\treturn;\n\t}\n\n\tconst tokenizer = strtok3.fromBuffer(buffer);\n\treturn fromTokenizer(tokenizer);\n}\n\nfunction _check(buffer, headers, options) {\n\toptions = {\n\t\toffset: 0,\n\t\t...options\n\t};\n\n\tfor (const [index, header] of headers.entries()) {\n\t\t// If a bitmask is set\n\t\tif (options.mask) {\n\t\t\t// If header doesn't equal `buf` with bits masked off\n\t\t\tif (header !== (options.mask[index] & buffer[index + options.offset])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (header !== buffer[index + options.offset]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nasync function fromTokenizer(tokenizer) {\n\ttry {\n\t\treturn _fromTokenizer(tokenizer);\n\t} catch (error) {\n\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nasync function _fromTokenizer(tokenizer) {\n\tlet buffer = Buffer.alloc(minimumBytes);\n\tconst bytesRead = 12;\n\tconst check = (header, options) => _check(buffer, header, options);\n\tconst checkString = (header, options) => check(stringToBytes(header), options);\n\n\t// Keep reading until EOF if the file size is unknown.\n\tif (!tokenizer.fileInfo.size) {\n\t\ttokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;\n\t}\n\n\tawait tokenizer.peekBuffer(buffer, {length: bytesRead, mayBeLess: true});\n\n\t// -- 2-byte signatures --\n\n\tif (check([0x42, 0x4D])) {\n\t\treturn {\n\t\t\text: 'bmp',\n\t\t\tmime: 'image/bmp'\n\t\t};\n\t}\n\n\tif (check([0x0B, 0x77])) {\n\t\treturn {\n\t\t\text: 'ac3',\n\t\t\tmime: 'audio/vnd.dolby.dd-raw'\n\t\t};\n\t}\n\n\tif (check([0x78, 0x01])) {\n\t\treturn {\n\t\t\text: 'dmg',\n\t\t\tmime: 'application/x-apple-diskimage'\n\t\t};\n\t}\n\n\tif (check([0x4D, 0x5A])) {\n\t\treturn {\n\t\t\text: 'exe',\n\t\t\tmime: 'application/x-msdownload'\n\t\t};\n\t}\n\n\tif (check([0x25, 0x21])) {\n\t\tawait tokenizer.peekBuffer(buffer, {length: 24, mayBeLess: true});\n\n\t\tif (checkString('PS-Adobe-', {offset: 2}) &&\n\t\t\tcheckString(' EPSF-', {offset: 14})) {\n\t\t\treturn {\n\t\t\t\text: 'eps',\n\t\t\t\tmime: 'application/eps'\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\text: 'ps',\n\t\t\tmime: 'application/postscript'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x1F, 0xA0]) ||\n\t\tcheck([0x1F, 0x9D])\n\t) {\n\t\treturn {\n\t\t\text: 'Z',\n\t\t\tmime: 'application/x-compress'\n\t\t};\n\t}\n\n\t// -- 3-byte signatures --\n\n\tif (check([0xFF, 0xD8, 0xFF])) {\n\t\treturn {\n\t\t\text: 'jpg',\n\t\t\tmime: 'image/jpeg'\n\t\t};\n\t}\n\n\tif (check([0x49, 0x49, 0xBC])) {\n\t\treturn {\n\t\t\text: 'jxr',\n\t\t\tmime: 'image/vnd.ms-photo'\n\t\t};\n\t}\n\n\tif (check([0x1F, 0x8B, 0x8])) {\n\t\treturn {\n\t\t\text: 'gz',\n\t\t\tmime: 'application/gzip'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x5A, 0x68])) {\n\t\treturn {\n\t\t\text: 'bz2',\n\t\t\tmime: 'application/x-bzip2'\n\t\t};\n\t}\n\n\tif (checkString('ID3')) {\n\t\tawait tokenizer.ignore(6); // Skip ID3 header until the header size\n\t\tconst id3HeaderLen = await tokenizer.readToken(uint32SyncSafeToken);\n\t\tif (tokenizer.position + id3HeaderLen > tokenizer.fileInfo.size) {\n\t\t\t// Guess file type based on ID3 header for backward compatibility\n\t\t\treturn {\n\t\t\t\text: 'mp3',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\n\t\tawait tokenizer.ignore(id3HeaderLen);\n\t\treturn fromTokenizer(tokenizer); // Skip ID3 header, recursion\n\t}\n\n\t// Musepack, SV7\n\tif (checkString('MP+')) {\n\t\treturn {\n\t\t\text: 'mpc',\n\t\t\tmime: 'audio/x-musepack'\n\t\t};\n\t}\n\n\tif (\n\t\t(buffer[0] === 0x43 || buffer[0] === 0x46) &&\n\t\tcheck([0x57, 0x53], {offset: 1})\n\t) {\n\t\treturn {\n\t\t\text: 'swf',\n\t\t\tmime: 'application/x-shockwave-flash'\n\t\t};\n\t}\n\n\t// -- 4-byte signatures --\n\n\tif (check([0x47, 0x49, 0x46])) {\n\t\treturn {\n\t\t\text: 'gif',\n\t\t\tmime: 'image/gif'\n\t\t};\n\t}\n\n\tif (checkString('FLIF')) {\n\t\treturn {\n\t\t\text: 'flif',\n\t\t\tmime: 'image/flif'\n\t\t};\n\t}\n\n\tif (checkString('8BPS')) {\n\t\treturn {\n\t\t\text: 'psd',\n\t\t\tmime: 'image/vnd.adobe.photoshop'\n\t\t};\n\t}\n\n\tif (checkString('WEBP', {offset: 8})) {\n\t\treturn {\n\t\t\text: 'webp',\n\t\t\tmime: 'image/webp'\n\t\t};\n\t}\n\n\t// Musepack, SV8\n\tif (checkString('MPCK')) {\n\t\treturn {\n\t\t\text: 'mpc',\n\t\t\tmime: 'audio/x-musepack'\n\t\t};\n\t}\n\n\tif (checkString('FORM')) {\n\t\treturn {\n\t\t\text: 'aif',\n\t\t\tmime: 'audio/aiff'\n\t\t};\n\t}\n\n\tif (checkString('icns', {offset: 0})) {\n\t\treturn {\n\t\t\text: 'icns',\n\t\t\tmime: 'image/icns'\n\t\t};\n\t}\n\n\t// Zip-based file formats\n\t// Need to be before the `zip` check\n\tif (check([0x50, 0x4B, 0x3, 0x4])) { // Local file header signature\n\t\ttry {\n\t\t\twhile (tokenizer.position + 30 < tokenizer.fileInfo.size) {\n\t\t\t\tawait tokenizer.readBuffer(buffer, {length: 30});\n\n\t\t\t\t// https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers\n\t\t\t\tconst zipHeader = {\n\t\t\t\t\tcompressedSize: buffer.readUInt32LE(18),\n\t\t\t\t\tuncompressedSize: buffer.readUInt32LE(22),\n\t\t\t\t\tfilenameLength: buffer.readUInt16LE(26),\n\t\t\t\t\textraFieldLength: buffer.readUInt16LE(28)\n\t\t\t\t};\n\n\t\t\t\tzipHeader.filename = await tokenizer.readToken(new Token.StringType(zipHeader.filenameLength, 'utf-8'));\n\t\t\t\tawait tokenizer.ignore(zipHeader.extraFieldLength);\n\n\t\t\t\t// Assumes signed `.xpi` from addons.mozilla.org\n\t\t\t\tif (zipHeader.filename === 'META-INF/mozilla.rsa') {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'xpi',\n\t\t\t\t\t\tmime: 'application/x-xpinstall'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (zipHeader.filename.endsWith('.rels') || zipHeader.filename.endsWith('.xml')) {\n\t\t\t\t\tconst type = zipHeader.filename.split('/')[0];\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase '_rels':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'word':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'docx',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'ppt':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'pptx',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'xl':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'xlsx',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (zipHeader.filename.startsWith('xl/')) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'xlsx',\n\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (zipHeader.filename.startsWith('3D/') && zipHeader.filename.endsWith('.model')) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: '3mf',\n\t\t\t\t\t\tmime: 'model/3mf'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// The docx, xlsx and pptx file types extend the Office Open XML file format:\n\t\t\t\t// https://en.wikipedia.org/wiki/Office_Open_XML_file_formats\n\t\t\t\t// We look for:\n\t\t\t\t// - one entry named '[Content_Types].xml' or '_rels/.rels',\n\t\t\t\t// - one entry indicating specific type of file.\n\t\t\t\t// MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.\n\t\t\t\tif (zipHeader.filename === 'mimetype' && zipHeader.compressedSize === zipHeader.uncompressedSize) {\n\t\t\t\t\tconst mimeType = await tokenizer.readToken(new Token.StringType(zipHeader.compressedSize, 'utf-8'));\n\n\t\t\t\t\tswitch (mimeType) {\n\t\t\t\t\t\tcase 'application/epub+zip':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'epub',\n\t\t\t\t\t\t\t\tmime: 'application/epub+zip'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.text':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'odt',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.text'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.spreadsheet':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'ods',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.spreadsheet'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.presentation':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'odp',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.presentation'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Try to find next header manually when current one is corrupted\n\t\t\t\tif (zipHeader.compressedSize === 0) {\n\t\t\t\t\tlet nextHeaderIndex = -1;\n\n\t\t\t\t\twhile (nextHeaderIndex < 0 && (tokenizer.position < tokenizer.fileInfo.size)) {\n\t\t\t\t\t\tawait tokenizer.peekBuffer(buffer, {mayBeLess: true});\n\n\t\t\t\t\t\tnextHeaderIndex = buffer.indexOf('504B0304', 0, 'hex');\n\t\t\t\t\t\t// Move position to the next header if found, skip the whole buffer otherwise\n\t\t\t\t\t\tawait tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : buffer.length);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tawait tokenizer.ignore(zipHeader.compressedSize);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\text: 'zip',\n\t\t\tmime: 'application/zip'\n\t\t};\n\t}\n\n\tif (checkString('OggS')) {\n\t\t// This is an OGG container\n\t\tawait tokenizer.ignore(28);\n\t\tconst type = Buffer.alloc(8);\n\t\tawait tokenizer.readBuffer(type);\n\n\t\t// Needs to be before `ogg` check\n\t\tif (_check(type, [0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64])) {\n\t\t\treturn {\n\t\t\t\text: 'opus',\n\t\t\t\tmime: 'audio/opus'\n\t\t\t};\n\t\t}\n\n\t\t// If ' theora' in header.\n\t\tif (_check(type, [0x80, 0x74, 0x68, 0x65, 0x6F, 0x72, 0x61])) {\n\t\t\treturn {\n\t\t\t\text: 'ogv',\n\t\t\t\tmime: 'video/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// If '\\x01video' in header.\n\t\tif (_check(type, [0x01, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'ogm',\n\t\t\t\tmime: 'video/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// If ' FLAC' in header  https://xiph.org/flac/faq.html\n\t\tif (_check(type, [0x7F, 0x46, 0x4C, 0x41, 0x43])) {\n\t\t\treturn {\n\t\t\t\text: 'oga',\n\t\t\t\tmime: 'audio/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// 'Speex  ' in header https://en.wikipedia.org/wiki/Speex\n\t\tif (_check(type, [0x53, 0x70, 0x65, 0x65, 0x78, 0x20, 0x20])) {\n\t\t\treturn {\n\t\t\t\text: 'spx',\n\t\t\t\tmime: 'audio/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// If '\\x01vorbis' in header\n\t\tif (_check(type, [0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73])) {\n\t\t\treturn {\n\t\t\t\text: 'ogg',\n\t\t\t\tmime: 'audio/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// Default OGG container https://www.iana.org/assignments/media-types/application/ogg\n\t\treturn {\n\t\t\text: 'ogx',\n\t\t\tmime: 'application/ogg'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x50, 0x4B]) &&\n\t\t(buffer[2] === 0x3 || buffer[2] === 0x5 || buffer[2] === 0x7) &&\n\t\t(buffer[3] === 0x4 || buffer[3] === 0x6 || buffer[3] === 0x8)\n\t) {\n\t\treturn {\n\t\t\text: 'zip',\n\t\t\tmime: 'application/zip'\n\t\t};\n\t}\n\n\t//\n\n\t// File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)\n\t// It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.\n\t// `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.\n\t// Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).\n\tif (\n\t\tcheckString('ftyp', {offset: 4}) &&\n\t\t(buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?\n\t) {\n\t\t// They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.\n\t\t// For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.\n\t\tconst brandMajor = buffer.toString('binary', 8, 12).replace('\\0', ' ').trim();\n\t\tswitch (brandMajor) {\n\t\t\tcase 'avif':\n\t\t\t\treturn {ext: 'avif', mime: 'image/avif'};\n\t\t\tcase 'mif1':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heif'};\n\t\t\tcase 'msf1':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heif-sequence'};\n\t\t\tcase 'heic':\n\t\t\tcase 'heix':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heic'};\n\t\t\tcase 'hevc':\n\t\t\tcase 'hevx':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heic-sequence'};\n\t\t\tcase 'qt':\n\t\t\t\treturn {ext: 'mov', mime: 'video/quicktime'};\n\t\t\tcase 'M4V':\n\t\t\tcase 'M4VH':\n\t\t\tcase 'M4VP':\n\t\t\t\treturn {ext: 'm4v', mime: 'video/x-m4v'};\n\t\t\tcase 'M4P':\n\t\t\t\treturn {ext: 'm4p', mime: 'video/mp4'};\n\t\t\tcase 'M4B':\n\t\t\t\treturn {ext: 'm4b', mime: 'audio/mp4'};\n\t\t\tcase 'M4A':\n\t\t\t\treturn {ext: 'm4a', mime: 'audio/x-m4a'};\n\t\t\tcase 'F4V':\n\t\t\t\treturn {ext: 'f4v', mime: 'video/mp4'};\n\t\t\tcase 'F4P':\n\t\t\t\treturn {ext: 'f4p', mime: 'video/mp4'};\n\t\t\tcase 'F4A':\n\t\t\t\treturn {ext: 'f4a', mime: 'audio/mp4'};\n\t\t\tcase 'F4B':\n\t\t\t\treturn {ext: 'f4b', mime: 'audio/mp4'};\n\t\t\tcase 'crx':\n\t\t\t\treturn {ext: 'cr3', mime: 'image/x-canon-cr3'};\n\t\t\tdefault:\n\t\t\t\tif (brandMajor.startsWith('3g')) {\n\t\t\t\t\tif (brandMajor.startsWith('3g2')) {\n\t\t\t\t\t\treturn {ext: '3g2', mime: 'video/3gpp2'};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {ext: '3gp', mime: 'video/3gpp'};\n\t\t\t\t}\n\n\t\t\t\treturn {ext: 'mp4', mime: 'video/mp4'};\n\t\t}\n\t}\n\n\tif (checkString('MThd')) {\n\t\treturn {\n\t\t\text: 'mid',\n\t\t\tmime: 'audio/midi'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('wOFF') &&\n\t\t(\n\t\t\tcheck([0x00, 0x01, 0x00, 0x00], {offset: 4}) ||\n\t\t\tcheckString('OTTO', {offset: 4})\n\t\t)\n\t) {\n\t\treturn {\n\t\t\text: 'woff',\n\t\t\tmime: 'font/woff'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('wOF2') &&\n\t\t(\n\t\t\tcheck([0x00, 0x01, 0x00, 0x00], {offset: 4}) ||\n\t\t\tcheckString('OTTO', {offset: 4})\n\t\t)\n\t) {\n\t\treturn {\n\t\t\text: 'woff2',\n\t\t\tmime: 'font/woff2'\n\t\t};\n\t}\n\n\tif (check([0xD4, 0xC3, 0xB2, 0xA1]) || check([0xA1, 0xB2, 0xC3, 0xD4])) {\n\t\treturn {\n\t\t\text: 'pcap',\n\t\t\tmime: 'application/vnd.tcpdump.pcap'\n\t\t};\n\t}\n\n\t// Sony DSD Stream File (DSF)\n\tif (checkString('DSD ')) {\n\t\treturn {\n\t\t\text: 'dsf',\n\t\t\tmime: 'audio/x-dsf' // Non-standard\n\t\t};\n\t}\n\n\tif (checkString('LZIP')) {\n\t\treturn {\n\t\t\text: 'lz',\n\t\t\tmime: 'application/x-lzip'\n\t\t};\n\t}\n\n\tif (checkString('fLaC')) {\n\t\treturn {\n\t\t\text: 'flac',\n\t\t\tmime: 'audio/x-flac'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x50, 0x47, 0xFB])) {\n\t\treturn {\n\t\t\text: 'bpg',\n\t\t\tmime: 'image/bpg'\n\t\t};\n\t}\n\n\tif (checkString('wvpk')) {\n\t\treturn {\n\t\t\text: 'wv',\n\t\t\tmime: 'audio/wavpack'\n\t\t};\n\t}\n\n\tif (checkString('%PDF')) {\n\t\tawait tokenizer.ignore(1350);\n\t\tconst maxBufferSize = 10 * 1024 * 1024;\n\t\tconst buffer = Buffer.alloc(Math.min(maxBufferSize, tokenizer.fileInfo.size));\n\t\tawait tokenizer.readBuffer(buffer, {mayBeLess: true});\n\n\t\t// Check if this is an Adobe Illustrator file\n\t\tif (buffer.includes(Buffer.from('AIPrivateData'))) {\n\t\t\treturn {\n\t\t\t\text: 'ai',\n\t\t\t\tmime: 'application/postscript'\n\t\t\t};\n\t\t}\n\n\t\t// Assume this is just a normal PDF\n\t\treturn {\n\t\t\text: 'pdf',\n\t\t\tmime: 'application/pdf'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x61, 0x73, 0x6D])) {\n\t\treturn {\n\t\t\text: 'wasm',\n\t\t\tmime: 'application/wasm'\n\t\t};\n\t}\n\n\t// TIFF, little-endian type\n\tif (check([0x49, 0x49, 0x2A, 0x0])) {\n\t\tif (checkString('CR', {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'cr2',\n\t\t\t\tmime: 'image/x-canon-cr2'\n\t\t\t};\n\t\t}\n\n\t\tif (check([0x1C, 0x00, 0xFE, 0x00], {offset: 8}) || check([0x1F, 0x00, 0x0B, 0x00], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'nef',\n\t\t\t\tmime: 'image/x-nikon-nef'\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tcheck([0x08, 0x00, 0x00, 0x00], {offset: 4}) &&\n\t\t\t(check([0x2D, 0x00, 0xFE, 0x00], {offset: 8}) ||\n\t\t\t\tcheck([0x27, 0x00, 0xFE, 0x00], {offset: 8}))\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'dng',\n\t\t\t\tmime: 'image/x-adobe-dng'\n\t\t\t};\n\t\t}\n\n\t\tbuffer = Buffer.alloc(24);\n\t\tawait tokenizer.peekBuffer(buffer);\n\t\tif (\n\t\t\t(check([0x10, 0xFB, 0x86, 0x01], {offset: 4}) || check([0x08, 0x00, 0x00, 0x00], {offset: 4})) &&\n\t\t\t// This pattern differentiates ARW from other TIFF-ish file types:\n\t\t\tcheck([0x00, 0xFE, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01], {offset: 9})\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'arw',\n\t\t\t\tmime: 'image/x-sony-arw'\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\text: 'tif',\n\t\t\tmime: 'image/tiff'\n\t\t};\n\t}\n\n\t// TIFF, big-endian type\n\tif (check([0x4D, 0x4D, 0x0, 0x2A])) {\n\t\treturn {\n\t\t\text: 'tif',\n\t\t\tmime: 'image/tiff'\n\t\t};\n\t}\n\n\tif (checkString('MAC ')) {\n\t\treturn {\n\t\t\text: 'ape',\n\t\t\tmime: 'audio/ape'\n\t\t};\n\t}\n\n\t// https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska\n\tif (check([0x1A, 0x45, 0xDF, 0xA3])) { // Root element: EBML\n\t\tasync function readField() {\n\t\t\tconst msb = await tokenizer.peekNumber(Token.UINT8);\n\t\t\tlet mask = 0x80;\n\t\t\tlet ic = 0; // 0 = A, 1 = B, 2 = C, 3 = D\n\n\t\t\twhile ((msb & mask) === 0) {\n\t\t\t\t++ic;\n\t\t\t\tmask >>= 1;\n\t\t\t}\n\n\t\t\tconst id = Buffer.alloc(ic + 1);\n\t\t\tawait tokenizer.readBuffer(id);\n\t\t\treturn id;\n\t\t}\n\n\t\tasync function readElement() {\n\t\t\tconst id = await readField();\n\t\t\tconst lenField = await readField();\n\t\t\tlenField[0] ^= 0x80 >> (lenField.length - 1);\n\t\t\tconst nrLen = Math.min(6, lenField.length); // JavaScript can max read 6 bytes integer\n\t\t\treturn {\n\t\t\t\tid: id.readUIntBE(0, id.length),\n\t\t\t\tlen: lenField.readUIntBE(lenField.length - nrLen, nrLen)\n\t\t\t};\n\t\t}\n\n\t\tasync function readChildren(level, children) {\n\t\t\twhile (children > 0) {\n\t\t\t\tconst e = await readElement();\n\t\t\t\tif (e.id === 0x4282) {\n\t\t\t\t\treturn tokenizer.readToken(new Token.StringType(e.len, 'utf-8')); // Return DocType\n\t\t\t\t}\n\n\t\t\t\tawait tokenizer.ignore(e.len); // ignore payload\n\t\t\t\t--children;\n\t\t\t}\n\t\t}\n\n\t\tconst re = await readElement();\n\t\tconst docType = await readChildren(1, re.len);\n\n\t\tswitch (docType) {\n\t\t\tcase 'webm':\n\t\t\t\treturn {\n\t\t\t\t\text: 'webm',\n\t\t\t\t\tmime: 'video/webm'\n\t\t\t\t};\n\n\t\t\tcase 'matroska':\n\t\t\t\treturn {\n\t\t\t\t\text: 'mkv',\n\t\t\t\t\tmime: 'video/x-matroska'\n\t\t\t\t};\n\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\t// RIFF file format which might be AVI, WAV, QCP, etc\n\tif (check([0x52, 0x49, 0x46, 0x46])) {\n\t\tif (check([0x41, 0x56, 0x49], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'avi',\n\t\t\t\tmime: 'video/vnd.avi'\n\t\t\t};\n\t\t}\n\n\t\tif (check([0x57, 0x41, 0x56, 0x45], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'wav',\n\t\t\t\tmime: 'audio/vnd.wave'\n\t\t\t};\n\t\t}\n\n\t\t// QLCM, QCP file\n\t\tif (check([0x51, 0x4C, 0x43, 0x4D], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'qcp',\n\t\t\t\tmime: 'audio/qcelp'\n\t\t\t};\n\t\t}\n\t}\n\n\tif (checkString('SQLi')) {\n\t\treturn {\n\t\t\text: 'sqlite',\n\t\t\tmime: 'application/x-sqlite3'\n\t\t};\n\t}\n\n\tif (check([0x4E, 0x45, 0x53, 0x1A])) {\n\t\treturn {\n\t\t\text: 'nes',\n\t\t\tmime: 'application/x-nintendo-nes-rom'\n\t\t};\n\t}\n\n\tif (checkString('Cr24')) {\n\t\treturn {\n\t\t\text: 'crx',\n\t\t\tmime: 'application/x-google-chrome-extension'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('MSCF') ||\n\t\tcheckString('ISc(')\n\t) {\n\t\treturn {\n\t\t\text: 'cab',\n\t\t\tmime: 'application/vnd.ms-cab-compressed'\n\t\t};\n\t}\n\n\tif (check([0xED, 0xAB, 0xEE, 0xDB])) {\n\t\treturn {\n\t\t\text: 'rpm',\n\t\t\tmime: 'application/x-rpm'\n\t\t};\n\t}\n\n\tif (check([0xC5, 0xD0, 0xD3, 0xC6])) {\n\t\treturn {\n\t\t\text: 'eps',\n\t\t\tmime: 'application/eps'\n\t\t};\n\t}\n\n\tif (check([0x28, 0xB5, 0x2F, 0xFD])) {\n\t\treturn {\n\t\t\text: 'zst',\n\t\t\tmime: 'application/zstd'\n\t\t};\n\t}\n\n\t// -- 5-byte signatures --\n\n\tif (check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {\n\t\treturn {\n\t\t\text: 'otf',\n\t\t\tmime: 'font/otf'\n\t\t};\n\t}\n\n\tif (checkString('#!AMR')) {\n\t\treturn {\n\t\t\text: 'amr',\n\t\t\tmime: 'audio/amr'\n\t\t};\n\t}\n\n\tif (checkString('{\\\\rtf')) {\n\t\treturn {\n\t\t\text: 'rtf',\n\t\t\tmime: 'application/rtf'\n\t\t};\n\t}\n\n\tif (check([0x46, 0x4C, 0x56, 0x01])) {\n\t\treturn {\n\t\t\text: 'flv',\n\t\t\tmime: 'video/x-flv'\n\t\t};\n\t}\n\n\tif (checkString('IMPM')) {\n\t\treturn {\n\t\t\text: 'it',\n\t\t\tmime: 'audio/x-it'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('-lh0-', {offset: 2}) ||\n\t\tcheckString('-lh1-', {offset: 2}) ||\n\t\tcheckString('-lh2-', {offset: 2}) ||\n\t\tcheckString('-lh3-', {offset: 2}) ||\n\t\tcheckString('-lh4-', {offset: 2}) ||\n\t\tcheckString('-lh5-', {offset: 2}) ||\n\t\tcheckString('-lh6-', {offset: 2}) ||\n\t\tcheckString('-lh7-', {offset: 2}) ||\n\t\tcheckString('-lzs-', {offset: 2}) ||\n\t\tcheckString('-lz4-', {offset: 2}) ||\n\t\tcheckString('-lz5-', {offset: 2}) ||\n\t\tcheckString('-lhd-', {offset: 2})\n\t) {\n\t\treturn {\n\t\t\text: 'lzh',\n\t\t\tmime: 'application/x-lzh-compressed'\n\t\t};\n\t}\n\n\t// MPEG program stream (PS or MPEG-PS)\n\tif (check([0x00, 0x00, 0x01, 0xBA])) {\n\t\t//  MPEG-PS, MPEG-1 Part 1\n\t\tif (check([0x21], {offset: 4, mask: [0xF1]})) {\n\t\t\treturn {\n\t\t\t\text: 'mpg', // May also be .ps, .mpeg\n\t\t\t\tmime: 'video/MP1S'\n\t\t\t};\n\t\t}\n\n\t\t// MPEG-PS, MPEG-2 Part 1\n\t\tif (check([0x44], {offset: 4, mask: [0xC4]})) {\n\t\t\treturn {\n\t\t\t\text: 'mpg', // May also be .mpg, .m2p, .vob or .sub\n\t\t\t\tmime: 'video/MP2P'\n\t\t\t};\n\t\t}\n\t}\n\n\tif (checkString('ITSF')) {\n\t\treturn {\n\t\t\text: 'chm',\n\t\t\tmime: 'application/vnd.ms-htmlhelp'\n\t\t};\n\t}\n\n\t// -- 6-byte signatures --\n\n\tif (check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {\n\t\treturn {\n\t\t\text: 'xz',\n\t\t\tmime: 'application/x-xz'\n\t\t};\n\t}\n\n\tif (checkString('<?xml ')) {\n\t\treturn {\n\t\t\text: 'xml',\n\t\t\tmime: 'application/xml'\n\t\t};\n\t}\n\n\tif (check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {\n\t\treturn {\n\t\t\text: '7z',\n\t\t\tmime: 'application/x-7z-compressed'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7]) &&\n\t\t(buffer[6] === 0x0 || buffer[6] === 0x1)\n\t) {\n\t\treturn {\n\t\t\text: 'rar',\n\t\t\tmime: 'application/x-rar-compressed'\n\t\t};\n\t}\n\n\tif (checkString('solid ')) {\n\t\treturn {\n\t\t\text: 'stl',\n\t\t\tmime: 'model/stl'\n\t\t};\n\t}\n\n\t// -- 7-byte signatures --\n\n\tif (checkString('BLENDER')) {\n\t\treturn {\n\t\t\text: 'blend',\n\t\t\tmime: 'application/x-blender'\n\t\t};\n\t}\n\n\tif (checkString('!<arch>')) {\n\t\tawait tokenizer.ignore(8);\n\t\tconst str = await tokenizer.readToken(new Token.StringType(13, 'ascii'));\n\t\tif (str === 'debian-binary') {\n\t\t\treturn {\n\t\t\t\text: 'deb',\n\t\t\t\tmime: 'application/x-deb'\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\text: 'ar',\n\t\t\tmime: 'application/x-unix-archive'\n\t\t};\n\t}\n\n\t// -- 8-byte signatures --\n\n\tif (check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {\n\t\t// APNG format (https://wiki.mozilla.org/APNG_Specification)\n\t\t// 1. Find the first IDAT (image data) chunk (49 44 41 54)\n\t\t// 2. Check if there is an \"acTL\" chunk before the IDAT one (61 63 54 4C)\n\n\t\t// Offset calculated as follows:\n\t\t// - 8 bytes: PNG signature\n\t\t// - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk\n\n\t\tawait tokenizer.ignore(8); // ignore PNG signature\n\n\t\tasync function readChunkHeader() {\n\t\t\treturn {\n\t\t\t\tlength: await tokenizer.readToken(Token.INT32_BE),\n\t\t\t\ttype: await tokenizer.readToken(new Token.StringType(4, 'binary'))\n\t\t\t};\n\t\t}\n\n\t\tdo {\n\t\t\tconst chunk = await readChunkHeader();\n\t\t\tif (chunk.length < 0) {\n\t\t\t\treturn; // Invalid chunk length\n\t\t\t}\n\n\t\t\tswitch (chunk.type) {\n\t\t\t\tcase 'IDAT':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'png',\n\t\t\t\t\t\tmime: 'image/png'\n\t\t\t\t\t};\n\t\t\t\tcase 'acTL':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'apng',\n\t\t\t\t\t\tmime: 'image/apng'\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\tawait tokenizer.ignore(chunk.length + 4); // Ignore chunk-data + CRC\n\t\t\t}\n\t\t} while (tokenizer.position + 8 < tokenizer.fileInfo.size);\n\n\t\treturn {\n\t\t\text: 'png',\n\t\t\tmime: 'image/png'\n\t\t};\n\t}\n\n\tif (check([0x41, 0x52, 0x52, 0x4F, 0x57, 0x31, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'arrow',\n\t\t\tmime: 'application/x-apache-arrow'\n\t\t};\n\t}\n\n\tif (check([0x67, 0x6C, 0x54, 0x46, 0x02, 0x00, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'glb',\n\t\t\tmime: 'model/gltf-binary'\n\t\t};\n\t}\n\n\t// `mov` format variants\n\tif (\n\t\tcheck([0x66, 0x72, 0x65, 0x65], {offset: 4}) || // `free`\n\t\tcheck([0x6D, 0x64, 0x61, 0x74], {offset: 4}) || // `mdat` MJPEG\n\t\tcheck([0x6D, 0x6F, 0x6F, 0x76], {offset: 4}) || // `moov`\n\t\tcheck([0x77, 0x69, 0x64, 0x65], {offset: 4}) // `wide`\n\t) {\n\t\treturn {\n\t\t\text: 'mov',\n\t\t\tmime: 'video/quicktime'\n\t\t};\n\t}\n\n\t// -- 9-byte signatures --\n\n\tif (check([0x49, 0x49, 0x52, 0x4F, 0x08, 0x00, 0x00, 0x00, 0x18])) {\n\t\treturn {\n\t\t\text: 'orf',\n\t\t\tmime: 'image/x-olympus-orf'\n\t\t};\n\t}\n\n\tif (checkString('gimp xcf ')) {\n\t\treturn {\n\t\t\text: 'xcf',\n\t\t\tmime: 'image/x-xcf'\n\t\t};\n\t}\n\n\t// -- 12-byte signatures --\n\n\tif (check([0x49, 0x49, 0x55, 0x00, 0x18, 0x00, 0x00, 0x00, 0x88, 0xE7, 0x74, 0xD8])) {\n\t\treturn {\n\t\t\text: 'rw2',\n\t\t\tmime: 'image/x-panasonic-rw2'\n\t\t};\n\t}\n\n\t// ASF_Header_Object first 80 bytes\n\tif (check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {\n\t\tasync function readHeader() {\n\t\t\tconst guid = Buffer.alloc(16);\n\t\t\tawait tokenizer.readBuffer(guid);\n\t\t\treturn {\n\t\t\t\tid: guid,\n\t\t\t\tsize: await tokenizer.readToken(Token.UINT64_LE)\n\t\t\t};\n\t\t}\n\n\t\tawait tokenizer.ignore(30);\n\t\t// Search for header should be in first 1KB of file.\n\t\twhile (tokenizer.position + 24 < tokenizer.fileInfo.size) {\n\t\t\tconst header = await readHeader();\n\t\t\tlet payload = header.size - 24;\n\t\t\tif (_check(header.id, [0x91, 0x07, 0xDC, 0xB7, 0xB7, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65])) {\n\t\t\t\t// Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)\n\t\t\t\tconst typeId = Buffer.alloc(16);\n\t\t\t\tpayload -= await tokenizer.readBuffer(typeId);\n\n\t\t\t\tif (_check(typeId, [0x40, 0x9E, 0x69, 0xF8, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n\t\t\t\t\t// Found audio:\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'asf',\n\t\t\t\t\t\tmime: 'audio/x-ms-asf'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (_check(typeId, [0xC0, 0xEF, 0x19, 0xBC, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n\t\t\t\t\t// Found video:\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'asf',\n\t\t\t\t\t\tmime: 'video/x-ms-asf'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tawait tokenizer.ignore(payload);\n\t\t}\n\n\t\t// Default to ASF generic extension\n\t\treturn {\n\t\t\text: 'asf',\n\t\t\tmime: 'application/vnd.ms-asf'\n\t\t};\n\t}\n\n\tif (check([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A])) {\n\t\treturn {\n\t\t\text: 'ktx',\n\t\t\tmime: 'image/ktx'\n\t\t};\n\t}\n\n\tif ((check([0x7E, 0x10, 0x04]) || check([0x7E, 0x18, 0x04])) && check([0x30, 0x4D, 0x49, 0x45], {offset: 4})) {\n\t\treturn {\n\t\t\text: 'mie',\n\t\t\tmime: 'application/x-mie'\n\t\t};\n\t}\n\n\tif (check([0x27, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], {offset: 2})) {\n\t\treturn {\n\t\t\text: 'shp',\n\t\t\tmime: 'application/x-esri-shape'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\n\t\t// JPEG-2000 family\n\n\t\tawait tokenizer.ignore(20);\n\t\tconst type = await tokenizer.readToken(new Token.StringType(4, 'ascii'));\n\t\tswitch (type) {\n\t\t\tcase 'jp2 ':\n\t\t\t\treturn {\n\t\t\t\t\text: 'jp2',\n\t\t\t\t\tmime: 'image/jp2'\n\t\t\t\t};\n\t\t\tcase 'jpx ':\n\t\t\t\treturn {\n\t\t\t\t\text: 'jpx',\n\t\t\t\t\tmime: 'image/jpx'\n\t\t\t\t};\n\t\t\tcase 'jpm ':\n\t\t\t\treturn {\n\t\t\t\t\text: 'jpm',\n\t\t\t\t\tmime: 'image/jpm'\n\t\t\t\t};\n\t\t\tcase 'mjp2':\n\t\t\t\treturn {\n\t\t\t\t\text: 'mj2',\n\t\t\t\t\tmime: 'image/mj2'\n\t\t\t\t};\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\tif (\n\t\tcheck([0xFF, 0x0A]) ||\n\t\tcheck([0x00, 0x00, 0x00, 0x0C, 0x4A, 0x58, 0x4C, 0x20, 0x0D, 0x0A, 0x87, 0x0A])\n\t) {\n\t\treturn {\n\t\t\text: 'jxl',\n\t\t\tmime: 'image/jxl'\n\t\t};\n\t}\n\n\t// -- Unsafe signatures --\n\n\tif (\n\t\tcheck([0x0, 0x0, 0x1, 0xBA]) ||\n\t\tcheck([0x0, 0x0, 0x1, 0xB3])\n\t) {\n\t\treturn {\n\t\t\text: 'mpg',\n\t\t\tmime: 'video/mpeg'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x01, 0x00, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'ttf',\n\t\t\tmime: 'font/ttf'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x00, 0x01, 0x00])) {\n\t\treturn {\n\t\t\text: 'ico',\n\t\t\tmime: 'image/x-icon'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x00, 0x02, 0x00])) {\n\t\treturn {\n\t\t\text: 'cur',\n\t\t\tmime: 'image/x-icon'\n\t\t};\n\t}\n\n\tif (check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {\n\t\t// Detected Microsoft Compound File Binary File (MS-CFB) Format.\n\t\treturn {\n\t\t\text: 'cfb',\n\t\t\tmime: 'application/x-cfb'\n\t\t};\n\t}\n\n\t// Increase sample size from 12 to 256.\n\tawait tokenizer.peekBuffer(buffer, {length: Math.min(256, tokenizer.fileInfo.size), mayBeLess: true});\n\n\t// -- 15-byte signatures --\n\n\tif (checkString('BEGIN:')) {\n\t\tif (checkString('VCARD', {offset: 6})) {\n\t\t\treturn {\n\t\t\t\text: 'vcf',\n\t\t\t\tmime: 'text/vcard'\n\t\t\t};\n\t\t}\n\n\t\tif (checkString('VCALENDAR', {offset: 6})) {\n\t\t\treturn {\n\t\t\t\text: 'ics',\n\t\t\t\tmime: 'text/calendar'\n\t\t\t};\n\t\t}\n\t}\n\n\t// `raf` is here just to keep all the raw image detectors together.\n\tif (checkString('FUJIFILMCCD-RAW')) {\n\t\treturn {\n\t\t\text: 'raf',\n\t\t\tmime: 'image/x-fujifilm-raf'\n\t\t};\n\t}\n\n\tif (checkString('Extended Module:')) {\n\t\treturn {\n\t\t\text: 'xm',\n\t\t\tmime: 'audio/x-xm'\n\t\t};\n\t}\n\n\tif (checkString('Creative Voice File')) {\n\t\treturn {\n\t\t\text: 'voc',\n\t\t\tmime: 'audio/x-voc'\n\t\t};\n\t}\n\n\tif (check([0x04, 0x00, 0x00, 0x00]) && buffer.length >= 16) { // Rough & quick check Pickle/ASAR\n\t\tconst jsonSize = buffer.readUInt32LE(12);\n\t\tif (jsonSize > 12 && buffer.length >= jsonSize + 16) {\n\t\t\ttry {\n\t\t\t\tconst header = buffer.slice(16, jsonSize + 16).toString();\n\t\t\t\tconst json = JSON.parse(header);\n\t\t\t\t// Check if Pickle is ASAR\n\t\t\t\tif (json.files) { // Final check, assuring Pickle/ASAR format\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'asar',\n\t\t\t\t\t\tmime: 'application/x-asar'\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} catch (_) {\n\t\t\t}\n\t\t}\n\t}\n\n\tif (check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {\n\t\treturn {\n\t\t\text: 'mxf',\n\t\t\tmime: 'application/mxf'\n\t\t};\n\t}\n\n\tif (checkString('SCRM', {offset: 44})) {\n\t\treturn {\n\t\t\text: 's3m',\n\t\t\tmime: 'audio/x-s3m'\n\t\t};\n\t}\n\n\tif (check([0x47], {offset: 4}) && (check([0x47], {offset: 192}) || check([0x47], {offset: 196}))) {\n\t\treturn {\n\t\t\text: 'mts',\n\t\t\tmime: 'video/mp2t'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x4F, 0x4F, 0x4B, 0x4D, 0x4F, 0x42, 0x49], {offset: 60})) {\n\t\treturn {\n\t\t\text: 'mobi',\n\t\t\tmime: 'application/x-mobipocket-ebook'\n\t\t};\n\t}\n\n\tif (check([0x44, 0x49, 0x43, 0x4D], {offset: 128})) {\n\t\treturn {\n\t\t\text: 'dcm',\n\t\t\tmime: 'application/dicom'\n\t\t};\n\t}\n\n\tif (check([0x4C, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])) {\n\t\treturn {\n\t\t\text: 'lnk',\n\t\t\tmime: 'application/x.ms.shortcut' // Invented by us\n\t\t};\n\t}\n\n\tif (check([0x62, 0x6F, 0x6F, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'alias',\n\t\t\tmime: 'application/x.apple.alias' // Invented by us\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x4C, 0x50], {offset: 34}) &&\n\t\t(\n\t\t\tcheck([0x00, 0x00, 0x01], {offset: 8}) ||\n\t\t\tcheck([0x01, 0x00, 0x02], {offset: 8}) ||\n\t\t\tcheck([0x02, 0x00, 0x02], {offset: 8})\n\t\t)\n\t) {\n\t\treturn {\n\t\t\text: 'eot',\n\t\t\tmime: 'application/vnd.ms-fontobject'\n\t\t};\n\t}\n\n\tif (check([0x06, 0x06, 0xED, 0xF5, 0xD8, 0x1D, 0x46, 0xE5, 0xBD, 0x31, 0xEF, 0xE7, 0xFE, 0x74, 0xB7, 0x1D])) {\n\t\treturn {\n\t\t\text: 'indd',\n\t\t\tmime: 'application/x-indesign'\n\t\t};\n\t}\n\n\t// Increase sample size from 256 to 512\n\tawait tokenizer.peekBuffer(buffer, {length: Math.min(512, tokenizer.fileInfo.size), mayBeLess: true});\n\n\t// Requires a buffer size of 512 bytes\n\tif (tarHeaderChecksumMatches(buffer)) {\n\t\treturn {\n\t\t\text: 'tar',\n\t\t\tmime: 'application/x-tar'\n\t\t};\n\t}\n\n\tif (check([0xFF, 0xFE, 0xFF, 0x0E, 0x53, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x55, 0x00, 0x70, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00])) {\n\t\treturn {\n\t\t\text: 'skp',\n\t\t\tmime: 'application/vnd.sketchup.skp'\n\t\t};\n\t}\n\n\tif (checkString('-----BEGIN PGP MESSAGE-----')) {\n\t\treturn {\n\t\t\text: 'pgp',\n\t\t\tmime: 'application/pgp-encrypted'\n\t\t};\n\t}\n\n\t// Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)\n\tif (buffer.length >= 2 && check([0xFF, 0xE0], {offset: 0, mask: [0xFF, 0xE0]})) {\n\t\tif (check([0x10], {offset: 1, mask: [0x16]})) {\n\t\t\t// Check for (ADTS) MPEG-2\n\t\t\tif (check([0x08], {offset: 1, mask: [0x08]})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'aac',\n\t\t\t\t\tmime: 'audio/aac'\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Must be (ADTS) MPEG-4\n\t\t\treturn {\n\t\t\t\text: 'aac',\n\t\t\t\tmime: 'audio/aac'\n\t\t\t};\n\t\t}\n\n\t\t// MPEG 1 or 2 Layer 3 header\n\t\t// Check for MPEG layer 3\n\t\tif (check([0x02], {offset: 1, mask: [0x06]})) {\n\t\t\treturn {\n\t\t\t\text: 'mp3',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\n\t\t// Check for MPEG layer 2\n\t\tif (check([0x04], {offset: 1, mask: [0x06]})) {\n\t\t\treturn {\n\t\t\t\text: 'mp2',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\n\t\t// Check for MPEG layer 1\n\t\tif (check([0x06], {offset: 1, mask: [0x06]})) {\n\t\t\treturn {\n\t\t\t\text: 'mp1',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\t}\n}\n\nconst stream = readableStream => new Promise((resolve, reject) => {\n\t// Using `eval` to work around issues when bundling with Webpack\n\tconst stream = eval('require')('stream'); // eslint-disable-line no-eval\n\n\treadableStream.on('error', reject);\n\treadableStream.once('readable', async () => {\n\t\t// Set up output stream\n\t\tconst pass = new stream.PassThrough();\n\t\tlet outputStream;\n\t\tif (stream.pipeline) {\n\t\t\toutputStream = stream.pipeline(readableStream, pass, () => {\n\t\t\t});\n\t\t} else {\n\t\t\toutputStream = readableStream.pipe(pass);\n\t\t}\n\n\t\t// Read the input stream and detect the filetype\n\t\tconst chunk = readableStream.read(minimumBytes) || readableStream.read() || Buffer.alloc(0);\n\t\ttry {\n\t\t\tconst fileType = await fromBuffer(chunk);\n\t\t\tpass.fileType = fileType;\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\n\t\tresolve(outputStream);\n\t});\n});\n\nconst fileType = {\n\tfromStream,\n\tfromTokenizer,\n\tfromBuffer,\n\tstream\n};\n\nObject.defineProperty(fileType, 'extensions', {\n\tget() {\n\t\treturn new Set(supported.extensions);\n\t}\n});\n\nObject.defineProperty(fileType, 'mimeTypes', {\n\tget() {\n\t\treturn new Set(supported.mimeTypes);\n\t}\n});\n\nmodule.exports = fileType;\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/file-type/core.js?");

/***/ }),

/***/ "./node_modules/file-type/supported.js":
/*!*********************************************!*\
  !*** ./node_modules/file-type/supported.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = {\n\textensions: [\n\t\t'jpg',\n\t\t'png',\n\t\t'apng',\n\t\t'gif',\n\t\t'webp',\n\t\t'flif',\n\t\t'xcf',\n\t\t'cr2',\n\t\t'cr3',\n\t\t'orf',\n\t\t'arw',\n\t\t'dng',\n\t\t'nef',\n\t\t'rw2',\n\t\t'raf',\n\t\t'tif',\n\t\t'bmp',\n\t\t'icns',\n\t\t'jxr',\n\t\t'psd',\n\t\t'indd',\n\t\t'zip',\n\t\t'tar',\n\t\t'rar',\n\t\t'gz',\n\t\t'bz2',\n\t\t'7z',\n\t\t'dmg',\n\t\t'mp4',\n\t\t'mid',\n\t\t'mkv',\n\t\t'webm',\n\t\t'mov',\n\t\t'avi',\n\t\t'mpg',\n\t\t'mp2',\n\t\t'mp3',\n\t\t'm4a',\n\t\t'oga',\n\t\t'ogg',\n\t\t'ogv',\n\t\t'opus',\n\t\t'flac',\n\t\t'wav',\n\t\t'spx',\n\t\t'amr',\n\t\t'pdf',\n\t\t'epub',\n\t\t'exe',\n\t\t'swf',\n\t\t'rtf',\n\t\t'wasm',\n\t\t'woff',\n\t\t'woff2',\n\t\t'eot',\n\t\t'ttf',\n\t\t'otf',\n\t\t'ico',\n\t\t'flv',\n\t\t'ps',\n\t\t'xz',\n\t\t'sqlite',\n\t\t'nes',\n\t\t'crx',\n\t\t'xpi',\n\t\t'cab',\n\t\t'deb',\n\t\t'ar',\n\t\t'rpm',\n\t\t'Z',\n\t\t'lz',\n\t\t'cfb',\n\t\t'mxf',\n\t\t'mts',\n\t\t'blend',\n\t\t'bpg',\n\t\t'docx',\n\t\t'pptx',\n\t\t'xlsx',\n\t\t'3gp',\n\t\t'3g2',\n\t\t'jp2',\n\t\t'jpm',\n\t\t'jpx',\n\t\t'mj2',\n\t\t'aif',\n\t\t'qcp',\n\t\t'odt',\n\t\t'ods',\n\t\t'odp',\n\t\t'xml',\n\t\t'mobi',\n\t\t'heic',\n\t\t'cur',\n\t\t'ktx',\n\t\t'ape',\n\t\t'wv',\n\t\t'dcm',\n\t\t'ics',\n\t\t'glb',\n\t\t'pcap',\n\t\t'dsf',\n\t\t'lnk',\n\t\t'alias',\n\t\t'voc',\n\t\t'ac3',\n\t\t'm4v',\n\t\t'm4p',\n\t\t'm4b',\n\t\t'f4v',\n\t\t'f4p',\n\t\t'f4b',\n\t\t'f4a',\n\t\t'mie',\n\t\t'asf',\n\t\t'ogm',\n\t\t'ogx',\n\t\t'mpc',\n\t\t'arrow',\n\t\t'shp',\n\t\t'aac',\n\t\t'mp1',\n\t\t'it',\n\t\t's3m',\n\t\t'xm',\n\t\t'ai',\n\t\t'skp',\n\t\t'avif',\n\t\t'eps',\n\t\t'lzh',\n\t\t'pgp',\n\t\t'asar',\n\t\t'stl',\n\t\t'chm',\n\t\t'3mf',\n\t\t'zst',\n\t\t'jxl',\n\t\t'vcf'\n\t],\n\tmimeTypes: [\n\t\t'image/jpeg',\n\t\t'image/png',\n\t\t'image/gif',\n\t\t'image/webp',\n\t\t'image/flif',\n\t\t'image/x-xcf',\n\t\t'image/x-canon-cr2',\n\t\t'image/x-canon-cr3',\n\t\t'image/tiff',\n\t\t'image/bmp',\n\t\t'image/vnd.ms-photo',\n\t\t'image/vnd.adobe.photoshop',\n\t\t'application/x-indesign',\n\t\t'application/epub+zip',\n\t\t'application/x-xpinstall',\n\t\t'application/vnd.oasis.opendocument.text',\n\t\t'application/vnd.oasis.opendocument.spreadsheet',\n\t\t'application/vnd.oasis.opendocument.presentation',\n\t\t'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n\t\t'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n\t\t'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n\t\t'application/zip',\n\t\t'application/x-tar',\n\t\t'application/x-rar-compressed',\n\t\t'application/gzip',\n\t\t'application/x-bzip2',\n\t\t'application/x-7z-compressed',\n\t\t'application/x-apple-diskimage',\n\t\t'application/x-apache-arrow',\n\t\t'video/mp4',\n\t\t'audio/midi',\n\t\t'video/x-matroska',\n\t\t'video/webm',\n\t\t'video/quicktime',\n\t\t'video/vnd.avi',\n\t\t'audio/vnd.wave',\n\t\t'audio/qcelp',\n\t\t'audio/x-ms-asf',\n\t\t'video/x-ms-asf',\n\t\t'application/vnd.ms-asf',\n\t\t'video/mpeg',\n\t\t'video/3gpp',\n\t\t'audio/mpeg',\n\t\t'audio/mp4', // RFC 4337\n\t\t'audio/opus',\n\t\t'video/ogg',\n\t\t'audio/ogg',\n\t\t'application/ogg',\n\t\t'audio/x-flac',\n\t\t'audio/ape',\n\t\t'audio/wavpack',\n\t\t'audio/amr',\n\t\t'application/pdf',\n\t\t'application/x-msdownload',\n\t\t'application/x-shockwave-flash',\n\t\t'application/rtf',\n\t\t'application/wasm',\n\t\t'font/woff',\n\t\t'font/woff2',\n\t\t'application/vnd.ms-fontobject',\n\t\t'font/ttf',\n\t\t'font/otf',\n\t\t'image/x-icon',\n\t\t'video/x-flv',\n\t\t'application/postscript',\n\t\t'application/eps',\n\t\t'application/x-xz',\n\t\t'application/x-sqlite3',\n\t\t'application/x-nintendo-nes-rom',\n\t\t'application/x-google-chrome-extension',\n\t\t'application/vnd.ms-cab-compressed',\n\t\t'application/x-deb',\n\t\t'application/x-unix-archive',\n\t\t'application/x-rpm',\n\t\t'application/x-compress',\n\t\t'application/x-lzip',\n\t\t'application/x-cfb',\n\t\t'application/x-mie',\n\t\t'application/mxf',\n\t\t'video/mp2t',\n\t\t'application/x-blender',\n\t\t'image/bpg',\n\t\t'image/jp2',\n\t\t'image/jpx',\n\t\t'image/jpm',\n\t\t'image/mj2',\n\t\t'audio/aiff',\n\t\t'application/xml',\n\t\t'application/x-mobipocket-ebook',\n\t\t'image/heif',\n\t\t'image/heif-sequence',\n\t\t'image/heic',\n\t\t'image/heic-sequence',\n\t\t'image/icns',\n\t\t'image/ktx',\n\t\t'application/dicom',\n\t\t'audio/x-musepack',\n\t\t'text/calendar',\n\t\t'text/vcard',\n\t\t'model/gltf-binary',\n\t\t'application/vnd.tcpdump.pcap',\n\t\t'audio/x-dsf', // Non-standard\n\t\t'application/x.ms.shortcut', // Invented by us\n\t\t'application/x.apple.alias', // Invented by us\n\t\t'audio/x-voc',\n\t\t'audio/vnd.dolby.dd-raw',\n\t\t'audio/x-m4a',\n\t\t'image/apng',\n\t\t'image/x-olympus-orf',\n\t\t'image/x-sony-arw',\n\t\t'image/x-adobe-dng',\n\t\t'image/x-nikon-nef',\n\t\t'image/x-panasonic-rw2',\n\t\t'image/x-fujifilm-raf',\n\t\t'video/x-m4v',\n\t\t'video/3gpp2',\n\t\t'application/x-esri-shape',\n\t\t'audio/aac',\n\t\t'audio/x-it',\n\t\t'audio/x-s3m',\n\t\t'audio/x-xm',\n\t\t'video/MP1S',\n\t\t'video/MP2P',\n\t\t'application/vnd.sketchup.skp',\n\t\t'image/avif',\n\t\t'application/x-lzh-compressed',\n\t\t'application/pgp-encrypted',\n\t\t'application/x-asar',\n\t\t'model/stl',\n\t\t'application/vnd.ms-htmlhelp',\n\t\t'model/3mf',\n\t\t'image/jxl',\n\t\t'application/zstd'\n\t]\n};\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/file-type/supported.js?");

/***/ }),

/***/ "./node_modules/file-type/util.js":
/*!****************************************!*\
  !*** ./node_modules/file-type/util.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.stringToBytes = string => [...string].map(character => character.charCodeAt(0));\n\n/**\nChecks whether the TAR checksum is valid.\n\n@param {Buffer} buffer - The TAR header `[offset ... offset + 512]`.\n@param {number} offset - TAR header offset.\n@returns {boolean} `true` if the TAR checksum is valid, otherwise `false`.\n*/\nexports.tarHeaderChecksumMatches = (buffer, offset = 0) => {\n\tconst readSum = parseInt(buffer.toString('utf8', 148, 154).replace(/\\0.*$/, '').trim(), 8); // Read sum in header\n\tif (isNaN(readSum)) {\n\t\treturn false;\n\t}\n\n\tlet sum = 8 * 0x20; // Initialize signed bit sum\n\n\tfor (let i = offset; i < offset + 148; i++) {\n\t\tsum += buffer[i];\n\t}\n\n\tfor (let i = offset + 156; i < offset + 512; i++) {\n\t\tsum += buffer[i];\n\t}\n\n\treturn readSum === sum;\n};\n\n/**\nID3 UINT32 sync-safe tokenizer token.\n28 bits (representing up to 256MB) integer, the msb is 0 to avoid \"false syncsignals\".\n*/\nexports.uint32SyncSafeToken = {\n\tget: (buffer, offset) => {\n\t\treturn (buffer[offset + 3] & 0x7F) | ((buffer[offset + 2]) << 7) | ((buffer[offset + 1]) << 14) | ((buffer[offset]) << 21);\n\t},\n\tlen: 4\n};\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/file-type/util.js?");

/***/ }),

/***/ "./node_modules/graceful-fs/clone.js":
/*!*******************************************!*\
  !*** ./node_modules/graceful-fs/clone.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = clone\n\nvar getPrototypeOf = Object.getPrototypeOf || function (obj) {\n  return obj.__proto__\n}\n\nfunction clone (obj) {\n  if (obj === null || typeof obj !== 'object')\n    return obj\n\n  if (obj instanceof Object)\n    var copy = { __proto__: getPrototypeOf(obj) }\n  else\n    var copy = Object.create(null)\n\n  Object.getOwnPropertyNames(obj).forEach(function (key) {\n    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key))\n  })\n\n  return copy\n}\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/graceful-fs/clone.js?");

/***/ }),

/***/ "./node_modules/graceful-fs/graceful-fs.js":
/*!*************************************************!*\
  !*** ./node_modules/graceful-fs/graceful-fs.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\")\nvar polyfills = __webpack_require__(/*! ./polyfills.js */ \"./node_modules/graceful-fs/polyfills.js\")\nvar legacy = __webpack_require__(/*! ./legacy-streams.js */ \"./node_modules/graceful-fs/legacy-streams.js\")\nvar clone = __webpack_require__(/*! ./clone.js */ \"./node_modules/graceful-fs/clone.js\")\n\nvar util = __webpack_require__(/*! util */ \"util\")\n\n/* istanbul ignore next - node 0.x polyfill */\nvar gracefulQueue\nvar previousSymbol\n\n/* istanbul ignore else - node 0.x polyfill */\nif (typeof Symbol === 'function' && typeof Symbol.for === 'function') {\n  gracefulQueue = Symbol.for('graceful-fs.queue')\n  // This is used in testing by future versions\n  previousSymbol = Symbol.for('graceful-fs.previous')\n} else {\n  gracefulQueue = '___graceful-fs.queue'\n  previousSymbol = '___graceful-fs.previous'\n}\n\nfunction noop () {}\n\nfunction publishQueue(context, queue) {\n  Object.defineProperty(context, gracefulQueue, {\n    get: function() {\n      return queue\n    }\n  })\n}\n\nvar debug = noop\nif (util.debuglog)\n  debug = util.debuglog('gfs4')\nelse if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || ''))\n  debug = function() {\n    var m = util.format.apply(util, arguments)\n    m = 'GFS4: ' + m.split(/\\n/).join('\\nGFS4: ')\n    console.error(m)\n  }\n\n// Once time initialization\nif (!fs[gracefulQueue]) {\n  // This queue can be shared by multiple loaded instances\n  var queue = global[gracefulQueue] || []\n  publishQueue(fs, queue)\n\n  // Patch fs.close/closeSync to shared queue version, because we need\n  // to retry() whenever a close happens *anywhere* in the program.\n  // This is essential when multiple graceful-fs instances are\n  // in play at the same time.\n  fs.close = (function (fs$close) {\n    function close (fd, cb) {\n      return fs$close.call(fs, fd, function (err) {\n        // This function uses the graceful-fs shared queue\n        if (!err) {\n          retry()\n        }\n\n        if (typeof cb === 'function')\n          cb.apply(this, arguments)\n      })\n    }\n\n    Object.defineProperty(close, previousSymbol, {\n      value: fs$close\n    })\n    return close\n  })(fs.close)\n\n  fs.closeSync = (function (fs$closeSync) {\n    function closeSync (fd) {\n      // This function uses the graceful-fs shared queue\n      fs$closeSync.apply(fs, arguments)\n      retry()\n    }\n\n    Object.defineProperty(closeSync, previousSymbol, {\n      value: fs$closeSync\n    })\n    return closeSync\n  })(fs.closeSync)\n\n  if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || '')) {\n    process.on('exit', function() {\n      debug(fs[gracefulQueue])\n      __webpack_require__(/*! assert */ \"assert\").equal(fs[gracefulQueue].length, 0)\n    })\n  }\n}\n\nif (!global[gracefulQueue]) {\n  publishQueue(global, fs[gracefulQueue]);\n}\n\nmodule.exports = patch(clone(fs))\nif (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {\n    module.exports = patch(fs)\n    fs.__patched = true;\n}\n\nfunction patch (fs) {\n  // Everything that references the open() function needs to be in here\n  polyfills(fs)\n  fs.gracefulify = patch\n\n  fs.createReadStream = createReadStream\n  fs.createWriteStream = createWriteStream\n  var fs$readFile = fs.readFile\n  fs.readFile = readFile\n  function readFile (path, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$readFile(path, options, cb)\n\n    function go$readFile (path, options, cb) {\n      return fs$readFile(path, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$readFile, [path, options, cb]])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n          retry()\n        }\n      })\n    }\n  }\n\n  var fs$writeFile = fs.writeFile\n  fs.writeFile = writeFile\n  function writeFile (path, data, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$writeFile(path, data, options, cb)\n\n    function go$writeFile (path, data, options, cb) {\n      return fs$writeFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$writeFile, [path, data, options, cb]])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n          retry()\n        }\n      })\n    }\n  }\n\n  var fs$appendFile = fs.appendFile\n  if (fs$appendFile)\n    fs.appendFile = appendFile\n  function appendFile (path, data, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$appendFile(path, data, options, cb)\n\n    function go$appendFile (path, data, options, cb) {\n      return fs$appendFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$appendFile, [path, data, options, cb]])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n          retry()\n        }\n      })\n    }\n  }\n\n  var fs$copyFile = fs.copyFile\n  if (fs$copyFile)\n    fs.copyFile = copyFile\n  function copyFile (src, dest, flags, cb) {\n    if (typeof flags === 'function') {\n      cb = flags\n      flags = 0\n    }\n    return fs$copyFile(src, dest, flags, function (err) {\n      if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n        enqueue([fs$copyFile, [src, dest, flags, cb]])\n      else {\n        if (typeof cb === 'function')\n          cb.apply(this, arguments)\n        retry()\n      }\n    })\n  }\n\n  var fs$readdir = fs.readdir\n  fs.readdir = readdir\n  function readdir (path, options, cb) {\n    var args = [path]\n    if (typeof options !== 'function') {\n      args.push(options)\n    } else {\n      cb = options\n    }\n    args.push(go$readdir$cb)\n\n    return go$readdir(args)\n\n    function go$readdir$cb (err, files) {\n      if (files && files.sort)\n        files.sort()\n\n      if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n        enqueue([go$readdir, [args]])\n\n      else {\n        if (typeof cb === 'function')\n          cb.apply(this, arguments)\n        retry()\n      }\n    }\n  }\n\n  function go$readdir (args) {\n    return fs$readdir.apply(fs, args)\n  }\n\n  if (process.version.substr(0, 4) === 'v0.8') {\n    var legStreams = legacy(fs)\n    ReadStream = legStreams.ReadStream\n    WriteStream = legStreams.WriteStream\n  }\n\n  var fs$ReadStream = fs.ReadStream\n  if (fs$ReadStream) {\n    ReadStream.prototype = Object.create(fs$ReadStream.prototype)\n    ReadStream.prototype.open = ReadStream$open\n  }\n\n  var fs$WriteStream = fs.WriteStream\n  if (fs$WriteStream) {\n    WriteStream.prototype = Object.create(fs$WriteStream.prototype)\n    WriteStream.prototype.open = WriteStream$open\n  }\n\n  Object.defineProperty(fs, 'ReadStream', {\n    get: function () {\n      return ReadStream\n    },\n    set: function (val) {\n      ReadStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n  Object.defineProperty(fs, 'WriteStream', {\n    get: function () {\n      return WriteStream\n    },\n    set: function (val) {\n      WriteStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n\n  // legacy names\n  var FileReadStream = ReadStream\n  Object.defineProperty(fs, 'FileReadStream', {\n    get: function () {\n      return FileReadStream\n    },\n    set: function (val) {\n      FileReadStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n  var FileWriteStream = WriteStream\n  Object.defineProperty(fs, 'FileWriteStream', {\n    get: function () {\n      return FileWriteStream\n    },\n    set: function (val) {\n      FileWriteStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n\n  function ReadStream (path, options) {\n    if (this instanceof ReadStream)\n      return fs$ReadStream.apply(this, arguments), this\n    else\n      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)\n  }\n\n  function ReadStream$open () {\n    var that = this\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        if (that.autoClose)\n          that.destroy()\n\n        that.emit('error', err)\n      } else {\n        that.fd = fd\n        that.emit('open', fd)\n        that.read()\n      }\n    })\n  }\n\n  function WriteStream (path, options) {\n    if (this instanceof WriteStream)\n      return fs$WriteStream.apply(this, arguments), this\n    else\n      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)\n  }\n\n  function WriteStream$open () {\n    var that = this\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        that.destroy()\n        that.emit('error', err)\n      } else {\n        that.fd = fd\n        that.emit('open', fd)\n      }\n    })\n  }\n\n  function createReadStream (path, options) {\n    return new fs.ReadStream(path, options)\n  }\n\n  function createWriteStream (path, options) {\n    return new fs.WriteStream(path, options)\n  }\n\n  var fs$open = fs.open\n  fs.open = open\n  function open (path, flags, mode, cb) {\n    if (typeof mode === 'function')\n      cb = mode, mode = null\n\n    return go$open(path, flags, mode, cb)\n\n    function go$open (path, flags, mode, cb) {\n      return fs$open(path, flags, mode, function (err, fd) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$open, [path, flags, mode, cb]])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n          retry()\n        }\n      })\n    }\n  }\n\n  return fs\n}\n\nfunction enqueue (elem) {\n  debug('ENQUEUE', elem[0].name, elem[1])\n  fs[gracefulQueue].push(elem)\n}\n\nfunction retry () {\n  var elem = fs[gracefulQueue].shift()\n  if (elem) {\n    debug('RETRY', elem[0].name, elem[1])\n    elem[0].apply(null, elem[1])\n  }\n}\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/graceful-fs/graceful-fs.js?");

/***/ }),

/***/ "./node_modules/graceful-fs/legacy-streams.js":
/*!****************************************************!*\
  !*** ./node_modules/graceful-fs/legacy-streams.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Stream = __webpack_require__(/*! stream */ \"stream\").Stream\n\nmodule.exports = legacy\n\nfunction legacy (fs) {\n  return {\n    ReadStream: ReadStream,\n    WriteStream: WriteStream\n  }\n\n  function ReadStream (path, options) {\n    if (!(this instanceof ReadStream)) return new ReadStream(path, options);\n\n    Stream.call(this);\n\n    var self = this;\n\n    this.path = path;\n    this.fd = null;\n    this.readable = true;\n    this.paused = false;\n\n    this.flags = 'r';\n    this.mode = 438; /*=0666*/\n    this.bufferSize = 64 * 1024;\n\n    options = options || {};\n\n    // Mixin options into this\n    var keys = Object.keys(options);\n    for (var index = 0, length = keys.length; index < length; index++) {\n      var key = keys[index];\n      this[key] = options[key];\n    }\n\n    if (this.encoding) this.setEncoding(this.encoding);\n\n    if (this.start !== undefined) {\n      if ('number' !== typeof this.start) {\n        throw TypeError('start must be a Number');\n      }\n      if (this.end === undefined) {\n        this.end = Infinity;\n      } else if ('number' !== typeof this.end) {\n        throw TypeError('end must be a Number');\n      }\n\n      if (this.start > this.end) {\n        throw new Error('start must be <= end');\n      }\n\n      this.pos = this.start;\n    }\n\n    if (this.fd !== null) {\n      process.nextTick(function() {\n        self._read();\n      });\n      return;\n    }\n\n    fs.open(this.path, this.flags, this.mode, function (err, fd) {\n      if (err) {\n        self.emit('error', err);\n        self.readable = false;\n        return;\n      }\n\n      self.fd = fd;\n      self.emit('open', fd);\n      self._read();\n    })\n  }\n\n  function WriteStream (path, options) {\n    if (!(this instanceof WriteStream)) return new WriteStream(path, options);\n\n    Stream.call(this);\n\n    this.path = path;\n    this.fd = null;\n    this.writable = true;\n\n    this.flags = 'w';\n    this.encoding = 'binary';\n    this.mode = 438; /*=0666*/\n    this.bytesWritten = 0;\n\n    options = options || {};\n\n    // Mixin options into this\n    var keys = Object.keys(options);\n    for (var index = 0, length = keys.length; index < length; index++) {\n      var key = keys[index];\n      this[key] = options[key];\n    }\n\n    if (this.start !== undefined) {\n      if ('number' !== typeof this.start) {\n        throw TypeError('start must be a Number');\n      }\n      if (this.start < 0) {\n        throw new Error('start must be >= zero');\n      }\n\n      this.pos = this.start;\n    }\n\n    this.busy = false;\n    this._queue = [];\n\n    if (this.fd === null) {\n      this._open = fs.open;\n      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);\n      this.flush();\n    }\n  }\n}\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/graceful-fs/legacy-streams.js?");

/***/ }),

/***/ "./node_modules/graceful-fs/polyfills.js":
/*!***********************************************!*\
  !*** ./node_modules/graceful-fs/polyfills.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var constants = __webpack_require__(/*! constants */ \"constants\")\n\nvar origCwd = process.cwd\nvar cwd = null\n\nvar platform = process.env.GRACEFUL_FS_PLATFORM || process.platform\n\nprocess.cwd = function() {\n  if (!cwd)\n    cwd = origCwd.call(process)\n  return cwd\n}\ntry {\n  process.cwd()\n} catch (er) {}\n\n// This check is needed until node.js 12 is required\nif (typeof process.chdir === 'function') {\n  var chdir = process.chdir\n  process.chdir = function (d) {\n    cwd = null\n    chdir.call(process, d)\n  }\n  if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir)\n}\n\nmodule.exports = patch\n\nfunction patch (fs) {\n  // (re-)implement some things that are known busted or missing.\n\n  // lchmod, broken prior to 0.6.2\n  // back-port the fix here.\n  if (constants.hasOwnProperty('O_SYMLINK') &&\n      process.version.match(/^v0\\.6\\.[0-2]|^v0\\.5\\./)) {\n    patchLchmod(fs)\n  }\n\n  // lutimes implementation, or no-op\n  if (!fs.lutimes) {\n    patchLutimes(fs)\n  }\n\n  // https://github.com/isaacs/node-graceful-fs/issues/4\n  // Chown should not fail on einval or eperm if non-root.\n  // It should not fail on enosys ever, as this just indicates\n  // that a fs doesn't support the intended operation.\n\n  fs.chown = chownFix(fs.chown)\n  fs.fchown = chownFix(fs.fchown)\n  fs.lchown = chownFix(fs.lchown)\n\n  fs.chmod = chmodFix(fs.chmod)\n  fs.fchmod = chmodFix(fs.fchmod)\n  fs.lchmod = chmodFix(fs.lchmod)\n\n  fs.chownSync = chownFixSync(fs.chownSync)\n  fs.fchownSync = chownFixSync(fs.fchownSync)\n  fs.lchownSync = chownFixSync(fs.lchownSync)\n\n  fs.chmodSync = chmodFixSync(fs.chmodSync)\n  fs.fchmodSync = chmodFixSync(fs.fchmodSync)\n  fs.lchmodSync = chmodFixSync(fs.lchmodSync)\n\n  fs.stat = statFix(fs.stat)\n  fs.fstat = statFix(fs.fstat)\n  fs.lstat = statFix(fs.lstat)\n\n  fs.statSync = statFixSync(fs.statSync)\n  fs.fstatSync = statFixSync(fs.fstatSync)\n  fs.lstatSync = statFixSync(fs.lstatSync)\n\n  // if lchmod/lchown do not exist, then make them no-ops\n  if (!fs.lchmod) {\n    fs.lchmod = function (path, mode, cb) {\n      if (cb) process.nextTick(cb)\n    }\n    fs.lchmodSync = function () {}\n  }\n  if (!fs.lchown) {\n    fs.lchown = function (path, uid, gid, cb) {\n      if (cb) process.nextTick(cb)\n    }\n    fs.lchownSync = function () {}\n  }\n\n  // on Windows, A/V software can lock the directory, causing this\n  // to fail with an EACCES or EPERM if the directory contains newly\n  // created files.  Try again on failure, for up to 60 seconds.\n\n  // Set the timeout this long because some Windows Anti-Virus, such as Parity\n  // bit9, may lock files for up to a minute, causing npm package install\n  // failures. Also, take care to yield the scheduler. Windows scheduling gives\n  // CPU to a busy looping process, which can cause the program causing the lock\n  // contention to be starved of CPU by node, so the contention doesn't resolve.\n  if (platform === \"win32\") {\n    fs.rename = (function (fs$rename) { return function (from, to, cb) {\n      var start = Date.now()\n      var backoff = 0;\n      fs$rename(from, to, function CB (er) {\n        if (er\n            && (er.code === \"EACCES\" || er.code === \"EPERM\")\n            && Date.now() - start < 60000) {\n          setTimeout(function() {\n            fs.stat(to, function (stater, st) {\n              if (stater && stater.code === \"ENOENT\")\n                fs$rename(from, to, CB);\n              else\n                cb(er)\n            })\n          }, backoff)\n          if (backoff < 100)\n            backoff += 10;\n          return;\n        }\n        if (cb) cb(er)\n      })\n    }})(fs.rename)\n  }\n\n  // if read() returns EAGAIN, then just try it again.\n  fs.read = (function (fs$read) {\n    function read (fd, buffer, offset, length, position, callback_) {\n      var callback\n      if (callback_ && typeof callback_ === 'function') {\n        var eagCounter = 0\n        callback = function (er, _, __) {\n          if (er && er.code === 'EAGAIN' && eagCounter < 10) {\n            eagCounter ++\n            return fs$read.call(fs, fd, buffer, offset, length, position, callback)\n          }\n          callback_.apply(this, arguments)\n        }\n      }\n      return fs$read.call(fs, fd, buffer, offset, length, position, callback)\n    }\n\n    // This ensures `util.promisify` works as it does for native `fs.read`.\n    if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read)\n    return read\n  })(fs.read)\n\n  fs.readSync = (function (fs$readSync) { return function (fd, buffer, offset, length, position) {\n    var eagCounter = 0\n    while (true) {\n      try {\n        return fs$readSync.call(fs, fd, buffer, offset, length, position)\n      } catch (er) {\n        if (er.code === 'EAGAIN' && eagCounter < 10) {\n          eagCounter ++\n          continue\n        }\n        throw er\n      }\n    }\n  }})(fs.readSync)\n\n  function patchLchmod (fs) {\n    fs.lchmod = function (path, mode, callback) {\n      fs.open( path\n             , constants.O_WRONLY | constants.O_SYMLINK\n             , mode\n             , function (err, fd) {\n        if (err) {\n          if (callback) callback(err)\n          return\n        }\n        // prefer to return the chmod error, if one occurs,\n        // but still try to close, and report closing errors if they occur.\n        fs.fchmod(fd, mode, function (err) {\n          fs.close(fd, function(err2) {\n            if (callback) callback(err || err2)\n          })\n        })\n      })\n    }\n\n    fs.lchmodSync = function (path, mode) {\n      var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)\n\n      // prefer to return the chmod error, if one occurs,\n      // but still try to close, and report closing errors if they occur.\n      var threw = true\n      var ret\n      try {\n        ret = fs.fchmodSync(fd, mode)\n        threw = false\n      } finally {\n        if (threw) {\n          try {\n            fs.closeSync(fd)\n          } catch (er) {}\n        } else {\n          fs.closeSync(fd)\n        }\n      }\n      return ret\n    }\n  }\n\n  function patchLutimes (fs) {\n    if (constants.hasOwnProperty(\"O_SYMLINK\")) {\n      fs.lutimes = function (path, at, mt, cb) {\n        fs.open(path, constants.O_SYMLINK, function (er, fd) {\n          if (er) {\n            if (cb) cb(er)\n            return\n          }\n          fs.futimes(fd, at, mt, function (er) {\n            fs.close(fd, function (er2) {\n              if (cb) cb(er || er2)\n            })\n          })\n        })\n      }\n\n      fs.lutimesSync = function (path, at, mt) {\n        var fd = fs.openSync(path, constants.O_SYMLINK)\n        var ret\n        var threw = true\n        try {\n          ret = fs.futimesSync(fd, at, mt)\n          threw = false\n        } finally {\n          if (threw) {\n            try {\n              fs.closeSync(fd)\n            } catch (er) {}\n          } else {\n            fs.closeSync(fd)\n          }\n        }\n        return ret\n      }\n\n    } else {\n      fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }\n      fs.lutimesSync = function () {}\n    }\n  }\n\n  function chmodFix (orig) {\n    if (!orig) return orig\n    return function (target, mode, cb) {\n      return orig.call(fs, target, mode, function (er) {\n        if (chownErOk(er)) er = null\n        if (cb) cb.apply(this, arguments)\n      })\n    }\n  }\n\n  function chmodFixSync (orig) {\n    if (!orig) return orig\n    return function (target, mode) {\n      try {\n        return orig.call(fs, target, mode)\n      } catch (er) {\n        if (!chownErOk(er)) throw er\n      }\n    }\n  }\n\n\n  function chownFix (orig) {\n    if (!orig) return orig\n    return function (target, uid, gid, cb) {\n      return orig.call(fs, target, uid, gid, function (er) {\n        if (chownErOk(er)) er = null\n        if (cb) cb.apply(this, arguments)\n      })\n    }\n  }\n\n  function chownFixSync (orig) {\n    if (!orig) return orig\n    return function (target, uid, gid) {\n      try {\n        return orig.call(fs, target, uid, gid)\n      } catch (er) {\n        if (!chownErOk(er)) throw er\n      }\n    }\n  }\n\n  function statFix (orig) {\n    if (!orig) return orig\n    // Older versions of Node erroneously returned signed integers for\n    // uid + gid.\n    return function (target, options, cb) {\n      if (typeof options === 'function') {\n        cb = options\n        options = null\n      }\n      function callback (er, stats) {\n        if (stats) {\n          if (stats.uid < 0) stats.uid += 0x100000000\n          if (stats.gid < 0) stats.gid += 0x100000000\n        }\n        if (cb) cb.apply(this, arguments)\n      }\n      return options ? orig.call(fs, target, options, callback)\n        : orig.call(fs, target, callback)\n    }\n  }\n\n  function statFixSync (orig) {\n    if (!orig) return orig\n    // Older versions of Node erroneously returned signed integers for\n    // uid + gid.\n    return function (target, options) {\n      var stats = options ? orig.call(fs, target, options)\n        : orig.call(fs, target)\n      if (stats.uid < 0) stats.uid += 0x100000000\n      if (stats.gid < 0) stats.gid += 0x100000000\n      return stats;\n    }\n  }\n\n  // ENOSYS means that the fs doesn't support the op. Just ignore\n  // that, because it doesn't matter.\n  //\n  // if there's no getuid, or if getuid() is something other\n  // than 0, and the error is EINVAL or EPERM, then just ignore\n  // it.\n  //\n  // This specific case is a silent failure in cp, install, tar,\n  // and most other unix tools that manage permissions.\n  //\n  // When running as root, or if other types of errors are\n  // encountered, then it's strict.\n  function chownErOk (er) {\n    if (!er)\n      return true\n\n    if (er.code === \"ENOSYS\")\n      return true\n\n    var nonroot = !process.getuid || process.getuid() !== 0\n    if (nonroot) {\n      if (er.code === \"EINVAL\" || er.code === \"EPERM\")\n        return true\n    }\n\n    return false\n  }\n}\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/graceful-fs/polyfills.js?");

/***/ }),

/***/ "./node_modules/has-flag/index.js":
/*!****************************************!*\
  !*** ./node_modules/has-flag/index.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = (flag, argv) => {\n\targv = argv || process.argv;\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst pos = argv.indexOf(prefix + flag);\n\tconst terminatorPos = argv.indexOf('--');\n\treturn pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);\n};\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/has-flag/index.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/media-typer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/media-typer/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("/*!\n * media-typer\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n\n\n/**\n * RegExp to match type in RFC 6838\n *\n * type-name = restricted-name\n * subtype-name = restricted-name\n * restricted-name = restricted-name-first *126restricted-name-chars\n * restricted-name-first  = ALPHA / DIGIT\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\n * restricted-name-chars =/ \".\" ; Characters before first dot always\n *                              ; specify a facet name\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\n *                              ; specify a structured syntax suffix\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\n * DIGIT =  %x30-39             ; 0-9\n */\nvar SUBTYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/\nvar TYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/\nvar TYPE_REGEXP = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/\n\n/**\n * Module exports.\n */\n\nexports.format = format\nexports.parse = parse\nexports.test = test\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format (obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var subtype = obj.subtype\n  var suffix = obj.suffix\n  var type = obj.type\n\n  if (!type || !TYPE_NAME_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  if (!subtype || !SUBTYPE_NAME_REGEXP.test(subtype)) {\n    throw new TypeError('invalid subtype')\n  }\n\n  // format as type/subtype\n  var string = type + '/' + subtype\n\n  // append +suffix\n  if (suffix) {\n    if (!TYPE_NAME_REGEXP.test(suffix)) {\n      throw new TypeError('invalid suffix')\n    }\n\n    string += '+' + suffix\n  }\n\n  return string\n}\n\n/**\n * Test media type.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction test (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  return TYPE_REGEXP.test(string.toLowerCase())\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var match = TYPE_REGEXP.exec(string.toLowerCase())\n\n  if (!match) {\n    throw new TypeError('invalid media type')\n  }\n\n  var type = match[1]\n  var subtype = match[2]\n  var suffix\n\n  // suffix after last +\n  var index = subtype.lastIndexOf('+')\n  if (index !== -1) {\n    suffix = subtype.substr(index + 1)\n    subtype = subtype.substr(0, index)\n  }\n\n  return new MediaType(type, subtype, suffix)\n}\n\n/**\n * Class for MediaType object.\n * @public\n */\n\nfunction MediaType (type, subtype, suffix) {\n  this.type = type\n  this.subtype = subtype\n  this.suffix = suffix\n}\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/media-typer/index.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/ParserFactory.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/ParserFactory.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ParserFactory = exports.parseHttpContentType = void 0;\r\nconst FileType = __webpack_require__(/*! file-type/core */ \"./node_modules/file-type/core.js\");\r\nconst ContentType = __webpack_require__(/*! content-type */ \"./node_modules/content-type/index.js\");\r\nconst MimeType = __webpack_require__(/*! media-typer */ \"./node_modules/media-typer/index.js\");\r\nconst _debug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst MetadataCollector_1 = __webpack_require__(/*! ./common/MetadataCollector */ \"./node_modules/music-metadata/lib/common/MetadataCollector.js\");\r\nconst AiffParser_1 = __webpack_require__(/*! ./aiff/AiffParser */ \"./node_modules/music-metadata/lib/aiff/AiffParser.js\");\r\nconst APEv2Parser_1 = __webpack_require__(/*! ./apev2/APEv2Parser */ \"./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\r\nconst AsfParser_1 = __webpack_require__(/*! ./asf/AsfParser */ \"./node_modules/music-metadata/lib/asf/AsfParser.js\");\r\nconst FlacParser_1 = __webpack_require__(/*! ./flac/FlacParser */ \"./node_modules/music-metadata/lib/flac/FlacParser.js\");\r\nconst MP4Parser_1 = __webpack_require__(/*! ./mp4/MP4Parser */ \"./node_modules/music-metadata/lib/mp4/MP4Parser.js\");\r\nconst MpegParser_1 = __webpack_require__(/*! ./mpeg/MpegParser */ \"./node_modules/music-metadata/lib/mpeg/MpegParser.js\");\r\nconst musepack_1 = __webpack_require__(/*! ./musepack */ \"./node_modules/music-metadata/lib/musepack/index.js\");\r\nconst OggParser_1 = __webpack_require__(/*! ./ogg/OggParser */ \"./node_modules/music-metadata/lib/ogg/OggParser.js\");\r\nconst WaveParser_1 = __webpack_require__(/*! ./wav/WaveParser */ \"./node_modules/music-metadata/lib/wav/WaveParser.js\");\r\nconst WavPackParser_1 = __webpack_require__(/*! ./wavpack/WavPackParser */ \"./node_modules/music-metadata/lib/wavpack/WavPackParser.js\");\r\nconst DsfParser_1 = __webpack_require__(/*! ./dsf/DsfParser */ \"./node_modules/music-metadata/lib/dsf/DsfParser.js\");\r\nconst DsdiffParser_1 = __webpack_require__(/*! ./dsdiff/DsdiffParser */ \"./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js\");\r\nconst MatroskaParser_1 = __webpack_require__(/*! ./matroska/MatroskaParser */ \"./node_modules/music-metadata/lib/matroska/MatroskaParser.js\");\r\nconst debug = _debug('music-metadata:parser:factory');\r\nfunction parseHttpContentType(contentType) {\r\n    const type = ContentType.parse(contentType);\r\n    const mime = MimeType.parse(type.type);\r\n    return {\r\n        type: mime.type,\r\n        subtype: mime.subtype,\r\n        suffix: mime.suffix,\r\n        parameters: type.parameters\r\n    };\r\n}\r\nexports.parseHttpContentType = parseHttpContentType;\r\nclass ParserFactory {\r\n    /**\r\n     * Parse metadata from tokenizer\r\n     * @param tokenizer - Tokenizer\r\n     * @param contentType - MIME-type\r\n     * @param opts - Options\r\n     * @returns Native metadata\r\n     */\r\n    static async parseOnContentType(tokenizer, opts) {\r\n        const { mimeType, path, url } = await tokenizer.fileInfo;\r\n        // Resolve parser based on MIME-type or file extension\r\n        const parserId = ParserFactory.getParserIdForMimeType(mimeType) || ParserFactory.getParserIdForExtension(path) || ParserFactory.getParserIdForExtension(url);\r\n        if (!parserId) {\r\n            debug('No parser found for MIME-type / extension: ' + mimeType);\r\n        }\r\n        return this.parse(tokenizer, parserId, opts);\r\n    }\r\n    static async parse(tokenizer, parserId, opts) {\r\n        if (!parserId) {\r\n            // Parser could not be determined on MIME-type or extension\r\n            debug('Guess parser on content...');\r\n            const buf = Buffer.alloc(4100);\r\n            await tokenizer.peekBuffer(buf, { mayBeLess: true });\r\n            if (tokenizer.fileInfo.path) {\r\n                parserId = this.getParserIdForExtension(tokenizer.fileInfo.path);\r\n            }\r\n            if (!parserId) {\r\n                const guessedType = await FileType.fromBuffer(buf);\r\n                if (!guessedType) {\r\n                    throw new Error('Failed to determine audio format');\r\n                }\r\n                debug(`Guessed file type is mime=${guessedType.mime}, extension=${guessedType.ext}`);\r\n                parserId = ParserFactory.getParserIdForMimeType(guessedType.mime);\r\n                if (!parserId) {\r\n                    throw new Error('Guessed MIME-type not supported: ' + guessedType.mime);\r\n                }\r\n            }\r\n        }\r\n        // Parser found, execute parser\r\n        return this._parse(tokenizer, parserId, opts);\r\n    }\r\n    /**\r\n     * @param filePath - Path, filename or extension to audio file\r\n     * @return Parser sub-module name\r\n     */\r\n    static getParserIdForExtension(filePath) {\r\n        if (!filePath)\r\n            return;\r\n        const extension = this.getExtension(filePath).toLocaleLowerCase() || filePath;\r\n        switch (extension) {\r\n            case '.mp2':\r\n            case '.mp3':\r\n            case '.m2a':\r\n            case '.aac': // Assume it is ADTS-container\r\n                return 'mpeg';\r\n            case '.ape':\r\n                return 'apev2';\r\n            case '.mp4':\r\n            case '.m4a':\r\n            case '.m4b':\r\n            case '.m4pa':\r\n            case '.m4v':\r\n            case '.m4r':\r\n            case '.3gp':\r\n                return 'mp4';\r\n            case '.wma':\r\n            case '.wmv':\r\n            case '.asf':\r\n                return 'asf';\r\n            case '.flac':\r\n                return 'flac';\r\n            case '.ogg':\r\n            case '.ogv':\r\n            case '.oga':\r\n            case '.ogm':\r\n            case '.ogx':\r\n            case '.opus': // recommended filename extension for Ogg Opus\r\n            case '.spx': // recommended filename extension for Ogg Speex\r\n                return 'ogg';\r\n            case '.aif':\r\n            case '.aiff':\r\n            case '.aifc':\r\n                return 'aiff';\r\n            case '.wav':\r\n                return 'riff';\r\n            case '.wv':\r\n            case '.wvp':\r\n                return 'wavpack';\r\n            case '.mpc':\r\n                return 'musepack';\r\n            case '.dsf':\r\n                return 'dsf';\r\n            case '.dff':\r\n                return 'dsdiff';\r\n            case '.mka':\r\n            case '.mkv':\r\n            case '.mk3d':\r\n            case '.mks':\r\n            case '.webm':\r\n                return 'matroska';\r\n        }\r\n    }\r\n    static async loadParser(moduleName) {\r\n        switch (moduleName) {\r\n            case 'aiff': return new AiffParser_1.AIFFParser();\r\n            case 'adts':\r\n            case 'mpeg':\r\n                return new MpegParser_1.MpegParser();\r\n            case 'apev2': return new APEv2Parser_1.APEv2Parser();\r\n            case 'asf': return new AsfParser_1.AsfParser();\r\n            case 'dsf': return new DsfParser_1.DsfParser();\r\n            case 'dsdiff': return new DsdiffParser_1.DsdiffParser();\r\n            case 'flac': return new FlacParser_1.FlacParser();\r\n            case 'mp4': return new MP4Parser_1.MP4Parser();\r\n            case 'musepack': return new musepack_1.default();\r\n            case 'ogg': return new OggParser_1.OggParser();\r\n            case 'riff': return new WaveParser_1.WaveParser();\r\n            case 'wavpack': return new WavPackParser_1.WavPackParser();\r\n            case 'matroska': return new MatroskaParser_1.MatroskaParser();\r\n            default:\r\n                throw new Error(`Unknown parser type: ${moduleName}`);\r\n        }\r\n    }\r\n    static async _parse(tokenizer, parserId, opts = {}) {\r\n        // Parser found, execute parser\r\n        const parser = await ParserFactory.loadParser(parserId);\r\n        const metadata = new MetadataCollector_1.MetadataCollector(opts);\r\n        await parser.init(metadata, tokenizer, opts).parse();\r\n        return metadata.toCommonMetadata();\r\n    }\r\n    static getExtension(fname) {\r\n        const i = fname.lastIndexOf('.');\r\n        return i === -1 ? '' : fname.slice(i);\r\n    }\r\n    /**\r\n     * @param httpContentType - HTTP Content-Type, extension, path or filename\r\n     * @returns Parser sub-module name\r\n     */\r\n    static getParserIdForMimeType(httpContentType) {\r\n        let mime;\r\n        try {\r\n            mime = parseHttpContentType(httpContentType);\r\n        }\r\n        catch (err) {\r\n            debug(`Invalid HTTP Content-Type header value: ${httpContentType}`);\r\n            return;\r\n        }\r\n        const subType = mime.subtype.indexOf('x-') === 0 ? mime.subtype.substring(2) : mime.subtype;\r\n        switch (mime.type) {\r\n            case 'audio':\r\n                switch (subType) {\r\n                    case 'mp3': // Incorrect MIME-type, Chrome, in Web API File object\r\n                    case 'mpeg':\r\n                        return 'mpeg';\r\n                    case 'aac':\r\n                    case 'aacp':\r\n                        return 'adts';\r\n                    case 'flac':\r\n                        return 'flac';\r\n                    case 'ape':\r\n                    case 'monkeys-audio':\r\n                        return 'apev2';\r\n                    case 'mp4':\r\n                    case 'm4a':\r\n                        return 'mp4';\r\n                    case 'ogg': // RFC 7845\r\n                    case 'opus': // RFC 6716\r\n                    case 'speex': // RFC 5574\r\n                        return 'ogg';\r\n                    case 'ms-wma':\r\n                    case 'ms-wmv':\r\n                    case 'ms-asf':\r\n                        return 'asf';\r\n                    case 'aiff':\r\n                    case 'aif':\r\n                    case 'aifc':\r\n                        return 'aiff';\r\n                    case 'vnd.wave':\r\n                    case 'wav':\r\n                    case 'wave':\r\n                        return 'riff';\r\n                    case 'wavpack':\r\n                        return 'wavpack';\r\n                    case 'musepack':\r\n                        return 'musepack';\r\n                    case 'matroska':\r\n                    case 'webm':\r\n                        return 'matroska';\r\n                    case 'dsf':\r\n                        return 'dsf';\r\n                }\r\n                break;\r\n            case 'video':\r\n                switch (subType) {\r\n                    case 'ms-asf':\r\n                    case 'ms-wmv':\r\n                        return 'asf';\r\n                    case 'm4v':\r\n                    case 'mp4':\r\n                        return 'mp4';\r\n                    case 'ogg':\r\n                        return 'ogg';\r\n                    case 'matroska':\r\n                    case 'webm':\r\n                        return 'matroska';\r\n                }\r\n                break;\r\n            case 'application':\r\n                switch (subType) {\r\n                    case 'vnd.ms-asf':\r\n                        return 'asf';\r\n                    case 'ogg':\r\n                        return 'ogg';\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\nexports.ParserFactory = ParserFactory;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/ParserFactory.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/aiff/AiffParser.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/aiff/AiffParser.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AIFFParser = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\r\nconst ID3v2Parser_1 = __webpack_require__(/*! ../id3v2/ID3v2Parser */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\r\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\r\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\r\nconst AiffToken = __webpack_require__(/*! ./AiffToken */ \"./node_modules/music-metadata/lib/aiff/AiffToken.js\");\r\nconst iff = __webpack_require__(/*! ../iff */ \"./node_modules/music-metadata/lib/iff/index.js\");\r\nconst debug = initDebug('music-metadata:parser:aiff');\r\n/**\r\n * AIFF - Audio Interchange File Format\r\n *\r\n * Ref:\r\n *  http://www.onicos.com/staff/iz/formats/aiff.html\r\n *  http://muratnkonar.com/aiff/index.html\r\n *  http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/AIFF.html\r\n */\r\nclass AIFFParser extends BasicParser_1.BasicParser {\r\n    async parse() {\r\n        const header = await this.tokenizer.readToken(iff.Header);\r\n        if (header.chunkID !== 'FORM')\r\n            throw new Error('Invalid Chunk-ID, expected \\'FORM\\''); // Not AIFF format\r\n        const type = await this.tokenizer.readToken(FourCC_1.FourCcToken);\r\n        switch (type) {\r\n            case 'AIFF':\r\n                this.metadata.setFormat('container', type);\r\n                this.isCompressed = false;\r\n                break;\r\n            case 'AIFC':\r\n                this.metadata.setFormat('container', 'AIFF-C');\r\n                this.isCompressed = true;\r\n                break;\r\n            default:\r\n                throw Error('Unsupported AIFF type: ' + type);\r\n        }\r\n        this.metadata.setFormat('lossless', !this.isCompressed);\r\n        try {\r\n            while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= iff.Header.len) {\r\n                debug('Reading AIFF chunk at offset=' + this.tokenizer.position);\r\n                const chunkHeader = await this.tokenizer.readToken(iff.Header);\r\n                debug(`Chunk id=${chunkHeader.chunkID}`);\r\n                const nextChunk = 2 * Math.round(chunkHeader.chunkSize / 2);\r\n                const bytesRead = await this.readData(chunkHeader);\r\n                await this.tokenizer.ignore(nextChunk - bytesRead);\r\n            }\r\n        }\r\n        catch (err) {\r\n            if (err instanceof strtok3.EndOfStreamError) {\r\n                debug(`End-of-stream`);\r\n            }\r\n            else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n    async readData(header) {\r\n        switch (header.chunkID) {\r\n            case 'COMM': // The Common Chunk\r\n                const common = await this.tokenizer.readToken(new AiffToken.Common(header, this.isCompressed));\r\n                this.metadata.setFormat('bitsPerSample', common.sampleSize);\r\n                this.metadata.setFormat('sampleRate', common.sampleRate);\r\n                this.metadata.setFormat('numberOfChannels', common.numChannels);\r\n                this.metadata.setFormat('numberOfSamples', common.numSampleFrames);\r\n                this.metadata.setFormat('duration', common.numSampleFrames / common.sampleRate);\r\n                this.metadata.setFormat('codec', common.compressionName);\r\n                return header.chunkSize;\r\n            case 'ID3 ': // ID3-meta-data\r\n                const id3_data = await this.tokenizer.readToken(new Token.BufferType(header.chunkSize));\r\n                const rst = strtok3.fromBuffer(id3_data);\r\n                await new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, rst, this.options);\r\n                return header.chunkSize;\r\n            case 'SSND': // Sound Data Chunk\r\n                if (this.metadata.format.duration) {\r\n                    this.metadata.setFormat('bitrate', 8 * header.chunkSize / this.metadata.format.duration);\r\n                }\r\n                return 0;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n}\r\nexports.AIFFParser = AIFFParser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/aiff/AiffParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/aiff/AiffToken.js":
/*!***********************************************************!*\
  !*** ./node_modules/music-metadata/lib/aiff/AiffToken.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Common = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\r\nclass Common {\r\n    constructor(header, isAifc) {\r\n        this.isAifc = isAifc;\r\n        const minimumChunkSize = isAifc ? 22 : 18;\r\n        if (header.chunkSize < minimumChunkSize)\r\n            throw new Error(`COMMON CHUNK size should always be at least ${minimumChunkSize}`);\r\n        this.len = header.chunkSize;\r\n    }\r\n    get(buf, off) {\r\n        // see: https://cycling74.com/forums/aiffs-80-bit-sample-rate-value\r\n        const shift = buf.readUInt16BE(off + 8) - 16398;\r\n        const baseSampleRate = buf.readUInt16BE(off + 8 + 2);\r\n        const res = {\r\n            numChannels: buf.readUInt16BE(off),\r\n            numSampleFrames: buf.readUInt32BE(off + 2),\r\n            sampleSize: buf.readUInt16BE(off + 6),\r\n            sampleRate: shift < 0 ? baseSampleRate >> Math.abs(shift) : baseSampleRate << shift\r\n        };\r\n        if (this.isAifc) {\r\n            res.compressionType = FourCC_1.FourCcToken.get(buf, off + 18);\r\n            if (this.len > 22) {\r\n                const strLen = buf.readInt8(off + 22);\r\n                const padding = (strLen + 1) % 2;\r\n                if (23 + strLen + padding === this.len) {\r\n                    res.compressionName = new Token.StringType(strLen, 'binary').get(buf, off + 23);\r\n                }\r\n                else {\r\n                    throw new Error('Illegal pstring length');\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            res.compressionName = 'PCM';\r\n        }\r\n        return res;\r\n    }\r\n}\r\nexports.Common = Common;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/aiff/AiffToken.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/apev2/APEv2Parser.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/apev2/APEv2Parser.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.APEv2Parser = void 0;\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\r\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\r\nconst APEv2Token_1 = __webpack_require__(/*! ./APEv2Token */ \"./node_modules/music-metadata/lib/apev2/APEv2Token.js\");\r\nconst token_types_1 = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst debug = initDebug('music-metadata:parser:APEv2');\r\nconst tagFormat = 'APEv2';\r\nconst preamble = 'APETAGEX';\r\nclass APEv2Parser extends BasicParser_1.BasicParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.ape = {};\r\n    }\r\n    static tryParseApeHeader(metadata, tokenizer, options) {\r\n        const apeParser = new APEv2Parser();\r\n        apeParser.init(metadata, tokenizer, options);\r\n        return apeParser.tryParseApeHeader();\r\n    }\r\n    /**\r\n     * Calculate the media file duration\r\n     * @param ah ApeHeader\r\n     * @return {number} duration in seconds\r\n     */\r\n    static calculateDuration(ah) {\r\n        let duration = ah.totalFrames > 1 ? ah.blocksPerFrame * (ah.totalFrames - 1) : 0;\r\n        duration += ah.finalFrameBlocks;\r\n        return duration / ah.sampleRate;\r\n    }\r\n    /**\r\n     * Calculates the APEv1 / APEv2 first field offset\r\n     * @param reader\r\n     * @param offset\r\n     */\r\n    static async findApeFooterOffset(reader, offset) {\r\n        // Search for APE footer header at the end of the file\r\n        const apeBuf = Buffer.alloc(APEv2Token_1.TagFooter.len);\r\n        await reader.randomRead(apeBuf, 0, APEv2Token_1.TagFooter.len, offset - APEv2Token_1.TagFooter.len);\r\n        const tagFooter = APEv2Token_1.TagFooter.get(apeBuf, 0);\r\n        if (tagFooter.ID === 'APETAGEX') {\r\n            debug(`APE footer header at offset=${offset}`);\r\n            return { footer: tagFooter, offset: offset - tagFooter.size };\r\n        }\r\n    }\r\n    static parseTagFooter(metadata, buffer, options) {\r\n        const footer = APEv2Token_1.TagFooter.get(buffer, buffer.length - APEv2Token_1.TagFooter.len);\r\n        if (footer.ID !== preamble)\r\n            throw new Error('Unexpected APEv2 Footer ID preamble value.');\r\n        strtok3.fromBuffer(buffer);\r\n        const apeParser = new APEv2Parser();\r\n        apeParser.init(metadata, strtok3.fromBuffer(buffer), options);\r\n        return apeParser.parseTags(footer);\r\n    }\r\n    /**\r\n     * Parse APEv1 / APEv2 header if header signature found\r\n     */\r\n    async tryParseApeHeader() {\r\n        if (this.tokenizer.fileInfo.size && this.tokenizer.fileInfo.size - this.tokenizer.position < APEv2Token_1.TagFooter.len) {\r\n            debug(`No APEv2 header found, end-of-file reached`);\r\n            return;\r\n        }\r\n        const footer = await this.tokenizer.peekToken(APEv2Token_1.TagFooter);\r\n        if (footer.ID === preamble) {\r\n            await this.tokenizer.ignore(APEv2Token_1.TagFooter.len);\r\n            return this.parseTags(footer);\r\n        }\r\n        else {\r\n            debug(`APEv2 header not found at offset=${this.tokenizer.position}`);\r\n            if (this.tokenizer.fileInfo.size) {\r\n                // Try to read the APEv2 header using just the footer-header\r\n                const remaining = this.tokenizer.fileInfo.size - this.tokenizer.position; // ToDo: take ID3v1 into account\r\n                const buffer = Buffer.alloc(remaining);\r\n                await this.tokenizer.readBuffer(buffer);\r\n                return APEv2Parser.parseTagFooter(this.metadata, buffer, this.options);\r\n            }\r\n        }\r\n    }\r\n    async parse() {\r\n        const descriptor = await this.tokenizer.readToken(APEv2Token_1.DescriptorParser);\r\n        if (descriptor.ID !== 'MAC ')\r\n            throw new Error('Unexpected descriptor ID');\r\n        this.ape.descriptor = descriptor;\r\n        const lenExp = descriptor.descriptorBytes - APEv2Token_1.DescriptorParser.len;\r\n        const header = await (lenExp > 0 ? this.parseDescriptorExpansion(lenExp) : this.parseHeader());\r\n        await this.tokenizer.ignore(header.forwardBytes);\r\n        return this.tryParseApeHeader();\r\n    }\r\n    async parseTags(footer) {\r\n        const keyBuffer = Buffer.alloc(256); // maximum tag key length\r\n        let bytesRemaining = footer.size - APEv2Token_1.TagFooter.len;\r\n        debug(`Parse APE tags at offset=${this.tokenizer.position}, size=${bytesRemaining}`);\r\n        for (let i = 0; i < footer.fields; i++) {\r\n            if (bytesRemaining < APEv2Token_1.TagItemHeader.len) {\r\n                this.metadata.addWarning(`APEv2 Tag-header: ${footer.fields - i} items remaining, but no more tag data to read.`);\r\n                break;\r\n            }\r\n            // Only APEv2 tag has tag item headers\r\n            const tagItemHeader = await this.tokenizer.readToken(APEv2Token_1.TagItemHeader);\r\n            bytesRemaining -= APEv2Token_1.TagItemHeader.len + tagItemHeader.size;\r\n            await this.tokenizer.peekBuffer(keyBuffer, { length: Math.min(keyBuffer.length, bytesRemaining) });\r\n            let zero = Util_1.default.findZero(keyBuffer, 0, keyBuffer.length);\r\n            const key = await this.tokenizer.readToken(new token_types_1.StringType(zero, 'ascii'));\r\n            await this.tokenizer.ignore(1);\r\n            bytesRemaining -= key.length + 1;\r\n            switch (tagItemHeader.flags.dataType) {\r\n                case APEv2Token_1.DataType.text_utf8: { // utf-8 textstring\r\n                    const value = await this.tokenizer.readToken(new token_types_1.StringType(tagItemHeader.size, 'utf8'));\r\n                    const values = value.split(/\\x00/g);\r\n                    /*jshint loopfunc:true */\r\n                    for (const val of values) {\r\n                        this.metadata.addTag(tagFormat, key, val);\r\n                    }\r\n                    break;\r\n                }\r\n                case APEv2Token_1.DataType.binary: // binary (probably artwork)\r\n                    if (this.options.skipCovers) {\r\n                        await this.tokenizer.ignore(tagItemHeader.size);\r\n                    }\r\n                    else {\r\n                        const picData = Buffer.alloc(tagItemHeader.size);\r\n                        await this.tokenizer.readBuffer(picData);\r\n                        zero = Util_1.default.findZero(picData, 0, picData.length);\r\n                        const description = picData.toString('utf8', 0, zero);\r\n                        const data = Buffer.from(picData.slice(zero + 1));\r\n                        this.metadata.addTag(tagFormat, key, {\r\n                            description,\r\n                            data\r\n                        });\r\n                    }\r\n                    break;\r\n                case APEv2Token_1.DataType.external_info:\r\n                    debug(`Ignore external info ${key}`);\r\n                    await this.tokenizer.ignore(tagItemHeader.size);\r\n                    break;\r\n                default:\r\n                    throw new Error(`Unexpected data-type: ${tagItemHeader.flags.dataType}`);\r\n            }\r\n        }\r\n    }\r\n    async parseDescriptorExpansion(lenExp) {\r\n        await this.tokenizer.ignore(lenExp);\r\n        return this.parseHeader();\r\n    }\r\n    async parseHeader() {\r\n        const header = await this.tokenizer.readToken(APEv2Token_1.Header);\r\n        // ToDo before\r\n        this.metadata.setFormat('lossless', true);\r\n        this.metadata.setFormat('container', 'Monkey\\'s Audio');\r\n        this.metadata.setFormat('bitsPerSample', header.bitsPerSample);\r\n        this.metadata.setFormat('sampleRate', header.sampleRate);\r\n        this.metadata.setFormat('numberOfChannels', header.channel);\r\n        this.metadata.setFormat('duration', APEv2Parser.calculateDuration(header));\r\n        return {\r\n            forwardBytes: this.ape.descriptor.seekTableBytes + this.ape.descriptor.headerDataBytes +\r\n                this.ape.descriptor.apeFrameDataBytes + this.ape.descriptor.terminatingDataBytes\r\n        };\r\n    }\r\n}\r\nexports.APEv2Parser = APEv2Parser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/apev2/APEv2Parser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/apev2/APEv2TagMapper.js":
/*!*****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/apev2/APEv2TagMapper.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.APEv2TagMapper = void 0;\r\nconst CaseInsensitiveTagMap_1 = __webpack_require__(/*! ../common/CaseInsensitiveTagMap */ \"./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\");\r\n/**\r\n * ID3v2.2 tag mappings\r\n */\r\nconst apev2TagMap = {\r\n    Title: 'title',\r\n    Artist: 'artist',\r\n    Artists: 'artists',\r\n    'Album Artist': 'albumartist',\r\n    Album: 'album',\r\n    Year: 'date',\r\n    Originalyear: 'originalyear',\r\n    Originaldate: 'originaldate',\r\n    Comment: 'comment',\r\n    Track: 'track',\r\n    Disc: 'disk',\r\n    DISCNUMBER: 'disk',\r\n    Genre: 'genre',\r\n    'Cover Art (Front)': 'picture',\r\n    'Cover Art (Back)': 'picture',\r\n    Composer: 'composer',\r\n    Lyrics: 'lyrics',\r\n    ALBUMSORT: 'albumsort',\r\n    TITLESORT: 'titlesort',\r\n    WORK: 'work',\r\n    ARTISTSORT: 'artistsort',\r\n    ALBUMARTISTSORT: 'albumartistsort',\r\n    COMPOSERSORT: 'composersort',\r\n    Lyricist: 'lyricist',\r\n    Writer: 'writer',\r\n    Conductor: 'conductor',\r\n    // 'Performer=artist (instrument)': 'performer:instrument',\r\n    MixArtist: 'remixer',\r\n    Arranger: 'arranger',\r\n    Engineer: 'engineer',\r\n    Producer: 'producer',\r\n    DJMixer: 'djmixer',\r\n    Mixer: 'mixer',\r\n    Label: 'label',\r\n    Grouping: 'grouping',\r\n    Subtitle: 'subtitle',\r\n    DiscSubtitle: 'discsubtitle',\r\n    Compilation: 'compilation',\r\n    BPM: 'bpm',\r\n    Mood: 'mood',\r\n    Media: 'media',\r\n    CatalogNumber: 'catalognumber',\r\n    MUSICBRAINZ_ALBUMSTATUS: 'releasestatus',\r\n    MUSICBRAINZ_ALBUMTYPE: 'releasetype',\r\n    RELEASECOUNTRY: 'releasecountry',\r\n    Script: 'script',\r\n    Language: 'language',\r\n    Copyright: 'copyright',\r\n    LICENSE: 'license',\r\n    EncodedBy: 'encodedby',\r\n    EncoderSettings: 'encodersettings',\r\n    Barcode: 'barcode',\r\n    ISRC: 'isrc',\r\n    ASIN: 'asin',\r\n    musicbrainz_trackid: 'musicbrainz_recordingid',\r\n    musicbrainz_releasetrackid: 'musicbrainz_trackid',\r\n    MUSICBRAINZ_ALBUMID: 'musicbrainz_albumid',\r\n    MUSICBRAINZ_ARTISTID: 'musicbrainz_artistid',\r\n    MUSICBRAINZ_ALBUMARTISTID: 'musicbrainz_albumartistid',\r\n    MUSICBRAINZ_RELEASEGROUPID: 'musicbrainz_releasegroupid',\r\n    MUSICBRAINZ_WORKID: 'musicbrainz_workid',\r\n    MUSICBRAINZ_TRMID: 'musicbrainz_trmid',\r\n    MUSICBRAINZ_DISCID: 'musicbrainz_discid',\r\n    Acoustid_Id: 'acoustid_id',\r\n    ACOUSTID_FINGERPRINT: 'acoustid_fingerprint',\r\n    MUSICIP_PUID: 'musicip_puid',\r\n    Weblink: 'website',\r\n    REPLAYGAIN_TRACK_GAIN: 'replaygain_track_gain',\r\n    REPLAYGAIN_TRACK_PEAK: 'replaygain_track_peak',\r\n    MP3GAIN_MINMAX: 'replaygain_track_minmax',\r\n    MP3GAIN_UNDO: 'replaygain_undo'\r\n};\r\nclass APEv2TagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {\r\n    constructor() {\r\n        super(['APEv2'], apev2TagMap);\r\n    }\r\n}\r\nexports.APEv2TagMapper = APEv2TagMapper;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/apev2/APEv2TagMapper.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/apev2/APEv2Token.js":
/*!*************************************************************!*\
  !*** ./node_modules/music-metadata/lib/apev2/APEv2Token.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.isBitSet = exports.parseTagFlags = exports.TagField = exports.TagItemHeader = exports.TagFooter = exports.Header = exports.DescriptorParser = exports.DataType = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\r\nvar DataType;\r\n(function (DataType) {\r\n    DataType[DataType[\"text_utf8\"] = 0] = \"text_utf8\";\r\n    DataType[DataType[\"binary\"] = 1] = \"binary\";\r\n    DataType[DataType[\"external_info\"] = 2] = \"external_info\";\r\n    DataType[DataType[\"reserved\"] = 3] = \"reserved\";\r\n})(DataType = exports.DataType || (exports.DataType = {}));\r\n/**\r\n * APE_DESCRIPTOR: defines the sizes (and offsets) of all the pieces, as well as the MD5 checksum\r\n */\r\nexports.DescriptorParser = {\r\n    len: 52,\r\n    get: (buf, off) => {\r\n        return {\r\n            // should equal 'MAC '\r\n            ID: FourCC_1.FourCcToken.get(buf, off),\r\n            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)\r\n            version: Token.UINT32_LE.get(buf, off + 4) / 1000,\r\n            // the number of descriptor bytes (allows later expansion of this header)\r\n            descriptorBytes: Token.UINT32_LE.get(buf, off + 8),\r\n            // the number of header APE_HEADER bytes\r\n            headerBytes: Token.UINT32_LE.get(buf, off + 12),\r\n            // the number of header APE_HEADER bytes\r\n            seekTableBytes: Token.UINT32_LE.get(buf, off + 16),\r\n            // the number of header data bytes (from original file)\r\n            headerDataBytes: Token.UINT32_LE.get(buf, off + 20),\r\n            // the number of bytes of APE frame data\r\n            apeFrameDataBytes: Token.UINT32_LE.get(buf, off + 24),\r\n            // the high order number of APE frame data bytes\r\n            apeFrameDataBytesHigh: Token.UINT32_LE.get(buf, off + 28),\r\n            // the terminating data of the file (not including tag data)\r\n            terminatingDataBytes: Token.UINT32_LE.get(buf, off + 32),\r\n            // the MD5 hash of the file (see notes for usage... it's a littly tricky)\r\n            fileMD5: new Token.BufferType(16).get(buf, off + 36)\r\n        };\r\n    }\r\n};\r\n/**\r\n * APE_HEADER: describes all of the necessary information about the APE file\r\n */\r\nexports.Header = {\r\n    len: 24,\r\n    get: (buf, off) => {\r\n        return {\r\n            // the compression level (see defines I.E. COMPRESSION_LEVEL_FAST)\r\n            compressionLevel: Token.UINT16_LE.get(buf, off),\r\n            // any format flags (for future use)\r\n            formatFlags: Token.UINT16_LE.get(buf, off + 2),\r\n            // the number of audio blocks in one frame\r\n            blocksPerFrame: Token.UINT32_LE.get(buf, off + 4),\r\n            // the number of audio blocks in the final frame\r\n            finalFrameBlocks: Token.UINT32_LE.get(buf, off + 8),\r\n            // the total number of frames\r\n            totalFrames: Token.UINT32_LE.get(buf, off + 12),\r\n            // the bits per sample (typically 16)\r\n            bitsPerSample: Token.UINT16_LE.get(buf, off + 16),\r\n            // the number of channels (1 or 2)\r\n            channel: Token.UINT16_LE.get(buf, off + 18),\r\n            // the sample rate (typically 44100)\r\n            sampleRate: Token.UINT32_LE.get(buf, off + 20)\r\n        };\r\n    }\r\n};\r\n/**\r\n * APE Tag Header/Footer Version 2.0\r\n * TAG: describes all the properties of the file [optional]\r\n */\r\nexports.TagFooter = {\r\n    len: 32,\r\n    get: (buf, off) => {\r\n        return {\r\n            // should equal 'APETAGEX'\r\n            ID: new Token.StringType(8, 'ascii').get(buf, off),\r\n            // equals CURRENT_APE_TAG_VERSION\r\n            version: Token.UINT32_LE.get(buf, off + 8),\r\n            // the complete size of the tag, including this footer (excludes header)\r\n            size: Token.UINT32_LE.get(buf, off + 12),\r\n            // the number of fields in the tag\r\n            fields: Token.UINT32_LE.get(buf, off + 16),\r\n            // reserved for later use (must be zero),\r\n            flags: parseTagFlags(Token.UINT32_LE.get(buf, off + 20))\r\n        };\r\n    }\r\n};\r\n/**\r\n * APE Tag v2.0 Item Header\r\n */\r\nexports.TagItemHeader = {\r\n    len: 8,\r\n    get: (buf, off) => {\r\n        return {\r\n            // Length of assigned value in bytes\r\n            size: Token.UINT32_LE.get(buf, off),\r\n            // reserved for later use (must be zero),\r\n            flags: parseTagFlags(Token.UINT32_LE.get(buf, off + 4))\r\n        };\r\n    }\r\n};\r\nconst TagField = footer => {\r\n    return new Token.BufferType(footer.size - exports.TagFooter.len);\r\n};\r\nexports.TagField = TagField;\r\nfunction parseTagFlags(flags) {\r\n    return {\r\n        containsHeader: isBitSet(flags, 31),\r\n        containsFooter: isBitSet(flags, 30),\r\n        isHeader: isBitSet(flags, 31),\r\n        readOnly: isBitSet(flags, 0),\r\n        dataType: (flags & 6) >> 1\r\n    };\r\n}\r\nexports.parseTagFlags = parseTagFlags;\r\n/**\r\n * @param num {number}\r\n * @param bit 0 is least significant bit (LSB)\r\n * @return {boolean} true if bit is 1; otherwise false\r\n */\r\nfunction isBitSet(num, bit) {\r\n    return (num & 1 << bit) !== 0;\r\n}\r\nexports.isBitSet = isBitSet;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/apev2/APEv2Token.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/asf/AsfObject.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/AsfObject.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("// ASF Objects\r\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.WmPictureToken = exports.MetadataLibraryObjectState = exports.MetadataObjectState = exports.ExtendedStreamPropertiesObjectState = exports.ExtendedContentDescriptionObjectState = exports.ContentDescriptionObjectState = exports.readCodecEntries = exports.HeaderExtensionObject = exports.StreamPropertiesObject = exports.FilePropertiesObject = exports.IgnoreObjectState = exports.State = exports.HeaderObjectToken = exports.TopLevelHeaderObjectToken = exports.DataType = void 0;\r\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst GUID_1 = __webpack_require__(/*! ./GUID */ \"./node_modules/music-metadata/lib/asf/GUID.js\");\r\nconst AsfUtil_1 = __webpack_require__(/*! ./AsfUtil */ \"./node_modules/music-metadata/lib/asf/AsfUtil.js\");\r\nconst ID3v2Token_1 = __webpack_require__(/*! ../id3v2/ID3v2Token */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\r\n/**\r\n * Data Type: Specifies the type of information being stored. The following values are recognized.\r\n */\r\nvar DataType;\r\n(function (DataType) {\r\n    /**\r\n     * Unicode string. The data consists of a sequence of Unicode characters.\r\n     */\r\n    DataType[DataType[\"UnicodeString\"] = 0] = \"UnicodeString\";\r\n    /**\r\n     * BYTE array. The type of data is implementation-specific.\r\n     */\r\n    DataType[DataType[\"ByteArray\"] = 1] = \"ByteArray\";\r\n    /**\r\n     * BOOL. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer. Only 0x0000 or 0x0001 are permitted values.\r\n     */\r\n    DataType[DataType[\"Bool\"] = 2] = \"Bool\";\r\n    /**\r\n     * DWORD. The data is 4 bytes long and should be interpreted as a 32-bit unsigned integer.\r\n     */\r\n    DataType[DataType[\"DWord\"] = 3] = \"DWord\";\r\n    /**\r\n     * QWORD. The data is 8 bytes long and should be interpreted as a 64-bit unsigned integer.\r\n     */\r\n    DataType[DataType[\"QWord\"] = 4] = \"QWord\";\r\n    /**\r\n     * WORD. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer.\r\n     */\r\n    DataType[DataType[\"Word\"] = 5] = \"Word\";\r\n})(DataType = exports.DataType || (exports.DataType = {}));\r\n/**\r\n * Token for: 3. ASF top-level Header Object\r\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3\r\n */\r\nexports.TopLevelHeaderObjectToken = {\r\n    len: 30,\r\n    get: (buf, off) => {\r\n        return {\r\n            objectId: GUID_1.default.fromBin(new Token.BufferType(16).get(buf, off)),\r\n            objectSize: Token.UINT64_LE.get(buf, off + 16),\r\n            numberOfHeaderObjects: Token.UINT32_LE.get(buf, off + 24)\r\n            // Reserved: 2 bytes\r\n        };\r\n    }\r\n};\r\n/**\r\n * Token for: 3.1 Header Object (mandatory, one only)\r\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_1\r\n */\r\nexports.HeaderObjectToken = {\r\n    len: 24,\r\n    get: (buf, off) => {\r\n        return {\r\n            objectId: GUID_1.default.fromBin(new Token.BufferType(16).get(buf, off)),\r\n            objectSize: Token.UINT64_LE.get(buf, off + 16)\r\n        };\r\n    }\r\n};\r\nclass State {\r\n    constructor(header) {\r\n        this.len = header.objectSize - exports.HeaderObjectToken.len;\r\n    }\r\n    postProcessTag(tags, name, valueType, data) {\r\n        if (name === 'WM/Picture') {\r\n            tags.push({ id: name, value: WmPictureToken.fromBuffer(data) });\r\n        }\r\n        else {\r\n            const parseAttr = AsfUtil_1.AsfUtil.getParserForAttr(valueType);\r\n            if (!parseAttr) {\r\n                throw new Error('unexpected value headerType: ' + valueType);\r\n            }\r\n            tags.push({ id: name, value: parseAttr(data) });\r\n        }\r\n    }\r\n}\r\nexports.State = State;\r\n// ToDo: use ignore type\r\nclass IgnoreObjectState extends State {\r\n    constructor(header) {\r\n        super(header);\r\n    }\r\n    get(buf, off) {\r\n        return null;\r\n    }\r\n}\r\nexports.IgnoreObjectState = IgnoreObjectState;\r\n/**\r\n * Token for: 3.2: File Properties Object (mandatory, one only)\r\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_2\r\n */\r\nclass FilePropertiesObject extends State {\r\n    constructor(header) {\r\n        super(header);\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            fileId: GUID_1.default.fromBin(buf, off),\r\n            fileSize: Token.UINT64_LE.get(buf, off + 16),\r\n            creationDate: Token.UINT64_LE.get(buf, off + 24),\r\n            dataPacketsCount: Token.UINT64_LE.get(buf, off + 32),\r\n            playDuration: Token.UINT64_LE.get(buf, off + 40),\r\n            sendDuration: Token.UINT64_LE.get(buf, off + 48),\r\n            preroll: Token.UINT64_LE.get(buf, off + 56),\r\n            flags: {\r\n                broadcast: Util_1.default.strtokBITSET.get(buf, off + 64, 24),\r\n                seekable: Util_1.default.strtokBITSET.get(buf, off + 64, 25)\r\n            },\r\n            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),\r\n            minimumDataPacketSize: Token.UINT32_LE.get(buf, off + 68),\r\n            maximumDataPacketSize: Token.UINT32_LE.get(buf, off + 72),\r\n            maximumBitrate: Token.UINT32_LE.get(buf, off + 76)\r\n        };\r\n    }\r\n}\r\nexports.FilePropertiesObject = FilePropertiesObject;\r\nFilePropertiesObject.guid = GUID_1.default.FilePropertiesObject;\r\n/**\r\n * Token for: 3.3 Stream Properties Object (mandatory, one per stream)\r\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_3\r\n */\r\nclass StreamPropertiesObject extends State {\r\n    constructor(header) {\r\n        super(header);\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            streamType: GUID_1.default.decodeMediaType(GUID_1.default.fromBin(buf, off)),\r\n            errorCorrectionType: GUID_1.default.fromBin(buf, off + 8)\r\n            // ToDo\r\n        };\r\n    }\r\n}\r\nexports.StreamPropertiesObject = StreamPropertiesObject;\r\nStreamPropertiesObject.guid = GUID_1.default.StreamPropertiesObject;\r\n/**\r\n * 3.4: Header Extension Object (mandatory, one only)\r\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_4\r\n */\r\nclass HeaderExtensionObject {\r\n    constructor() {\r\n        this.len = 22;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            reserved1: GUID_1.default.fromBin(buf, off),\r\n            reserved2: buf.readUInt16LE(off + 16),\r\n            extensionDataSize: buf.readUInt32LE(off + 18)\r\n        };\r\n    }\r\n}\r\nexports.HeaderExtensionObject = HeaderExtensionObject;\r\nHeaderExtensionObject.guid = GUID_1.default.HeaderExtensionObject;\r\n/**\r\n * 3.5: The Codec List Object provides user-friendly information about the codecs and formats used to encode the content found in the ASF file.\r\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_5\r\n */\r\nconst CodecListObjectHeader = {\r\n    len: 20,\r\n    get: (buf, off) => {\r\n        return {\r\n            entryCount: buf.readUInt16LE(off + 16)\r\n        };\r\n    }\r\n};\r\nasync function readString(tokenizer) {\r\n    const length = await tokenizer.readNumber(Token.UINT16_LE);\r\n    return (await tokenizer.readToken(new Token.StringType(length * 2, 'utf16le'))).replace('\\0', '');\r\n}\r\n/**\r\n * 3.5: Read the Codec-List-Object, which provides user-friendly information about the codecs and formats used to encode the content found in the ASF file.\r\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_5\r\n */\r\nasync function readCodecEntries(tokenizer) {\r\n    const codecHeader = await tokenizer.readToken(CodecListObjectHeader);\r\n    const entries = [];\r\n    for (let i = 0; i < codecHeader.entryCount; ++i) {\r\n        entries.push(await readCodecEntry(tokenizer));\r\n    }\r\n    return entries;\r\n}\r\nexports.readCodecEntries = readCodecEntries;\r\nasync function readInformation(tokenizer) {\r\n    const length = await tokenizer.readNumber(Token.UINT16_LE);\r\n    const buf = Buffer.alloc(length);\r\n    await tokenizer.readBuffer(buf);\r\n    return buf;\r\n}\r\n/**\r\n * Read Codec-Entries\r\n * @param tokenizer\r\n */\r\nasync function readCodecEntry(tokenizer) {\r\n    const type = await tokenizer.readNumber(Token.UINT16_LE);\r\n    return {\r\n        type: {\r\n            videoCodec: (type & 0x0001) === 0x0001,\r\n            audioCodec: (type & 0x0002) === 0x0002\r\n        },\r\n        codecName: await readString(tokenizer),\r\n        description: await readString(tokenizer),\r\n        information: await readInformation(tokenizer)\r\n    };\r\n}\r\n/**\r\n * 3.10 Content Description Object (optional, one only)\r\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_10\r\n */\r\nclass ContentDescriptionObjectState extends State {\r\n    constructor(header) {\r\n        super(header);\r\n    }\r\n    get(buf, off) {\r\n        const tags = [];\r\n        let pos = off + 10;\r\n        for (let i = 0; i < ContentDescriptionObjectState.contentDescTags.length; ++i) {\r\n            const length = buf.readUInt16LE(off + i * 2);\r\n            if (length > 0) {\r\n                const tagName = ContentDescriptionObjectState.contentDescTags[i];\r\n                const end = pos + length;\r\n                tags.push({ id: tagName, value: AsfUtil_1.AsfUtil.parseUnicodeAttr(buf.slice(pos, end)) });\r\n                pos = end;\r\n            }\r\n        }\r\n        return tags;\r\n    }\r\n}\r\nexports.ContentDescriptionObjectState = ContentDescriptionObjectState;\r\nContentDescriptionObjectState.guid = GUID_1.default.ContentDescriptionObject;\r\nContentDescriptionObjectState.contentDescTags = ['Title', 'Author', 'Copyright', 'Description', 'Rating'];\r\n/**\r\n * 3.11 Extended Content Description Object (optional, one only)\r\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_11\r\n */\r\nclass ExtendedContentDescriptionObjectState extends State {\r\n    constructor(header) {\r\n        super(header);\r\n    }\r\n    get(buf, off) {\r\n        const tags = [];\r\n        const attrCount = buf.readUInt16LE(off);\r\n        let pos = off + 2;\r\n        for (let i = 0; i < attrCount; i += 1) {\r\n            const nameLen = buf.readUInt16LE(pos);\r\n            pos += 2;\r\n            const name = AsfUtil_1.AsfUtil.parseUnicodeAttr(buf.slice(pos, pos + nameLen));\r\n            pos += nameLen;\r\n            const valueType = buf.readUInt16LE(pos);\r\n            pos += 2;\r\n            const valueLen = buf.readUInt16LE(pos);\r\n            pos += 2;\r\n            const value = buf.slice(pos, pos + valueLen);\r\n            pos += valueLen;\r\n            this.postProcessTag(tags, name, valueType, value);\r\n        }\r\n        return tags;\r\n    }\r\n}\r\nexports.ExtendedContentDescriptionObjectState = ExtendedContentDescriptionObjectState;\r\nExtendedContentDescriptionObjectState.guid = GUID_1.default.ExtendedContentDescriptionObject;\r\n/**\r\n * 4.1 Extended Stream Properties Object (optional, 1 per media stream)\r\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_1\r\n */\r\nclass ExtendedStreamPropertiesObjectState extends State {\r\n    constructor(header) {\r\n        super(header);\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            startTime: Token.UINT64_LE.get(buf, off),\r\n            endTime: Token.UINT64_LE.get(buf, off + 8),\r\n            dataBitrate: buf.readInt32LE(off + 12),\r\n            bufferSize: buf.readInt32LE(off + 16),\r\n            initialBufferFullness: buf.readInt32LE(off + 20),\r\n            alternateDataBitrate: buf.readInt32LE(off + 24),\r\n            alternateBufferSize: buf.readInt32LE(off + 28),\r\n            alternateInitialBufferFullness: buf.readInt32LE(off + 32),\r\n            maximumObjectSize: buf.readInt32LE(off + 36),\r\n            flags: {\r\n                reliableFlag: Util_1.default.strtokBITSET.get(buf, off + 40, 0),\r\n                seekableFlag: Util_1.default.strtokBITSET.get(buf, off + 40, 1),\r\n                resendLiveCleanpointsFlag: Util_1.default.strtokBITSET.get(buf, off + 40, 2)\r\n            },\r\n            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),\r\n            streamNumber: buf.readInt16LE(off + 42),\r\n            streamLanguageId: buf.readInt16LE(off + 44),\r\n            averageTimePerFrame: buf.readInt32LE(off + 52),\r\n            streamNameCount: buf.readInt32LE(off + 54),\r\n            payloadExtensionSystems: buf.readInt32LE(off + 56),\r\n            streamNames: [],\r\n            streamPropertiesObject: null\r\n        };\r\n    }\r\n}\r\nexports.ExtendedStreamPropertiesObjectState = ExtendedStreamPropertiesObjectState;\r\nExtendedStreamPropertiesObjectState.guid = GUID_1.default.ExtendedStreamPropertiesObject;\r\n/**\r\n * 4.7  Metadata Object (optional, 0 or 1)\r\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_7\r\n */\r\nclass MetadataObjectState extends State {\r\n    constructor(header) {\r\n        super(header);\r\n    }\r\n    get(buf, off) {\r\n        const tags = [];\r\n        const descriptionRecordsCount = buf.readUInt16LE(off);\r\n        let pos = off + 2;\r\n        for (let i = 0; i < descriptionRecordsCount; i += 1) {\r\n            pos += 4;\r\n            const nameLen = buf.readUInt16LE(pos);\r\n            pos += 2;\r\n            const dataType = buf.readUInt16LE(pos);\r\n            pos += 2;\r\n            const dataLen = buf.readUInt32LE(pos);\r\n            pos += 4;\r\n            const name = AsfUtil_1.AsfUtil.parseUnicodeAttr(buf.slice(pos, pos + nameLen));\r\n            pos += nameLen;\r\n            const data = buf.slice(pos, pos + dataLen);\r\n            pos += dataLen;\r\n            const parseAttr = AsfUtil_1.AsfUtil.getParserForAttr(dataType);\r\n            if (!parseAttr) {\r\n                throw new Error('unexpected value headerType: ' + dataType);\r\n            }\r\n            this.postProcessTag(tags, name, dataType, data);\r\n        }\r\n        return tags;\r\n    }\r\n}\r\nexports.MetadataObjectState = MetadataObjectState;\r\nMetadataObjectState.guid = GUID_1.default.MetadataObject;\r\n// 4.8\tMetadata Library Object (optional, 0 or 1)\r\nclass MetadataLibraryObjectState extends MetadataObjectState {\r\n    constructor(header) {\r\n        super(header);\r\n    }\r\n}\r\nexports.MetadataLibraryObjectState = MetadataLibraryObjectState;\r\nMetadataLibraryObjectState.guid = GUID_1.default.MetadataLibraryObject;\r\n/**\r\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd757977(v=vs.85).aspx\r\n */\r\nclass WmPictureToken {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    static fromBase64(base64str) {\r\n        return this.fromBuffer(Buffer.from(base64str, 'base64'));\r\n    }\r\n    static fromBuffer(buffer) {\r\n        const pic = new WmPictureToken(buffer.length);\r\n        return pic.get(buffer, 0);\r\n    }\r\n    get(buffer, offset) {\r\n        const typeId = buffer.readUInt8(offset++);\r\n        const size = buffer.readInt32LE(offset);\r\n        let index = 5;\r\n        while (buffer.readUInt16BE(index) !== 0) {\r\n            index += 2;\r\n        }\r\n        const format = buffer.slice(5, index).toString('utf16le');\r\n        while (buffer.readUInt16BE(index) !== 0) {\r\n            index += 2;\r\n        }\r\n        const description = buffer.slice(5, index).toString('utf16le');\r\n        return {\r\n            type: ID3v2Token_1.AttachedPictureType[typeId],\r\n            format,\r\n            description,\r\n            size,\r\n            data: buffer.slice(index + 4)\r\n        };\r\n    }\r\n}\r\nexports.WmPictureToken = WmPictureToken;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/asf/AsfObject.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/asf/AsfParser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/AsfParser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AsfParser = void 0;\r\nconst type_1 = __webpack_require__(/*! ../type */ \"./node_modules/music-metadata/lib/type.js\");\r\nconst GUID_1 = __webpack_require__(/*! ./GUID */ \"./node_modules/music-metadata/lib/asf/GUID.js\");\r\nconst AsfObject = __webpack_require__(/*! ./AsfObject */ \"./node_modules/music-metadata/lib/asf/AsfObject.js\");\r\nconst _debug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\r\nconst debug = _debug('music-metadata:parser:ASF');\r\nconst headerType = 'asf';\r\n/**\r\n * Windows Media Metadata Usage Guidelines\r\n *   Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx\r\n *\r\n * Ref:\r\n *   https://tools.ietf.org/html/draft-fleischman-asf-01\r\n *   https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf\r\n *   http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\r\n *   https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\r\n */\r\nclass AsfParser extends BasicParser_1.BasicParser {\r\n    async parse() {\r\n        const header = await this.tokenizer.readToken(AsfObject.TopLevelHeaderObjectToken);\r\n        if (!header.objectId.equals(GUID_1.default.HeaderObject)) {\r\n            throw new Error('expected asf header; but was not found; got: ' + header.objectId.str);\r\n        }\r\n        try {\r\n            await this.parseObjectHeader(header.numberOfHeaderObjects);\r\n        }\r\n        catch (err) {\r\n            debug('Error while parsing ASF: %s', err);\r\n        }\r\n    }\r\n    async parseObjectHeader(numberOfObjectHeaders) {\r\n        let tags;\r\n        do {\r\n            // Parse common header of the ASF Object (3.1)\r\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\r\n            // Parse data part of the ASF Object\r\n            debug('header GUID=%s', header.objectId.str);\r\n            switch (header.objectId.str) {\r\n                case AsfObject.FilePropertiesObject.guid.str: // 3.2\r\n                    const fpo = await this.tokenizer.readToken(new AsfObject.FilePropertiesObject(header));\r\n                    this.metadata.setFormat('duration', fpo.playDuration / 10000000 - fpo.preroll / 1000);\r\n                    this.metadata.setFormat('bitrate', fpo.maximumBitrate);\r\n                    break;\r\n                case AsfObject.StreamPropertiesObject.guid.str: // 3.3\r\n                    const spo = await this.tokenizer.readToken(new AsfObject.StreamPropertiesObject(header));\r\n                    this.metadata.setFormat('container', 'ASF/' + spo.streamType);\r\n                    break;\r\n                case AsfObject.HeaderExtensionObject.guid.str: // 3.4\r\n                    const extHeader = await this.tokenizer.readToken(new AsfObject.HeaderExtensionObject());\r\n                    await this.parseExtensionObject(extHeader.extensionDataSize);\r\n                    break;\r\n                case AsfObject.ContentDescriptionObjectState.guid.str: // 3.10\r\n                    tags = await this.tokenizer.readToken(new AsfObject.ContentDescriptionObjectState(header));\r\n                    this.addTags(tags);\r\n                    break;\r\n                case AsfObject.ExtendedContentDescriptionObjectState.guid.str: // 3.11\r\n                    tags = await this.tokenizer.readToken(new AsfObject.ExtendedContentDescriptionObjectState(header));\r\n                    this.addTags(tags);\r\n                    break;\r\n                case GUID_1.default.CodecListObject.str:\r\n                    const codecs = await AsfObject.readCodecEntries(this.tokenizer);\r\n                    codecs.forEach(codec => {\r\n                        this.metadata.addStreamInfo({\r\n                            type: codec.type.videoCodec ? type_1.TrackType.video : type_1.TrackType.audio,\r\n                            codecName: codec.codecName\r\n                        });\r\n                    });\r\n                    const audioCodecs = codecs.filter(codec => codec.type.audioCodec).map(codec => codec.codecName).join('/');\r\n                    this.metadata.setFormat('codec', audioCodecs);\r\n                    break;\r\n                case GUID_1.default.StreamBitratePropertiesObject.str:\r\n                    // ToDo?\r\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    break;\r\n                case GUID_1.default.PaddingObject.str:\r\n                    // ToDo: register bytes pad\r\n                    debug('Padding: %s bytes', header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    break;\r\n                default:\r\n                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\r\n                    debug('Ignore ASF-Object-GUID: %s', header.objectId.str);\r\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\r\n            }\r\n        } while (--numberOfObjectHeaders);\r\n        // done\r\n    }\r\n    addTags(tags) {\r\n        tags.forEach(tag => {\r\n            this.metadata.addTag(headerType, tag.id, tag.value);\r\n        });\r\n    }\r\n    async parseExtensionObject(extensionSize) {\r\n        do {\r\n            // Parse common header of the ASF Object (3.1)\r\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\r\n            // Parse data part of the ASF Object\r\n            switch (header.objectId.str) {\r\n                case AsfObject.ExtendedStreamPropertiesObjectState.guid.str: // 4.1\r\n                    // ToDo: extended stream header properties are ignored\r\n                    await this.tokenizer.readToken(new AsfObject.ExtendedStreamPropertiesObjectState(header));\r\n                    break;\r\n                case AsfObject.MetadataObjectState.guid.str: // 4.7\r\n                    const moTags = await this.tokenizer.readToken(new AsfObject.MetadataObjectState(header));\r\n                    this.addTags(moTags);\r\n                    break;\r\n                case AsfObject.MetadataLibraryObjectState.guid.str: // 4.8\r\n                    const mlTags = await this.tokenizer.readToken(new AsfObject.MetadataLibraryObjectState(header));\r\n                    this.addTags(mlTags);\r\n                    break;\r\n                case GUID_1.default.PaddingObject.str:\r\n                    // ToDo: register bytes pad\r\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    break;\r\n                case GUID_1.default.CompatibilityObject.str:\r\n                    this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    break;\r\n                case GUID_1.default.ASF_Index_Placeholder_Object.str:\r\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    break;\r\n                default:\r\n                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\r\n                    // console.log(\"Ignore ASF-Object-GUID: %s\", header.objectId.str);\r\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\r\n                    break;\r\n            }\r\n            extensionSize -= header.objectSize;\r\n        } while (extensionSize > 0);\r\n    }\r\n}\r\nexports.AsfParser = AsfParser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/asf/AsfParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/asf/AsfTagMapper.js":
/*!*************************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/AsfTagMapper.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AsfTagMapper = void 0;\r\nconst GenericTagMapper_1 = __webpack_require__(/*! ../common/GenericTagMapper */ \"./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\r\n/**\r\n * ASF Metadata tag mappings.\r\n * See http://msdn.microsoft.com/en-us/library/ms867702.aspx\r\n */\r\nconst asfTagMap = {\r\n    Title: 'title',\r\n    Author: 'artist',\r\n    'WM/AlbumArtist': 'albumartist',\r\n    'WM/AlbumTitle': 'album',\r\n    'WM/Year': 'date',\r\n    'WM/OriginalReleaseTime': 'originaldate',\r\n    'WM/OriginalReleaseYear': 'originalyear',\r\n    Description: 'comment',\r\n    'WM/TrackNumber': 'track',\r\n    'WM/PartOfSet': 'disk',\r\n    'WM/Genre': 'genre',\r\n    'WM/Composer': 'composer',\r\n    'WM/Lyrics': 'lyrics',\r\n    'WM/AlbumSortOrder': 'albumsort',\r\n    'WM/TitleSortOrder': 'titlesort',\r\n    'WM/ArtistSortOrder': 'artistsort',\r\n    'WM/AlbumArtistSortOrder': 'albumartistsort',\r\n    'WM/ComposerSortOrder': 'composersort',\r\n    'WM/Writer': 'lyricist',\r\n    'WM/Conductor': 'conductor',\r\n    'WM/ModifiedBy': 'remixer',\r\n    'WM/Engineer': 'engineer',\r\n    'WM/Producer': 'producer',\r\n    'WM/DJMixer': 'djmixer',\r\n    'WM/Mixer': 'mixer',\r\n    'WM/Publisher': 'label',\r\n    'WM/ContentGroupDescription': 'grouping',\r\n    'WM/SubTitle': 'subtitle',\r\n    'WM/SetSubTitle': 'discsubtitle',\r\n    // 'WM/PartOfSet': 'totaldiscs',\r\n    'WM/IsCompilation': 'compilation',\r\n    'WM/SharedUserRating': 'rating',\r\n    'WM/BeatsPerMinute': 'bpm',\r\n    'WM/Mood': 'mood',\r\n    'WM/Media': 'media',\r\n    'WM/CatalogNo': 'catalognumber',\r\n    'MusicBrainz/Album Status': 'releasestatus',\r\n    'MusicBrainz/Album Type': 'releasetype',\r\n    'MusicBrainz/Album Release Country': 'releasecountry',\r\n    'WM/Script': 'script',\r\n    'WM/Language': 'language',\r\n    Copyright: 'copyright',\r\n    LICENSE: 'license',\r\n    'WM/EncodedBy': 'encodedby',\r\n    'WM/EncodingSettings': 'encodersettings',\r\n    'WM/Barcode': 'barcode',\r\n    'WM/ISRC': 'isrc',\r\n    'MusicBrainz/Track Id': 'musicbrainz_recordingid',\r\n    'MusicBrainz/Release Track Id': 'musicbrainz_trackid',\r\n    'MusicBrainz/Album Id': 'musicbrainz_albumid',\r\n    'MusicBrainz/Artist Id': 'musicbrainz_artistid',\r\n    'MusicBrainz/Album Artist Id': 'musicbrainz_albumartistid',\r\n    'MusicBrainz/Release Group Id': 'musicbrainz_releasegroupid',\r\n    'MusicBrainz/Work Id': 'musicbrainz_workid',\r\n    'MusicBrainz/TRM Id': 'musicbrainz_trmid',\r\n    'MusicBrainz/Disc Id': 'musicbrainz_discid',\r\n    'Acoustid/Id': 'acoustid_id',\r\n    'Acoustid/Fingerprint': 'acoustid_fingerprint',\r\n    'MusicIP/PUID': 'musicip_puid',\r\n    'WM/ARTISTS': 'artists',\r\n    'WM/InitialKey': 'key',\r\n    ASIN: 'asin',\r\n    'WM/Work': 'work',\r\n    'WM/AuthorURL': 'website',\r\n    'WM/Picture': 'picture'\r\n};\r\nclass AsfTagMapper extends GenericTagMapper_1.CommonTagMapper {\r\n    static toRating(rating) {\r\n        return {\r\n            rating: parseFloat(rating + 1) / 5\r\n        };\r\n    }\r\n    constructor() {\r\n        super(['asf'], asfTagMap);\r\n    }\r\n    postMap(tag) {\r\n        switch (tag.id) {\r\n            case 'WM/SharedUserRating':\r\n                const keys = tag.id.split(':');\r\n                tag.value = AsfTagMapper.toRating(tag.value);\r\n                tag.id = keys[0];\r\n                break;\r\n        }\r\n    }\r\n}\r\nexports.AsfTagMapper = AsfTagMapper;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/asf/AsfTagMapper.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/asf/AsfUtil.js":
/*!********************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/AsfUtil.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AsfUtil = void 0;\r\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nclass AsfUtil {\r\n    static getParserForAttr(i) {\r\n        return AsfUtil.attributeParsers[i];\r\n    }\r\n    static parseUnicodeAttr(buf) {\r\n        return Util_1.default.stripNulls(Util_1.default.decodeString(buf, \"utf16le\"));\r\n    }\r\n    static parseByteArrayAttr(buf) {\r\n        const newBuf = Buffer.alloc(buf.length);\r\n        buf.copy(newBuf);\r\n        return newBuf;\r\n    }\r\n    static parseBoolAttr(buf, offset = 0) {\r\n        return AsfUtil.parseWordAttr(buf, offset) === 1;\r\n    }\r\n    static parseDWordAttr(buf, offset = 0) {\r\n        return buf.readUInt32LE(offset);\r\n    }\r\n    static parseQWordAttr(buf, offset = 0) {\r\n        return Token.UINT64_LE.get(buf, offset);\r\n    }\r\n    static parseWordAttr(buf, offset = 0) {\r\n        return buf.readUInt16LE(offset);\r\n    }\r\n}\r\nexports.AsfUtil = AsfUtil;\r\nAsfUtil.attributeParsers = [\r\n    AsfUtil.parseUnicodeAttr,\r\n    AsfUtil.parseByteArrayAttr,\r\n    AsfUtil.parseBoolAttr,\r\n    AsfUtil.parseDWordAttr,\r\n    AsfUtil.parseQWordAttr,\r\n    AsfUtil.parseWordAttr,\r\n    AsfUtil.parseByteArrayAttr\r\n];\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/asf/AsfUtil.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/asf/GUID.js":
/*!*****************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/GUID.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n// Implementation of the Advanced Systems Format (ASF)\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n/**\r\n * Ref:\r\n *    https://tools.ietf.org/html/draft-fleischman-asf-01, Appendix A: ASF GUIDs\r\n *    http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html\r\n *    http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\r\n *\r\n *    http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html\r\n *\r\n *  ASF File Structure:\r\n *    https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\r\n *\r\n *  ASF GUIDs:\r\n *    http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html\r\n *\r\n *    https://github.com/dji-sdk/FFmpeg/blob/master/libavformat/asf.c\r\n */\r\nclass GUID {\r\n    constructor(str) {\r\n        this.str = str;\r\n    }\r\n    static fromBin(bin, offset = 0) {\r\n        return new GUID(this.decode(bin, offset));\r\n    }\r\n    /**\r\n     * Decode GUID in format like \"B503BF5F-2EA9-CF11-8EE3-00C00C205365\"\r\n     * @param objectId Binary GUID\r\n     * @param offset Read offset in bytes, default 0\r\n     * @returns {string} GUID as dashed hexadecimal representation\r\n     */\r\n    static decode(objectId, offset = 0) {\r\n        const guid = objectId.readUInt32LE(offset).toString(16) + \"-\" +\r\n            objectId.readUInt16LE(offset + 4).toString(16) + \"-\" +\r\n            objectId.readUInt16LE(offset + 6).toString(16) + \"-\" +\r\n            objectId.readUInt16BE(offset + 8).toString(16) + \"-\" +\r\n            objectId.slice(offset + 10, offset + 16).toString('hex');\r\n        return guid.toUpperCase();\r\n    }\r\n    /**\r\n     * Decode stream type\r\n     * @param {string} mediaType\r\n     * @returns {string}\r\n     */\r\n    static decodeMediaType(mediaType) {\r\n        switch (mediaType.str) {\r\n            case GUID.AudioMedia.str: return 'audio';\r\n            case GUID.VideoMedia.str: return 'video';\r\n            case GUID.CommandMedia.str: return 'command';\r\n            case GUID.Degradable_JPEG_Media.str: return 'degradable-jpeg';\r\n            case GUID.FileTransferMedia.str: return 'file-transfer';\r\n            case GUID.BinaryMedia.str: return 'binary';\r\n        }\r\n    }\r\n    /**\r\n     * Encode GUID\r\n     * @param guid GUID like: \"B503BF5F-2EA9-CF11-8EE3-00C00C205365\"\r\n     * @returns {Buffer} Encoded Bnary GUID\r\n     */\r\n    static encode(str) {\r\n        const bin = Buffer.alloc(16);\r\n        bin.writeUInt32LE(parseInt(str.slice(0, 8), 16), 0);\r\n        bin.writeUInt16LE(parseInt(str.slice(9, 13), 16), 4);\r\n        bin.writeUInt16LE(parseInt(str.slice(14, 18), 16), 6);\r\n        Buffer.from(str.slice(19, 23), \"hex\").copy(bin, 8);\r\n        Buffer.from(str.slice(24), \"hex\").copy(bin, 10);\r\n        return bin;\r\n    }\r\n    equals(guid) {\r\n        return this.str === guid.str;\r\n    }\r\n    toBin() {\r\n        return GUID.encode(this.str);\r\n    }\r\n}\r\nexports.default = GUID;\r\n// 10.1 Top-level ASF object GUIDs\r\nGUID.HeaderObject = new GUID(\"75B22630-668E-11CF-A6D9-00AA0062CE6C\");\r\nGUID.DataObject = new GUID(\"75B22636-668E-11CF-A6D9-00AA0062CE6C\");\r\nGUID.SimpleIndexObject = new GUID(\"33000890-E5B1-11CF-89F4-00A0C90349CB\");\r\nGUID.IndexObject = new GUID(\"D6E229D3-35DA-11D1-9034-00A0C90349BE\");\r\nGUID.MediaObjectIndexObject = new GUID(\"FEB103F8-12AD-4C64-840F-2A1D2F7AD48C\");\r\nGUID.TimecodeIndexObject = new GUID(\"3CB73FD0-0C4A-4803-953D-EDF7B6228F0C\");\r\n// 10.2 Header Object GUIDs\r\nGUID.FilePropertiesObject = new GUID(\"8CABDCA1-A947-11CF-8EE4-00C00C205365\");\r\nGUID.StreamPropertiesObject = new GUID(\"B7DC0791-A9B7-11CF-8EE6-00C00C205365\");\r\nGUID.HeaderExtensionObject = new GUID(\"5FBF03B5-A92E-11CF-8EE3-00C00C205365\");\r\nGUID.CodecListObject = new GUID(\"86D15240-311D-11D0-A3A4-00A0C90348F6\");\r\nGUID.ScriptCommandObject = new GUID(\"1EFB1A30-0B62-11D0-A39B-00A0C90348F6\");\r\nGUID.MarkerObject = new GUID(\"F487CD01-A951-11CF-8EE6-00C00C205365\");\r\nGUID.BitrateMutualExclusionObject = new GUID(\"D6E229DC-35DA-11D1-9034-00A0C90349BE\");\r\nGUID.ErrorCorrectionObject = new GUID(\"75B22635-668E-11CF-A6D9-00AA0062CE6C\");\r\nGUID.ContentDescriptionObject = new GUID(\"75B22633-668E-11CF-A6D9-00AA0062CE6C\");\r\nGUID.ExtendedContentDescriptionObject = new GUID(\"D2D0A440-E307-11D2-97F0-00A0C95EA850\");\r\nGUID.ContentBrandingObject = new GUID(\"2211B3FA-BD23-11D2-B4B7-00A0C955FC6E\");\r\nGUID.StreamBitratePropertiesObject = new GUID(\"7BF875CE-468D-11D1-8D82-006097C9A2B2\");\r\nGUID.ContentEncryptionObject = new GUID(\"2211B3FB-BD23-11D2-B4B7-00A0C955FC6E\");\r\nGUID.ExtendedContentEncryptionObject = new GUID(\"298AE614-2622-4C17-B935-DAE07EE9289C\");\r\nGUID.DigitalSignatureObject = new GUID(\"2211B3FC-BD23-11D2-B4B7-00A0C955FC6E\");\r\nGUID.PaddingObject = new GUID(\"1806D474-CADF-4509-A4BA-9AABCB96AAE8\");\r\n// 10.3 Header Extension Object GUIDs\r\nGUID.ExtendedStreamPropertiesObject = new GUID(\"14E6A5CB-C672-4332-8399-A96952065B5A\");\r\nGUID.AdvancedMutualExclusionObject = new GUID(\"A08649CF-4775-4670-8A16-6E35357566CD\");\r\nGUID.GroupMutualExclusionObject = new GUID(\"D1465A40-5A79-4338-B71B-E36B8FD6C249\");\r\nGUID.StreamPrioritizationObject = new GUID(\"D4FED15B-88D3-454F-81F0-ED5C45999E24\");\r\nGUID.BandwidthSharingObject = new GUID(\"A69609E6-517B-11D2-B6AF-00C04FD908E9\");\r\nGUID.LanguageListObject = new GUID(\"7C4346A9-EFE0-4BFC-B229-393EDE415C85\");\r\nGUID.MetadataObject = new GUID(\"C5F8CBEA-5BAF-4877-8467-AA8C44FA4CCA\");\r\nGUID.MetadataLibraryObject = new GUID(\"44231C94-9498-49D1-A141-1D134E457054\");\r\nGUID.IndexParametersObject = new GUID(\"D6E229DF-35DA-11D1-9034-00A0C90349BE\");\r\nGUID.MediaObjectIndexParametersObject = new GUID(\"6B203BAD-3F11-48E4-ACA8-D7613DE2CFA7\");\r\nGUID.TimecodeIndexParametersObject = new GUID(\"F55E496D-9797-4B5D-8C8B-604DFE9BFB24\");\r\nGUID.CompatibilityObject = new GUID(\"26F18B5D-4584-47EC-9F5F-0E651F0452C9\");\r\nGUID.AdvancedContentEncryptionObject = new GUID(\"43058533-6981-49E6-9B74-AD12CB86D58C\");\r\n// 10.4 Stream Properties Object Stream Type GUIDs\r\nGUID.AudioMedia = new GUID(\"F8699E40-5B4D-11CF-A8FD-00805F5C442B\");\r\nGUID.VideoMedia = new GUID(\"BC19EFC0-5B4D-11CF-A8FD-00805F5C442B\");\r\nGUID.CommandMedia = new GUID(\"59DACFC0-59E6-11D0-A3AC-00A0C90348F6\");\r\nGUID.JFIF_Media = new GUID(\"B61BE100-5B4E-11CF-A8FD-00805F5C442B\");\r\nGUID.Degradable_JPEG_Media = new GUID(\"35907DE0-E415-11CF-A917-00805F5C442B\");\r\nGUID.FileTransferMedia = new GUID(\"91BD222C-F21C-497A-8B6D-5AA86BFC0185\");\r\nGUID.BinaryMedia = new GUID(\"3AFB65E2-47EF-40F2-AC2C-70A90D71D343\");\r\nGUID.ASF_Index_Placeholder_Object = new GUID(\"D9AADE20-7C17-4F9C-BC28-8555DD98E2A2\");\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/asf/GUID.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/BasicParser.js":
/*!***************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/BasicParser.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BasicParser = void 0;\r\nclass BasicParser {\r\n    /**\r\n     * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).\r\n     * @param {INativeMetadataCollector} metadata Output\r\n     * @param {ITokenizer} tokenizer Input\r\n     * @param {IOptions} options Parsing options\r\n     */\r\n    init(metadata, tokenizer, options) {\r\n        this.metadata = metadata;\r\n        this.tokenizer = tokenizer;\r\n        this.options = options;\r\n        return this;\r\n    }\r\n}\r\nexports.BasicParser = BasicParser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/common/BasicParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js":
/*!*************************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CaseInsensitiveTagMap = void 0;\r\nconst GenericTagMapper_1 = __webpack_require__(/*! ./GenericTagMapper */ \"./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\r\nclass CaseInsensitiveTagMap extends GenericTagMapper_1.CommonTagMapper {\r\n    constructor(tagTypes, tagMap) {\r\n        const upperCaseMap = {};\r\n        for (const tag of Object.keys(tagMap)) {\r\n            upperCaseMap[tag.toUpperCase()] = tagMap[tag];\r\n        }\r\n        super(tagTypes, upperCaseMap);\r\n    }\r\n    /**\r\n     * @tag  Native header tag\r\n     * @return common tag name (alias)\r\n     */\r\n    getCommonName(tag) {\r\n        return this.tagMap[tag.toUpperCase()];\r\n    }\r\n}\r\nexports.CaseInsensitiveTagMap = CaseInsensitiveTagMap;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/CombinedTagMapper.js":
/*!*********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/CombinedTagMapper.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CombinedTagMapper = void 0;\r\nconst ID3v1TagMap_1 = __webpack_require__(/*! ../id3v1/ID3v1TagMap */ \"./node_modules/music-metadata/lib/id3v1/ID3v1TagMap.js\");\r\nconst ID3v24TagMapper_1 = __webpack_require__(/*! ../id3v2/ID3v24TagMapper */ \"./node_modules/music-metadata/lib/id3v2/ID3v24TagMapper.js\");\r\nconst AsfTagMapper_1 = __webpack_require__(/*! ../asf/AsfTagMapper */ \"./node_modules/music-metadata/lib/asf/AsfTagMapper.js\");\r\nconst ID3v22TagMapper_1 = __webpack_require__(/*! ../id3v2/ID3v22TagMapper */ \"./node_modules/music-metadata/lib/id3v2/ID3v22TagMapper.js\");\r\nconst APEv2TagMapper_1 = __webpack_require__(/*! ../apev2/APEv2TagMapper */ \"./node_modules/music-metadata/lib/apev2/APEv2TagMapper.js\");\r\nconst MP4TagMapper_1 = __webpack_require__(/*! ../mp4/MP4TagMapper */ \"./node_modules/music-metadata/lib/mp4/MP4TagMapper.js\");\r\nconst VorbisTagMapper_1 = __webpack_require__(/*! ../ogg/vorbis/VorbisTagMapper */ \"./node_modules/music-metadata/lib/ogg/vorbis/VorbisTagMapper.js\");\r\nconst RiffInfoTagMap_1 = __webpack_require__(/*! ../riff/RiffInfoTagMap */ \"./node_modules/music-metadata/lib/riff/RiffInfoTagMap.js\");\r\nconst MatroskaTagMapper_1 = __webpack_require__(/*! ../matroska/MatroskaTagMapper */ \"./node_modules/music-metadata/lib/matroska/MatroskaTagMapper.js\");\r\nclass CombinedTagMapper {\r\n    constructor() {\r\n        this.tagMappers = {};\r\n        [\r\n            new ID3v1TagMap_1.ID3v1TagMapper(),\r\n            new ID3v22TagMapper_1.ID3v22TagMapper(),\r\n            new ID3v24TagMapper_1.ID3v24TagMapper(),\r\n            new MP4TagMapper_1.MP4TagMapper(),\r\n            new MP4TagMapper_1.MP4TagMapper(),\r\n            new VorbisTagMapper_1.VorbisTagMapper(),\r\n            new APEv2TagMapper_1.APEv2TagMapper(),\r\n            new AsfTagMapper_1.AsfTagMapper(),\r\n            new RiffInfoTagMap_1.RiffInfoTagMapper(),\r\n            new MatroskaTagMapper_1.MatroskaTagMapper()\r\n        ].forEach(mapper => {\r\n            this.registerTagMapper(mapper);\r\n        });\r\n    }\r\n    /**\r\n     * Convert native to generic (common) tags\r\n     * @param tagType Originating tag format\r\n     * @param tag     Native tag to map to a generic tag id\r\n     * @param warnings\r\n     * @return Generic tag result (output of this function)\r\n     */\r\n    mapTag(tagType, tag, warnings) {\r\n        const tagMapper = this.tagMappers[tagType];\r\n        if (tagMapper) {\r\n            return this.tagMappers[tagType].mapGenericTag(tag, warnings);\r\n        }\r\n        throw new Error(\"No generic tag mapper defined for tag-format: \" + tagType);\r\n    }\r\n    registerTagMapper(genericTagMapper) {\r\n        for (const tagType of genericTagMapper.tagTypes) {\r\n            this.tagMappers[tagType] = genericTagMapper;\r\n        }\r\n    }\r\n}\r\nexports.CombinedTagMapper = CombinedTagMapper;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/common/CombinedTagMapper.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/FourCC.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/FourCC.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.FourCcToken = void 0;\r\nconst Util_1 = __webpack_require__(/*! ./Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst validFourCC = /^[\\x21-\\x7e©][\\x20-\\x7e\\x00()]{3}/;\r\n/**\r\n * Token for read FourCC\r\n * Ref: https://en.wikipedia.org/wiki/FourCC\r\n */\r\nexports.FourCcToken = {\r\n    len: 4,\r\n    get: (buf, off) => {\r\n        const id = buf.toString('binary', off, off + exports.FourCcToken.len);\r\n        switch (id) {\r\n            default:\r\n                if (!id.match(validFourCC)) {\r\n                    throw new Error(`FourCC contains invalid characters: ${Util_1.default.a2hex(id)} \"${id}\"`);\r\n                }\r\n        }\r\n        return id;\r\n    },\r\n    put: (buffer, offset, id) => {\r\n        const str = Buffer.from(id, 'binary');\r\n        if (str.length !== 4)\r\n            throw new Error(\"Invalid length\");\r\n        return str.copy(buffer, offset);\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/common/FourCC.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/GenericTagMapper.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/GenericTagMapper.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CommonTagMapper = void 0;\r\nclass CommonTagMapper {\r\n    constructor(tagTypes, tagMap) {\r\n        this.tagTypes = tagTypes;\r\n        this.tagMap = tagMap;\r\n    }\r\n    static toIntOrNull(str) {\r\n        const cleaned = parseInt(str, 10);\r\n        return isNaN(cleaned) ? null : cleaned;\r\n    }\r\n    // TODO: a string of 1of1 would fail to be converted\r\n    // converts 1/10 to no : 1, of : 10\r\n    // or 1 to no : 1, of : 0\r\n    static normalizeTrack(origVal) {\r\n        const split = origVal.toString().split('/');\r\n        return {\r\n            no: parseInt(split[0], 10) || null,\r\n            of: parseInt(split[1], 10) || null\r\n        };\r\n    }\r\n    /**\r\n     * Process and set common tags\r\n     * write common tags to\r\n     * @param tag Native tag\r\n     * @param warnings Register warnings\r\n     * @return common name\r\n     */\r\n    mapGenericTag(tag, warnings) {\r\n        tag = { id: tag.id, value: tag.value }; // clone object\r\n        this.postMap(tag, warnings);\r\n        // Convert native tag event to generic 'alias' tag\r\n        const id = this.getCommonName(tag.id);\r\n        return id ? { id, value: tag.value } : null;\r\n    }\r\n    /**\r\n     * Convert native tag key to common tag key\r\n     * @tag  Native header tag\r\n     * @return common tag name (alias)\r\n     */\r\n    getCommonName(tag) {\r\n        return this.tagMap[tag];\r\n    }\r\n    /**\r\n     * Handle post mapping exceptions / correction\r\n     * @param {string} tag Tag e.g. {\"©alb\", \"Buena Vista Social Club\")\r\n     * @param {warnings} Used to register warnings\r\n     */\r\n    postMap(tag, warnings) {\r\n        return;\r\n    }\r\n}\r\nexports.CommonTagMapper = CommonTagMapper;\r\nCommonTagMapper.maxRatingScore = 1;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/common/GenericTagMapper.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/GenericTagTypes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/GenericTagTypes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.isUnique = exports.isSingleton = exports.commonTags = void 0;\r\nexports.commonTags = {\r\n    year: { multiple: false },\r\n    track: { multiple: false },\r\n    disk: { multiple: false },\r\n    title: { multiple: false },\r\n    artist: { multiple: false },\r\n    artists: { multiple: true, unique: true },\r\n    albumartist: { multiple: false },\r\n    album: { multiple: false },\r\n    date: { multiple: false },\r\n    originaldate: { multiple: false },\r\n    originalyear: { multiple: false },\r\n    comment: { multiple: true, unique: false },\r\n    genre: { multiple: true, unique: true },\r\n    picture: { multiple: true, unique: true },\r\n    composer: { multiple: true, unique: true },\r\n    lyrics: { multiple: true, unique: false },\r\n    albumsort: { multiple: false, unique: true },\r\n    titlesort: { multiple: false, unique: true },\r\n    work: { multiple: false, unique: true },\r\n    artistsort: { multiple: false, unique: true },\r\n    albumartistsort: { multiple: false, unique: true },\r\n    composersort: { multiple: false, unique: true },\r\n    lyricist: { multiple: true, unique: true },\r\n    writer: { multiple: true, unique: true },\r\n    conductor: { multiple: true, unique: true },\r\n    remixer: { multiple: true, unique: true },\r\n    arranger: { multiple: true, unique: true },\r\n    engineer: { multiple: true, unique: true },\r\n    producer: { multiple: true, unique: true },\r\n    technician: { multiple: true, unique: true },\r\n    djmixer: { multiple: true, unique: true },\r\n    mixer: { multiple: true, unique: true },\r\n    label: { multiple: true, unique: true },\r\n    grouping: { multiple: false },\r\n    subtitle: { multiple: true },\r\n    discsubtitle: { multiple: false },\r\n    totaltracks: { multiple: false },\r\n    totaldiscs: { multiple: false },\r\n    compilation: { multiple: false },\r\n    rating: { multiple: true },\r\n    bpm: { multiple: false },\r\n    mood: { multiple: false },\r\n    media: { multiple: false },\r\n    catalognumber: { multiple: true, unique: true },\r\n    tvShow: { multiple: false },\r\n    tvShowSort: { multiple: false },\r\n    tvSeason: { multiple: false },\r\n    tvEpisode: { multiple: false },\r\n    tvEpisodeId: { multiple: false },\r\n    tvNetwork: { multiple: false },\r\n    podcast: { multiple: false },\r\n    podcasturl: { multiple: false },\r\n    releasestatus: { multiple: false },\r\n    releasetype: { multiple: true },\r\n    releasecountry: { multiple: false },\r\n    script: { multiple: false },\r\n    language: { multiple: false },\r\n    copyright: { multiple: false },\r\n    license: { multiple: false },\r\n    encodedby: { multiple: false },\r\n    encodersettings: { multiple: false },\r\n    gapless: { multiple: false },\r\n    barcode: { multiple: false },\r\n    isrc: { multiple: true },\r\n    asin: { multiple: false },\r\n    musicbrainz_recordingid: { multiple: false },\r\n    musicbrainz_trackid: { multiple: false },\r\n    musicbrainz_albumid: { multiple: false },\r\n    musicbrainz_artistid: { multiple: true },\r\n    musicbrainz_albumartistid: { multiple: true },\r\n    musicbrainz_releasegroupid: { multiple: false },\r\n    musicbrainz_workid: { multiple: false },\r\n    musicbrainz_trmid: { multiple: false },\r\n    musicbrainz_discid: { multiple: false },\r\n    acoustid_id: { multiple: false },\r\n    acoustid_fingerprint: { multiple: false },\r\n    musicip_puid: { multiple: false },\r\n    musicip_fingerprint: { multiple: false },\r\n    website: { multiple: false },\r\n    'performer:instrument': { multiple: true, unique: true },\r\n    averageLevel: { multiple: false },\r\n    peakLevel: { multiple: false },\r\n    notes: { multiple: true, unique: false },\r\n    key: { multiple: false },\r\n    originalalbum: { multiple: false },\r\n    originalartist: { multiple: false },\r\n    discogs_artist_id: { multiple: true, unique: true },\r\n    discogs_release_id: { multiple: false },\r\n    discogs_label_id: { multiple: false },\r\n    discogs_master_release_id: { multiple: false },\r\n    discogs_votes: { multiple: false },\r\n    discogs_rating: { multiple: false },\r\n    replaygain_track_peak: { multiple: false },\r\n    replaygain_track_gain: { multiple: false },\r\n    replaygain_album_peak: { multiple: false },\r\n    replaygain_album_gain: { multiple: false },\r\n    replaygain_track_minmax: { multiple: false },\r\n    replaygain_album_minmax: { multiple: false },\r\n    replaygain_undo: { multiple: false },\r\n    description: { multiple: true },\r\n    longDescription: { multiple: false },\r\n    category: { multiple: true },\r\n    hdVideo: { multiple: false },\r\n    keywords: { multiple: true },\r\n    movement: { multiple: false },\r\n    movementIndex: { multiple: false },\r\n    movementTotal: { multiple: false },\r\n    podcastId: { multiple: false },\r\n    showMovement: { multiple: false },\r\n    stik: { multiple: false }\r\n};\r\n/**\r\n * @param alias Name of common tag\r\n * @returns {boolean|*} true if given alias is mapped as a singleton', otherwise false\r\n */\r\nfunction isSingleton(alias) {\r\n    return exports.commonTags.hasOwnProperty(alias) && !exports.commonTags[alias].multiple;\r\n}\r\nexports.isSingleton = isSingleton;\r\n/**\r\n * @param alias Common (generic) tag\r\n * @returns {boolean|*} true if given alias is a singleton or explicitly marked as unique\r\n */\r\nfunction isUnique(alias) {\r\n    return !exports.commonTags[alias].multiple || exports.commonTags[alias].unique;\r\n}\r\nexports.isUnique = isUnique;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/common/GenericTagTypes.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/MetadataCollector.js":
/*!*********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/MetadataCollector.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.joinArtists = exports.MetadataCollector = void 0;\r\nconst type_1 = __webpack_require__(/*! ../type */ \"./node_modules/music-metadata/lib/type.js\");\r\nconst _debug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst GenericTagTypes_1 = __webpack_require__(/*! ./GenericTagTypes */ \"./node_modules/music-metadata/lib/common/GenericTagTypes.js\");\r\nconst CombinedTagMapper_1 = __webpack_require__(/*! ./CombinedTagMapper */ \"./node_modules/music-metadata/lib/common/CombinedTagMapper.js\");\r\nconst GenericTagMapper_1 = __webpack_require__(/*! ./GenericTagMapper */ \"./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\r\nconst Util_1 = __webpack_require__(/*! ./Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst FileType = __webpack_require__(/*! file-type/core */ \"./node_modules/file-type/core.js\");\r\nconst debug = _debug('music-metadata:collector');\r\nconst TagPriority = ['matroska', 'APEv2', 'vorbis', 'ID3v2.4', 'ID3v2.3', 'ID3v2.2', 'exif', 'asf', 'iTunes', 'ID3v1'];\r\n/**\r\n * Provided to the parser to uodate the metadata result.\r\n * Responsible for triggering async updates\r\n */\r\nclass MetadataCollector {\r\n    constructor(opts) {\r\n        this.opts = opts;\r\n        this.format = {\r\n            tagTypes: [],\r\n            trackInfo: []\r\n        };\r\n        this.native = {};\r\n        this.common = {\r\n            track: { no: null, of: null },\r\n            disk: { no: null, of: null },\r\n            movementIndex: {}\r\n        };\r\n        this.quality = {\r\n            warnings: []\r\n        };\r\n        /**\r\n         * Keeps track of origin priority for each mapped id\r\n         */\r\n        this.commonOrigin = {};\r\n        /**\r\n         * Maps a tag type to a priority\r\n         */\r\n        this.originPriority = {};\r\n        this.tagMapper = new CombinedTagMapper_1.CombinedTagMapper();\r\n        let priority = 1;\r\n        for (const tagType of TagPriority) {\r\n            this.originPriority[tagType] = priority++;\r\n        }\r\n        this.originPriority.artificial = 500; // Filled using alternative tags\r\n        this.originPriority.id3v1 = 600; // Consider worst due to field length limit\r\n    }\r\n    /**\r\n     * @returns {boolean} true if one or more tags have been found\r\n     */\r\n    hasAny() {\r\n        return Object.keys(this.native).length > 0;\r\n    }\r\n    addStreamInfo(streamInfo) {\r\n        debug(`streamInfo: type=${type_1.TrackType[streamInfo.type]}, codec=${streamInfo.codecName}`);\r\n        this.format.trackInfo.push(streamInfo);\r\n    }\r\n    setFormat(key, value) {\r\n        debug(`format: ${key} = ${value}`);\r\n        this.format[key] = value; // as any to override readonly\r\n        if (this.opts.observer) {\r\n            this.opts.observer({ metadata: this, tag: { type: 'format', id: key, value } });\r\n        }\r\n    }\r\n    addTag(tagType, tagId, value) {\r\n        debug(`tag ${tagType}.${tagId} = ${value}`);\r\n        if (!this.native[tagType]) {\r\n            this.format.tagTypes.push(tagType);\r\n            this.native[tagType] = [];\r\n        }\r\n        this.native[tagType].push({ id: tagId, value });\r\n        this.toCommon(tagType, tagId, value);\r\n    }\r\n    addWarning(warning) {\r\n        this.quality.warnings.push({ message: warning });\r\n    }\r\n    postMap(tagType, tag) {\r\n        // Common tag (alias) found\r\n        // check if we need to do something special with common tag\r\n        // if the event has been aliased then we need to clean it before\r\n        // it is emitted to the user. e.g. genre (20) -> Electronic\r\n        switch (tag.id) {\r\n            case 'artist':\r\n                if (this.commonOrigin.artist === this.originPriority[tagType]) {\r\n                    // Assume the artist field is used as artists\r\n                    return this.postMap('artificial', { id: 'artists', value: tag.value });\r\n                }\r\n                if (!this.common.artists) {\r\n                    // Fill artists using artist source\r\n                    this.setGenericTag('artificial', { id: 'artists', value: tag.value });\r\n                }\r\n                break;\r\n            case 'artists':\r\n                if (!this.common.artist || this.commonOrigin.artist === this.originPriority.artificial) {\r\n                    if (!this.common.artists || this.common.artists.indexOf(tag.value) === -1) {\r\n                        // Fill artist using artists source\r\n                        const artists = (this.common.artists || []).concat([tag.value]);\r\n                        const value = joinArtists(artists);\r\n                        const artistTag = { id: 'artist', value };\r\n                        this.setGenericTag('artificial', artistTag);\r\n                    }\r\n                }\r\n                break;\r\n            case 'picture':\r\n                this.postFixPicture(tag.value).then(picture => {\r\n                    if (picture !== null) {\r\n                        tag.value = picture;\r\n                        this.setGenericTag(tagType, tag);\r\n                    }\r\n                });\r\n                return;\r\n            case 'totaltracks':\r\n                this.common.track.of = GenericTagMapper_1.CommonTagMapper.toIntOrNull(tag.value);\r\n                return;\r\n            case 'totaldiscs':\r\n                this.common.disk.of = GenericTagMapper_1.CommonTagMapper.toIntOrNull(tag.value);\r\n                return;\r\n            case 'movementTotal':\r\n                this.common.movementIndex.of = GenericTagMapper_1.CommonTagMapper.toIntOrNull(tag.value);\r\n                return;\r\n            case 'track':\r\n            case 'disk':\r\n            case 'movementIndex':\r\n                const of = this.common[tag.id].of; // store of value, maybe maybe overwritten\r\n                this.common[tag.id] = GenericTagMapper_1.CommonTagMapper.normalizeTrack(tag.value);\r\n                this.common[tag.id].of = of != null ? of : this.common[tag.id].of;\r\n                return;\r\n            case 'year':\r\n            case 'originalyear':\r\n                tag.value = parseInt(tag.value, 10);\r\n                break;\r\n            case 'date':\r\n                // ToDo: be more strict on 'YYYY...'\r\n                const year = parseInt(tag.value.substr(0, 4), 10);\r\n                if (!isNaN(year)) {\r\n                    this.common.year = year;\r\n                }\r\n                break;\r\n            case 'discogs_label_id':\r\n            case 'discogs_release_id':\r\n            case 'discogs_master_release_id':\r\n            case 'discogs_artist_id':\r\n            case 'discogs_votes':\r\n                tag.value = typeof tag.value === 'string' ? parseInt(tag.value, 10) : tag.value;\r\n                break;\r\n            case 'replaygain_track_gain':\r\n            case 'replaygain_track_peak':\r\n            case 'replaygain_album_gain':\r\n            case 'replaygain_album_peak':\r\n                tag.value = Util_1.toRatio(tag.value);\r\n                break;\r\n            case 'replaygain_track_minmax':\r\n                tag.value = tag.value.split(',').map(v => parseInt(v, 10));\r\n                break;\r\n            case 'replaygain_undo':\r\n                const minMix = tag.value.split(',').map(v => parseInt(v, 10));\r\n                tag.value = {\r\n                    leftChannel: minMix[0],\r\n                    rightChannel: minMix[1]\r\n                };\r\n                break;\r\n            case 'gapless': // iTunes gap-less flag\r\n            case 'compilation':\r\n            case 'podcast':\r\n            case 'showMovement':\r\n                tag.value = tag.value === '1' || tag.value === 1; // boolean\r\n                break;\r\n            case 'isrc': // Only keep unique values\r\n                if (this.common[tag.id] && this.common[tag.id].indexOf(tag.value) !== -1)\r\n                    return;\r\n                break;\r\n            default:\r\n            // nothing to do\r\n        }\r\n        if (tag.value !== null) {\r\n            this.setGenericTag(tagType, tag);\r\n        }\r\n    }\r\n    /**\r\n     * Convert native tags to common tags\r\n     * @returns {IAudioMetadata} Native + common tags\r\n     */\r\n    toCommonMetadata() {\r\n        return {\r\n            format: this.format,\r\n            native: this.native,\r\n            quality: this.quality,\r\n            common: this.common\r\n        };\r\n    }\r\n    /**\r\n     * Fix some common issues with picture object\r\n     * @param pictureType\r\n     */\r\n    async postFixPicture(picture) {\r\n        if (picture.data && picture.data.length > 0) {\r\n            if (!picture.format) {\r\n                const fileType = await FileType.fromBuffer(picture.data);\r\n                if (fileType) {\r\n                    picture.format = fileType.mime;\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n            picture.format = picture.format.toLocaleLowerCase();\r\n            switch (picture.format) {\r\n                case 'image/jpg':\r\n                    picture.format = 'image/jpeg'; // ToDo: register warning\r\n            }\r\n            return picture;\r\n        }\r\n        this.addWarning(`Empty picture tag found`);\r\n        return null;\r\n    }\r\n    /**\r\n     * Convert native tag to common tags\r\n     */\r\n    toCommon(tagType, tagId, value) {\r\n        const tag = { id: tagId, value };\r\n        const genericTag = this.tagMapper.mapTag(tagType, tag, this);\r\n        if (genericTag) {\r\n            this.postMap(tagType, genericTag);\r\n        }\r\n    }\r\n    /**\r\n     * Set generic tag\r\n     */\r\n    setGenericTag(tagType, tag) {\r\n        debug(`common.${tag.id} = ${tag.value}`);\r\n        const prio0 = this.commonOrigin[tag.id] || 1000;\r\n        const prio1 = this.originPriority[tagType];\r\n        if (GenericTagTypes_1.isSingleton(tag.id)) {\r\n            if (prio1 <= prio0) {\r\n                this.common[tag.id] = tag.value;\r\n                this.commonOrigin[tag.id] = prio1;\r\n            }\r\n            else {\r\n                return debug(`Ignore native tag (singleton): ${tagType}.${tag.id} = ${tag.value}`);\r\n            }\r\n        }\r\n        else {\r\n            if (prio1 === prio0) {\r\n                if (!GenericTagTypes_1.isUnique(tag.id) || this.common[tag.id].indexOf(tag.value) === -1) {\r\n                    this.common[tag.id].push(tag.value);\r\n                }\r\n                else {\r\n                    debug(`Ignore duplicate value: ${tagType}.${tag.id} = ${tag.value}`);\r\n                }\r\n                // no effect? this.commonOrigin[tag.id] = prio1;\r\n            }\r\n            else if (prio1 < prio0) {\r\n                this.common[tag.id] = [tag.value];\r\n                this.commonOrigin[tag.id] = prio1;\r\n            }\r\n            else {\r\n                return debug(`Ignore native tag (list): ${tagType}.${tag.id} = ${tag.value}`);\r\n            }\r\n        }\r\n        if (this.opts.observer) {\r\n            this.opts.observer({ metadata: this, tag: { type: 'common', id: tag.id, value: tag.value } });\r\n        }\r\n        // ToDo: trigger metadata event\r\n    }\r\n}\r\nexports.MetadataCollector = MetadataCollector;\r\nfunction joinArtists(artists) {\r\n    if (artists.length > 2) {\r\n        return artists.slice(0, artists.length - 1).join(', ') + ' & ' + artists[artists.length - 1];\r\n    }\r\n    return artists.join(' & ');\r\n}\r\nexports.joinArtists = joinArtists;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/common/MetadataCollector.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/RandomBufferReader.js":
/*!**********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/RandomBufferReader.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.RandomBufferReader = void 0;\r\n/**\r\n * Provides abstract Node Buffer access via the IRandomRead interface\r\n */\r\nclass RandomBufferReader {\r\n    constructor(buf) {\r\n        this.buf = buf;\r\n        this.fileSize = buf.length;\r\n    }\r\n    /**\r\n     * Read from a given position of an abstracted file or buffer.\r\n     * @param buffer {Buffer} is the buffer that the data will be written to.\r\n     * @param offset {number} is the offset in the buffer to start writing at.\r\n     * @param length {number}is an integer specifying the number of bytes to read.\r\n     * @param position {number} is an argument specifying where to begin reading from in the file.\r\n     * @return {Promise<number>} bytes read\r\n     */\r\n    async randomRead(buffer, offset, length, position) {\r\n        return this.buf.copy(buffer, offset, position, position + length);\r\n    }\r\n}\r\nexports.RandomBufferReader = RandomBufferReader;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/common/RandomBufferReader.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/RandomFileReader.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/RandomFileReader.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.RandomFileReader = void 0;\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\n/**\r\n * Provides abstract file access via the IRandomRead interface\r\n */\r\nclass RandomFileReader {\r\n    constructor(filePath, fileSize) {\r\n        this.fileSize = fileSize;\r\n        this.fd = fs.openSync(filePath, 'r');\r\n    }\r\n    /**\r\n     * Read from a given position of an abstracted file or buffer.\r\n     * @param buffer {Buffer} is the buffer that the data will be written to.\r\n     * @param offset {number} is the offset in the buffer to start writing at.\r\n     * @param length {number}is an integer specifying the number of bytes to read.\r\n     * @param position {number} is an argument specifying where to begin reading from in the file.\r\n     * @return {Promise<number>} bytes read\r\n     */\r\n    randomRead(buffer, offset, length, position) {\r\n        return new Promise((resolve, reject) => {\r\n            fs.read(this.fd, buffer, offset, length, position, (err, bytesRead) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    resolve(bytesRead);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    close() {\r\n        fs.closeSync(this.fd);\r\n    }\r\n}\r\nexports.RandomFileReader = RandomFileReader;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/common/RandomFileReader.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/Util.js":
/*!********************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/Util.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.toRatio = exports.dbToRatio = exports.ratioToDb = void 0;\r\nconst Windows1292Decoder_1 = __webpack_require__(/*! ./Windows1292Decoder */ \"./node_modules/music-metadata/lib/common/Windows1292Decoder.js\");\r\nclass Util {\r\n    /**\r\n     *\r\n     * @param buffer\r\n     * @param start\r\n     * @param end\r\n     * @param encoding // ToDo: ts.enum\r\n     * @return {number}\r\n     */\r\n    static findZero(buffer, start, end, encoding) {\r\n        let i = start;\r\n        if (encoding === 'utf16') {\r\n            while (buffer[i] !== 0 || buffer[i + 1] !== 0) {\r\n                if (i >= end)\r\n                    return end;\r\n                i += 2;\r\n            }\r\n            return i;\r\n        }\r\n        else {\r\n            while (buffer[i] !== 0) {\r\n                if (i >= end)\r\n                    return end;\r\n                i++;\r\n            }\r\n            return i;\r\n        }\r\n    }\r\n    static trimRightNull(x) {\r\n        const pos0 = x.indexOf('\\0');\r\n        return pos0 === -1 ? x : x.substr(0, pos0);\r\n    }\r\n    static swapBytes(buffer) {\r\n        const l = buffer.length;\r\n        if ((l & 1) !== 0)\r\n            throw new Error('Buffer length must be even');\r\n        for (let i = 0; i < l; i += 2) {\r\n            const a = buffer[i];\r\n            buffer[i] = buffer[i + 1];\r\n            buffer[i + 1] = a;\r\n        }\r\n        return buffer;\r\n    }\r\n    static readUTF16String(buffer) {\r\n        let offset = 0;\r\n        if (buffer[0] === 0xFE && buffer[1] === 0xFF) { // big endian\r\n            buffer = Util.swapBytes(buffer);\r\n            offset = 2;\r\n        }\r\n        else if (buffer[0] === 0xFF && buffer[1] === 0xFE) { // little endian\r\n            offset = 2;\r\n        }\r\n        return buffer.toString('ucs2', offset);\r\n    }\r\n    /**\r\n     *\r\n     * @param buffer Decoder input data\r\n     * @param encoding 'utf16le' | 'utf16' | 'utf8' | 'iso-8859-1'\r\n     * @return {string}\r\n     */\r\n    static decodeString(buffer, encoding) {\r\n        // annoying workaround for a double BOM issue\r\n        // https://github.com/leetreveil/musicmetadata/issues/84\r\n        if (buffer[0] === 0xFF && buffer[1] === 0xFE && buffer[2] === 0xFE && buffer[3] === 0xFF) {\r\n            buffer = buffer.slice(2);\r\n        }\r\n        if (encoding === 'utf16le' || encoding === 'utf16') {\r\n            return Util.readUTF16String(buffer);\r\n        }\r\n        else if (encoding === 'utf8') {\r\n            return buffer.toString('utf8');\r\n        }\r\n        else if (encoding === 'iso-8859-1') {\r\n            return Windows1292Decoder_1.Windows1292Decoder.decode(buffer);\r\n        }\r\n        throw Error(encoding + ' encoding is not supported!');\r\n    }\r\n    static stripNulls(str) {\r\n        str = str.replace(/^\\x00+/g, '');\r\n        str = str.replace(/\\x00+$/g, '');\r\n        return str;\r\n    }\r\n    /**\r\n     * Read bit-aligned number start from buffer\r\n     * Total offset in bits = byteOffset * 8 + bitOffset\r\n     * @param buf Byte buffer\r\n     * @param byteOffset Starting offset in bytes\r\n     * @param bitOffset Starting offset in bits: 0 = lsb\r\n     * @param len Length of number in bits\r\n     * @return {number} decoded bit aligned number\r\n     */\r\n    static getBitAllignedNumber(buf, byteOffset, bitOffset, len) {\r\n        const byteOff = byteOffset + ~~(bitOffset / 8);\r\n        const bitOff = bitOffset % 8;\r\n        let value = buf[byteOff];\r\n        value &= 0xff >> bitOff;\r\n        const bitsRead = 8 - bitOff;\r\n        const bitsLeft = len - bitsRead;\r\n        if (bitsLeft < 0) {\r\n            value >>= (8 - bitOff - len);\r\n        }\r\n        else if (bitsLeft > 0) {\r\n            value <<= bitsLeft;\r\n            value |= Util.getBitAllignedNumber(buf, byteOffset, bitOffset + bitsRead, bitsLeft);\r\n        }\r\n        return value;\r\n    }\r\n    /**\r\n     * Read bit-aligned number start from buffer\r\n     * Total offset in bits = byteOffset * 8 + bitOffset\r\n     * @param buf Byte buffer\r\n     * @param byteOffset Starting offset in bytes\r\n     * @param bitOffset Starting offset in bits: 0 = most significant bit, 7 is least significant bit\r\n     * @return {number} decoded bit aligned number\r\n     */\r\n    static isBitSet(buf, byteOffset, bitOffset) {\r\n        return Util.getBitAllignedNumber(buf, byteOffset, bitOffset, 1) === 1;\r\n    }\r\n    static a2hex(str) {\r\n        const arr = [];\r\n        for (let i = 0, l = str.length; i < l; i++) {\r\n            const hex = Number(str.charCodeAt(i)).toString(16);\r\n            arr.push(hex.length === 1 ? '0' + hex : hex);\r\n        }\r\n        return arr.join(' ');\r\n    }\r\n}\r\nexports.default = Util;\r\nUtil.strtokBITSET = {\r\n    get: (buf, off, bit) => {\r\n        return (buf[off] & (1 << bit)) !== 0;\r\n    },\r\n    len: 1\r\n};\r\n/**\r\n * Convert power ratio to DB\r\n * ratio: [0..1]\r\n */\r\nfunction ratioToDb(ratio) {\r\n    return 10 * Math.log10(ratio);\r\n}\r\nexports.ratioToDb = ratioToDb;\r\n/**\r\n * Convert dB to ratio\r\n * db Decibels\r\n */\r\nfunction dbToRatio(dB) {\r\n    return Math.pow(10, dB / 10);\r\n}\r\nexports.dbToRatio = dbToRatio;\r\n/**\r\n * Convert replay gain to ratio and Decibel\r\n * @param value string holding a ratio like '0.034' or '-7.54 dB'\r\n */\r\nfunction toRatio(value) {\r\n    const ps = value.split(' ').map(p => p.trim().toLowerCase());\r\n    // @ts-ignore\r\n    if (ps.length >= 1) {\r\n        const v = parseFloat(ps[0]);\r\n        if (ps.length === 2 && ps[1] === 'db') {\r\n            return {\r\n                dB: v,\r\n                ratio: dbToRatio(v)\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                dB: ratioToDb(v),\r\n                ratio: v\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.toRatio = toRatio;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/common/Util.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/Windows1292Decoder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/Windows1292Decoder.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Windows1292Decoder = void 0;\r\n/**\r\n * windows-1252 / iso_8859-1 decoder (ANSI)\r\n */\r\nclass Windows1292Decoder {\r\n    static decode(buffer) {\r\n        let str = '';\r\n        for (const i in buffer) {\r\n            if (buffer.hasOwnProperty(i)) {\r\n                str += Windows1292Decoder.codePointToString(Windows1292Decoder.singleByteDecoder(buffer[i]));\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    static inRange(a, min, max) {\r\n        return min <= a && a <= max;\r\n    }\r\n    static codePointToString(cp) {\r\n        if (cp <= 0xFFFF) {\r\n            return String.fromCharCode(cp);\r\n        }\r\n        else {\r\n            cp -= 0x10000;\r\n            return String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);\r\n        }\r\n    }\r\n    static singleByteDecoder(bite) {\r\n        if (Windows1292Decoder.inRange(bite, 0x00, 0x7F)) {\r\n            return bite;\r\n        }\r\n        const codePoint = Windows1292Decoder.windows1252[bite - 0x80];\r\n        if (codePoint === null) {\r\n            throw Error('invaliding encoding');\r\n        }\r\n        return codePoint;\r\n    }\r\n}\r\nexports.Windows1292Decoder = Windows1292Decoder;\r\nWindows1292Decoder.windows1252 = [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352,\r\n    8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732,\r\n    8482, 353, 8250, 339, 157, 382, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168,\r\n    169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,\r\n    185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,\r\n    201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,\r\n    217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,\r\n    233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\r\n    248, 249, 250, 251, 252, 253, 254, 255];\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/common/Windows1292Decoder.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/core.js":
/*!*************************************************!*\
  !*** ./node_modules/music-metadata/lib/core.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.scanAppendingHeaders = exports.selectCover = exports.ratingToStars = exports.orderTags = exports.parseFromTokenizer = exports.parseBuffer = exports.parseStream = void 0;\r\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\r\nconst ParserFactory_1 = __webpack_require__(/*! ./ParserFactory */ \"./node_modules/music-metadata/lib/ParserFactory.js\");\r\nconst RandomBufferReader_1 = __webpack_require__(/*! ./common/RandomBufferReader */ \"./node_modules/music-metadata/lib/common/RandomBufferReader.js\");\r\nconst APEv2Parser_1 = __webpack_require__(/*! ./apev2/APEv2Parser */ \"./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\r\nconst ID3v1Parser_1 = __webpack_require__(/*! ./id3v1/ID3v1Parser */ \"./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\r\nconst Lyrics3_1 = __webpack_require__(/*! ./lyrics3/Lyrics3 */ \"./node_modules/music-metadata/lib/lyrics3/Lyrics3.js\");\r\n/**\r\n * Parse audio from Node Stream.Readable\r\n * @param stream - Stream to read the audio track from\r\n * @param options - Parsing options\r\n * @param fileInfo - File information object or MIME-type string\r\n * @returns Metadata\r\n */\r\nfunction parseStream(stream, fileInfo, options = {}) {\r\n    return parseFromTokenizer(strtok3.fromStream(stream, typeof fileInfo === 'string' ? { mimeType: fileInfo } : fileInfo), options);\r\n}\r\nexports.parseStream = parseStream;\r\n/**\r\n * Parse audio from Node Buffer\r\n * @param buf - Buffer holding audio data\r\n * @param fileInfo - File information object or MIME-type string\r\n * @param options - Parsing options\r\n * @returns Metadata\r\n * Ref: https://github.com/Borewit/strtok3/blob/e6938c81ff685074d5eb3064a11c0b03ca934c1d/src/index.ts#L15\r\n */\r\nasync function parseBuffer(buf, fileInfo, options = {}) {\r\n    const bufferReader = new RandomBufferReader_1.RandomBufferReader(buf);\r\n    await scanAppendingHeaders(bufferReader, options);\r\n    const tokenizer = strtok3.fromBuffer(buf, typeof fileInfo === 'string' ? { mimeType: fileInfo } : fileInfo);\r\n    return parseFromTokenizer(tokenizer, options);\r\n}\r\nexports.parseBuffer = parseBuffer;\r\n/**\r\n * Parse audio from ITokenizer source\r\n * @param tokenizer - Audio source implementing the tokenizer interface\r\n * @param options - Parsing options\r\n * @returns Metadata\r\n */\r\nfunction parseFromTokenizer(tokenizer, options) {\r\n    return ParserFactory_1.ParserFactory.parseOnContentType(tokenizer, options);\r\n}\r\nexports.parseFromTokenizer = parseFromTokenizer;\r\n/**\r\n * Create a dictionary ordered by their tag id (key)\r\n * @param nativeTags list of tags\r\n * @returns tags indexed by id\r\n */\r\nfunction orderTags(nativeTags) {\r\n    const tags = {};\r\n    for (const tag of nativeTags) {\r\n        (tags[tag.id] = (tags[tag.id] || [])).push(tag.value);\r\n    }\r\n    return tags;\r\n}\r\nexports.orderTags = orderTags;\r\n/**\r\n * Convert rating to 1-5 star rating\r\n * @param rating: Normalized rating [0..1] (common.rating[n].rating)\r\n * @returns Number of stars: 1, 2, 3, 4 or 5 stars\r\n */\r\nfunction ratingToStars(rating) {\r\n    return rating === undefined ? 0 : 1 + Math.round(rating * 4);\r\n}\r\nexports.ratingToStars = ratingToStars;\r\n/**\r\n * Select most likely cover image.\r\n * @param pictures Usually metadata.common.picture\r\n * @return Cover image, if any, otherwise null\r\n */\r\nfunction selectCover(pictures) {\r\n    return pictures ? pictures.reduce((acc, cur) => {\r\n        if (cur.name && cur.name.toLowerCase() in ['front', 'cover', 'cover (front)'])\r\n            return cur;\r\n        return acc;\r\n    }) : null;\r\n}\r\nexports.selectCover = selectCover;\r\nasync function scanAppendingHeaders(randomReader, options = {}) {\r\n    let apeOffset = randomReader.fileSize;\r\n    if (await ID3v1Parser_1.hasID3v1Header(randomReader)) {\r\n        apeOffset -= 128;\r\n        const lyricsLen = await Lyrics3_1.getLyricsHeaderLength(randomReader);\r\n        apeOffset -= lyricsLen;\r\n    }\r\n    options.apeHeader = await APEv2Parser_1.APEv2Parser.findApeFooterOffset(randomReader, apeOffset);\r\n}\r\nexports.scanAppendingHeaders = scanAppendingHeaders;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/core.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js":
/*!****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DsdiffParser = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\r\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\r\nconst DsdiffToken_1 = __webpack_require__(/*! ./DsdiffToken */ \"./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js\");\r\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\r\nconst ID3v2Parser_1 = __webpack_require__(/*! ../id3v2/ID3v2Parser */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\r\nconst debug = initDebug('music-metadata:parser:aiff');\r\n/**\r\n * DSDIFF - Direct Stream Digital Interchange File Format (Phillips)\r\n *\r\n * Ref:\r\n *  http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\r\n */\r\nclass DsdiffParser extends BasicParser_1.BasicParser {\r\n    async parse() {\r\n        const header = await this.tokenizer.readToken(DsdiffToken_1.ChunkHeader);\r\n        if (header.chunkID !== 'FRM8')\r\n            throw new Error('Unexpected chunk-ID');\r\n        const type = (await this.tokenizer.readToken(FourCC_1.FourCcToken)).trim();\r\n        switch (type) {\r\n            case 'DSD':\r\n                this.metadata.setFormat('container', `DSDIFF/${type}`);\r\n                this.metadata.setFormat('lossless', true);\r\n                return this.readFmt8Chunks(header.chunkSize - FourCC_1.FourCcToken.len);\r\n            default:\r\n                throw Error(`Unsupported DSDIFF type: ${type}`);\r\n        }\r\n    }\r\n    async readFmt8Chunks(remainingSize) {\r\n        while (remainingSize >= DsdiffToken_1.ChunkHeader.len) {\r\n            const chunkHeader = await this.tokenizer.readToken(DsdiffToken_1.ChunkHeader);\r\n            //  If the data is an odd number of bytes in length, a pad byte must be added at the end\r\n            debug(`Chunk id=${chunkHeader.chunkID}`);\r\n            await this.readData(chunkHeader);\r\n            remainingSize -= (DsdiffToken_1.ChunkHeader.len + chunkHeader.chunkSize);\r\n        }\r\n    }\r\n    async readData(header) {\r\n        debug(`Reading data of chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\r\n        const p0 = this.tokenizer.position;\r\n        switch (header.chunkID.trim()) {\r\n            case 'FVER': // 3.1 FORMAT VERSION CHUNK\r\n                const version = await this.tokenizer.readToken(Token.UINT32_LE);\r\n                debug(`DSDIFF version=${version}`);\r\n                break;\r\n            case 'PROP': // 3.2 PROPERTY CHUNK\r\n                const propType = await this.tokenizer.readToken(FourCC_1.FourCcToken);\r\n                if (propType !== 'SND ')\r\n                    throw new Error('Unexpected PROP-chunk ID');\r\n                await this.handleSoundPropertyChunks(header.chunkSize - FourCC_1.FourCcToken.len);\r\n                break;\r\n            case 'ID3': // Unofficial ID3 tag support\r\n                const id3_data = await this.tokenizer.readToken(new Token.BufferType(header.chunkSize));\r\n                const rst = strtok3.fromBuffer(id3_data);\r\n                await new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, rst, this.options);\r\n                break;\r\n            default:\r\n                debug(`Ignore chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\r\n                break;\r\n            case 'DSD':\r\n                this.metadata.setFormat('numberOfSamples', header.chunkSize * 8 / this.metadata.format.numberOfChannels);\r\n                this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);\r\n                break;\r\n        }\r\n        const remaining = header.chunkSize - (this.tokenizer.position - p0);\r\n        if (remaining > 0) {\r\n            debug(`After Parsing chunk, remaining ${remaining} bytes`);\r\n            await this.tokenizer.ignore(remaining);\r\n        }\r\n    }\r\n    async handleSoundPropertyChunks(remainingSize) {\r\n        debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\r\n        while (remainingSize > 0) {\r\n            const sndPropHeader = await this.tokenizer.readToken(DsdiffToken_1.ChunkHeader);\r\n            debug(`Sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\r\n            const p0 = this.tokenizer.position;\r\n            switch (sndPropHeader.chunkID.trim()) {\r\n                case 'FS': // 3.2.1 Sample Rate Chunk\r\n                    const sampleRate = await this.tokenizer.readToken(Token.UINT32_BE);\r\n                    this.metadata.setFormat('sampleRate', sampleRate);\r\n                    break;\r\n                case 'CHNL': // 3.2.2 Channels Chunk\r\n                    const numChannels = await this.tokenizer.readToken(Token.UINT16_BE);\r\n                    this.metadata.setFormat('numberOfChannels', numChannels);\r\n                    await this.handleChannelChunks(sndPropHeader.chunkSize - Token.UINT16_BE.len);\r\n                    break;\r\n                case 'CMPR': // 3.2.3 Compression Type Chunk\r\n                    const compressionIdCode = (await this.tokenizer.readToken(FourCC_1.FourCcToken)).trim();\r\n                    const count = await this.tokenizer.readToken(Token.UINT8);\r\n                    const compressionName = await this.tokenizer.readToken(new Token.StringType(count, 'ascii'));\r\n                    if (compressionIdCode === 'DSD') {\r\n                        this.metadata.setFormat('lossless', true);\r\n                        this.metadata.setFormat('bitsPerSample', 1);\r\n                    }\r\n                    this.metadata.setFormat('codec', `${compressionIdCode} (${compressionName})`);\r\n                    break;\r\n                case 'ABSS': // 3.2.4 Absolute Start Time Chunk\r\n                    const hours = await this.tokenizer.readToken(Token.UINT16_BE);\r\n                    const minutes = await this.tokenizer.readToken(Token.UINT8);\r\n                    const seconds = await this.tokenizer.readToken(Token.UINT8);\r\n                    const samples = await this.tokenizer.readToken(Token.UINT32_BE);\r\n                    debug(`ABSS ${hours}:${minutes}:${seconds}.${samples}`);\r\n                    break;\r\n                case 'LSCO': // 3.2.5 Loudspeaker Configuration Chunk\r\n                    const lsConfig = await this.tokenizer.readToken(Token.UINT16_BE);\r\n                    debug(`LSCO lsConfig=${lsConfig}`);\r\n                    break;\r\n                case 'COMT':\r\n                default:\r\n                    debug(`Unknown sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\r\n                    await this.tokenizer.ignore(sndPropHeader.chunkSize);\r\n            }\r\n            const remaining = sndPropHeader.chunkSize - (this.tokenizer.position - p0);\r\n            if (remaining > 0) {\r\n                debug(`After Parsing sound-property-chunk ${sndPropHeader.chunkSize}, remaining ${remaining} bytes`);\r\n                await this.tokenizer.ignore(remaining);\r\n            }\r\n            remainingSize -= DsdiffToken_1.ChunkHeader.len + sndPropHeader.chunkSize;\r\n            debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\r\n        }\r\n        if (this.metadata.format.lossless && this.metadata.format.sampleRate && this.metadata.format.numberOfChannels && this.metadata.format.bitsPerSample) {\r\n            const bitrate = this.metadata.format.sampleRate * this.metadata.format.numberOfChannels * this.metadata.format.bitsPerSample;\r\n            this.metadata.setFormat('bitrate', bitrate);\r\n        }\r\n    }\r\n    async handleChannelChunks(remainingSize) {\r\n        debug(`Parsing channel-chunks, remainingSize=${remainingSize}`);\r\n        const channels = [];\r\n        while (remainingSize >= FourCC_1.FourCcToken.len) {\r\n            const channelId = await this.tokenizer.readToken(FourCC_1.FourCcToken);\r\n            debug(`Channel[ID=${channelId}]`);\r\n            channels.push(channelId);\r\n            remainingSize -= FourCC_1.FourCcToken.len;\r\n        }\r\n        debug(`Channels: ${channels.join(', ')}`);\r\n        return channels;\r\n    }\r\n}\r\nexports.DsdiffParser = DsdiffParser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js":
/*!***************************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ChunkHeader = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\r\n/**\r\n * DSDIFF chunk header\r\n * The data-size encoding is deviating from EA-IFF 85\r\n * Ref: http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\r\n */\r\nexports.ChunkHeader = {\r\n    len: 12,\r\n    get: (buf, off) => {\r\n        return {\r\n            // Group-ID\r\n            chunkID: FourCC_1.FourCcToken.get(buf, off),\r\n            // Size\r\n            chunkSize: Token.INT64_BE.get(buf, off + 4)\r\n        };\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/dsf/DsfChunk.js":
/*!*********************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsf/DsfChunk.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.FormatChunk = exports.ChannelType = exports.DsdChunk = exports.ChunkHeader = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\r\n/**\r\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\r\n */\r\nexports.ChunkHeader = {\r\n    len: 12,\r\n    get: (buf, off) => {\r\n        return { id: FourCC_1.FourCcToken.get(buf, off), size: Token.UINT64_LE.get(buf, off + 4) };\r\n    }\r\n};\r\n/**\r\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\r\n */\r\nexports.DsdChunk = {\r\n    len: 16,\r\n    get: (buf, off) => {\r\n        return {\r\n            fileSize: Token.INT64_LE.get(buf, off),\r\n            metadataPointer: Token.INT64_LE.get(buf, off + 8)\r\n        };\r\n    }\r\n};\r\nvar ChannelType;\r\n(function (ChannelType) {\r\n    ChannelType[ChannelType[\"mono\"] = 1] = \"mono\";\r\n    ChannelType[ChannelType[\"stereo\"] = 2] = \"stereo\";\r\n    ChannelType[ChannelType[\"channels\"] = 3] = \"channels\";\r\n    ChannelType[ChannelType[\"quad\"] = 4] = \"quad\";\r\n    ChannelType[ChannelType[\"4 channels\"] = 5] = \"4 channels\";\r\n    ChannelType[ChannelType[\"5 channels\"] = 6] = \"5 channels\";\r\n    ChannelType[ChannelType[\"5.1 channels\"] = 7] = \"5.1 channels\";\r\n})(ChannelType = exports.ChannelType || (exports.ChannelType = {}));\r\n/**\r\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\r\n */\r\nexports.FormatChunk = {\r\n    len: 40,\r\n    get: (buf, off) => {\r\n        return {\r\n            formatVersion: Token.INT32_LE.get(buf, off),\r\n            formatID: Token.INT32_LE.get(buf, off + 4),\r\n            channelType: Token.INT32_LE.get(buf, off + 8),\r\n            channelNum: Token.INT32_LE.get(buf, off + 12),\r\n            samplingFrequency: Token.INT32_LE.get(buf, off + 16),\r\n            bitsPerSample: Token.INT32_LE.get(buf, off + 20),\r\n            sampleCount: Token.INT64_LE.get(buf, off + 24),\r\n            blockSizePerChannel: Token.INT32_LE.get(buf, off + 32)\r\n        };\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/dsf/DsfChunk.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/dsf/DsfParser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsf/DsfParser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DsfParser = void 0;\r\nconst AbstractID3Parser_1 = __webpack_require__(/*! ../id3v2/AbstractID3Parser */ \"./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\");\r\nconst _debug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst DsfChunk_1 = __webpack_require__(/*! ./DsfChunk */ \"./node_modules/music-metadata/lib/dsf/DsfChunk.js\");\r\nconst ID3v2Parser_1 = __webpack_require__(/*! ../id3v2/ID3v2Parser */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\r\nconst debug = _debug('music-metadata:parser:DSF');\r\n/**\r\n * DSF (dsd stream file) File Parser\r\n * Ref: https://dsd-guide.com/sites/default/files/white-papers/DSFFileFormatSpec_E.pdf\r\n */\r\nclass DsfParser extends AbstractID3Parser_1.AbstractID3Parser {\r\n    async _parse() {\r\n        const p0 = this.tokenizer.position; // mark start position, normally 0\r\n        const chunkHeader = await this.tokenizer.readToken(DsfChunk_1.ChunkHeader);\r\n        if (chunkHeader.id !== 'DSD ')\r\n            throw new Error('Invalid chunk signature');\r\n        this.metadata.setFormat('container', 'DSF');\r\n        this.metadata.setFormat('lossless', true);\r\n        const dsdChunk = await this.tokenizer.readToken(DsfChunk_1.DsdChunk);\r\n        if (dsdChunk.metadataPointer === 0) {\r\n            debug(`No ID3v2 tag present`);\r\n        }\r\n        else {\r\n            debug(`expect ID3v2 at offset=${dsdChunk.metadataPointer}`);\r\n            await this.parseChunks(dsdChunk.fileSize - chunkHeader.size);\r\n            // Jump to ID3 header\r\n            await this.tokenizer.ignore(dsdChunk.metadataPointer - this.tokenizer.position - p0);\r\n            return new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, this.tokenizer, this.options);\r\n        }\r\n    }\r\n    async parseChunks(bytesRemaining) {\r\n        while (bytesRemaining >= DsfChunk_1.ChunkHeader.len) {\r\n            const chunkHeader = await this.tokenizer.readToken(DsfChunk_1.ChunkHeader);\r\n            debug(`Parsing chunk name=${chunkHeader.id} size=${chunkHeader.size}`);\r\n            switch (chunkHeader.id) {\r\n                case 'fmt ':\r\n                    const formatChunk = await this.tokenizer.readToken(DsfChunk_1.FormatChunk);\r\n                    this.metadata.setFormat('numberOfChannels', formatChunk.channelNum);\r\n                    this.metadata.setFormat('sampleRate', formatChunk.samplingFrequency);\r\n                    this.metadata.setFormat('bitsPerSample', formatChunk.bitsPerSample);\r\n                    this.metadata.setFormat('numberOfSamples', formatChunk.sampleCount);\r\n                    this.metadata.setFormat('duration', formatChunk.sampleCount / formatChunk.samplingFrequency);\r\n                    const bitrate = formatChunk.bitsPerSample * formatChunk.samplingFrequency * formatChunk.channelNum;\r\n                    this.metadata.setFormat('bitrate', bitrate);\r\n                    return; // We got what we want, stop further processing of chunks\r\n                default:\r\n                    this.tokenizer.ignore(chunkHeader.size - DsfChunk_1.ChunkHeader.len);\r\n                    break;\r\n            }\r\n            bytesRemaining -= chunkHeader.size;\r\n        }\r\n    }\r\n}\r\nexports.DsfParser = DsfParser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/dsf/DsfParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/flac/FlacParser.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/flac/FlacParser.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.FlacParser = void 0;\r\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst Vorbis_1 = __webpack_require__(/*! ../ogg/vorbis/Vorbis */ \"./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js\");\r\nconst AbstractID3Parser_1 = __webpack_require__(/*! ../id3v2/AbstractID3Parser */ \"./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\");\r\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\r\nconst _debug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst VorbisParser_1 = __webpack_require__(/*! ../ogg/vorbis/VorbisParser */ \"./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js\");\r\nconst VorbisDecoder_1 = __webpack_require__(/*! ../ogg/vorbis/VorbisDecoder */ \"./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js\");\r\nconst debug = _debug('music-metadata:parser:FLAC');\r\n/**\r\n * FLAC supports up to 128 kinds of metadata blocks; currently the following are defined:\r\n * ref: https://xiph.org/flac/format.html#metadata_block\r\n */\r\nvar BlockType;\r\n(function (BlockType) {\r\n    BlockType[BlockType[\"STREAMINFO\"] = 0] = \"STREAMINFO\";\r\n    BlockType[BlockType[\"PADDING\"] = 1] = \"PADDING\";\r\n    BlockType[BlockType[\"APPLICATION\"] = 2] = \"APPLICATION\";\r\n    BlockType[BlockType[\"SEEKTABLE\"] = 3] = \"SEEKTABLE\";\r\n    BlockType[BlockType[\"VORBIS_COMMENT\"] = 4] = \"VORBIS_COMMENT\";\r\n    BlockType[BlockType[\"CUESHEET\"] = 5] = \"CUESHEET\";\r\n    BlockType[BlockType[\"PICTURE\"] = 6] = \"PICTURE\";\r\n})(BlockType || (BlockType = {}));\r\nclass FlacParser extends AbstractID3Parser_1.AbstractID3Parser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.padding = 0;\r\n    }\r\n    /**\r\n     * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).\r\n     * @param {INativeMetadataCollector} metadata Output\r\n     * @param {ITokenizer} tokenizer Input\r\n     * @param {IOptions} options Parsing options\r\n     */\r\n    init(metadata, tokenizer, options) {\r\n        super.init(metadata, tokenizer, options);\r\n        this.vorbisParser = new VorbisParser_1.VorbisParser(metadata, options);\r\n        return this;\r\n    }\r\n    async _parse() {\r\n        const fourCC = await this.tokenizer.readToken(FourCC_1.FourCcToken);\r\n        if (fourCC.toString() !== 'fLaC') {\r\n            throw new Error('Invalid FLAC preamble');\r\n        }\r\n        let blockHeader;\r\n        do {\r\n            // Read block header\r\n            blockHeader = await this.tokenizer.readToken(Metadata.BlockHeader);\r\n            // Parse block data\r\n            await this.parseDataBlock(blockHeader);\r\n        } while (!blockHeader.lastBlock);\r\n        if (this.tokenizer.fileInfo.size && this.metadata.format.duration) {\r\n            const dataSize = this.tokenizer.fileInfo.size - this.tokenizer.position;\r\n            this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\r\n        }\r\n    }\r\n    parseDataBlock(blockHeader) {\r\n        debug(`blockHeader type=${blockHeader.type}, length=${blockHeader.length}`);\r\n        switch (blockHeader.type) {\r\n            case BlockType.STREAMINFO:\r\n                return this.parseBlockStreamInfo(blockHeader.length);\r\n            case BlockType.PADDING:\r\n                this.padding += blockHeader.length;\r\n                break;\r\n            case BlockType.APPLICATION:\r\n                break;\r\n            case BlockType.SEEKTABLE:\r\n                break;\r\n            case BlockType.VORBIS_COMMENT:\r\n                return this.parseComment(blockHeader.length);\r\n            case BlockType.CUESHEET:\r\n                break;\r\n            case BlockType.PICTURE:\r\n                return this.parsePicture(blockHeader.length).then();\r\n            default:\r\n                this.metadata.addWarning('Unknown block type: ' + blockHeader.type);\r\n        }\r\n        // Ignore data block\r\n        return this.tokenizer.ignore(blockHeader.length).then();\r\n    }\r\n    /**\r\n     * Parse STREAMINFO\r\n     */\r\n    async parseBlockStreamInfo(dataLen) {\r\n        if (dataLen !== Metadata.BlockStreamInfo.len)\r\n            throw new Error('Unexpected block-stream-info length');\r\n        const streamInfo = await this.tokenizer.readToken(Metadata.BlockStreamInfo);\r\n        this.metadata.setFormat('container', 'FLAC');\r\n        this.metadata.setFormat('codec', 'FLAC');\r\n        this.metadata.setFormat('lossless', true);\r\n        this.metadata.setFormat('numberOfChannels', streamInfo.channels);\r\n        this.metadata.setFormat('bitsPerSample', streamInfo.bitsPerSample);\r\n        this.metadata.setFormat('sampleRate', streamInfo.sampleRate);\r\n        if (streamInfo.totalSamples > 0) {\r\n            this.metadata.setFormat('duration', streamInfo.totalSamples / streamInfo.sampleRate);\r\n        }\r\n    }\r\n    /**\r\n     * Parse VORBIS_COMMENT\r\n     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3\r\n     */\r\n    async parseComment(dataLen) {\r\n        const data = await this.tokenizer.readToken(new Token.BufferType(dataLen));\r\n        const decoder = new VorbisDecoder_1.VorbisDecoder(data, 0);\r\n        decoder.readStringUtf8(); // vendor (skip)\r\n        const commentListLength = decoder.readInt32();\r\n        for (let i = 0; i < commentListLength; i++) {\r\n            const tag = decoder.parseUserComment();\r\n            this.vorbisParser.addTag(tag.key, tag.value);\r\n        }\r\n    }\r\n    async parsePicture(dataLen) {\r\n        if (this.options.skipCovers) {\r\n            return this.tokenizer.ignore(dataLen);\r\n        }\r\n        else {\r\n            const picture = await this.tokenizer.readToken(new Vorbis_1.VorbisPictureToken(dataLen));\r\n            this.vorbisParser.addTag('METADATA_BLOCK_PICTURE', picture);\r\n        }\r\n    }\r\n}\r\nexports.FlacParser = FlacParser;\r\nclass Metadata {\r\n}\r\nMetadata.BlockHeader = {\r\n    len: 4,\r\n    get: (buf, off) => {\r\n        return {\r\n            lastBlock: Util_1.default.strtokBITSET.get(buf, off, 7),\r\n            type: Util_1.default.getBitAllignedNumber(buf, off, 1, 7),\r\n            length: Token.UINT24_BE.get(buf, off + 1)\r\n        };\r\n    }\r\n};\r\n/**\r\n * METADATA_BLOCK_DATA\r\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\r\n */\r\nMetadata.BlockStreamInfo = {\r\n    len: 34,\r\n    get: (buf, off) => {\r\n        return {\r\n            // The minimum block size (in samples) used in the stream.\r\n            minimumBlockSize: Token.UINT16_BE.get(buf, off),\r\n            // The maximum block size (in samples) used in the stream.\r\n            // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\r\n            maximumBlockSize: Token.UINT16_BE.get(buf, off + 2) / 1000,\r\n            // The minimum frame size (in bytes) used in the stream.\r\n            // May be 0 to imply the value is not known.\r\n            minimumFrameSize: Token.UINT24_BE.get(buf, off + 4),\r\n            // The maximum frame size (in bytes) used in the stream.\r\n            // May be 0 to imply the value is not known.\r\n            maximumFrameSize: Token.UINT24_BE.get(buf, off + 7),\r\n            // Sample rate in Hz. Though 20 bits are available,\r\n            // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\r\n            // Also, a value of 0 is invalid.\r\n            sampleRate: Token.UINT24_BE.get(buf, off + 10) >> 4,\r\n            // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\r\n            // (number of channels)-1. FLAC supports from 1 to 8 channels\r\n            channels: Util_1.default.getBitAllignedNumber(buf, off + 12, 4, 3) + 1,\r\n            // bits per sample)-1.\r\n            // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\r\n            bitsPerSample: Util_1.default.getBitAllignedNumber(buf, off + 12, 7, 5) + 1,\r\n            // Total samples in stream.\r\n            // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\r\n            // A value of zero here means the number of total samples is unknown.\r\n            totalSamples: Util_1.default.getBitAllignedNumber(buf, off + 13, 4, 36),\r\n            // the MD5 hash of the file (see notes for usage... it's a littly tricky)\r\n            fileMD5: new Token.BufferType(16).get(buf, off + 18)\r\n        };\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/flac/FlacParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.hasID3v1Header = exports.ID3v1Parser = exports.Genres = void 0;\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\r\nconst APEv2Parser_1 = __webpack_require__(/*! ../apev2/APEv2Parser */ \"./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\r\nconst debug = initDebug('music-metadata:parser:ID3v1');\r\n/**\r\n * ID3v1 Genre mappings\r\n * Ref: https://de.wikipedia.org/wiki/Liste_der_ID3v1-Genres\r\n */\r\nexports.Genres = [\r\n    \"Blues\", \"Classic Rock\", \"Country\", \"Dance\", \"Disco\", \"Funk\", \"Grunge\", \"Hip-Hop\",\r\n    \"Jazz\", \"Metal\", \"New Age\", \"Oldies\", \"Other\", \"Pop\", \"R&B\", \"Rap\", \"Reggae\", \"Rock\",\r\n    \"Techno\", \"Industrial\", \"Alternative\", \"Ska\", \"Death Metal\", \"Pranks\", \"Soundtrack\",\r\n    \"Euro-Techno\", \"Ambient\", \"Trip-Hop\", \"Vocal\", \"Jazz+Funk\", \"Fusion\", \"Trance\",\r\n    \"Classical\", \"Instrumental\", \"Acid\", \"House\", \"Game\", \"Sound Clip\", \"Gospel\", \"Noise\",\r\n    \"Alt. Rock\", \"Bass\", \"Soul\", \"Punk\", \"Space\", \"Meditative\", \"Instrumental Pop\",\r\n    \"Instrumental Rock\", \"Ethnic\", \"Gothic\", \"Darkwave\", \"Techno-Industrial\",\r\n    \"Electronic\", \"Pop-Folk\", \"Eurodance\", \"Dream\", \"Southern Rock\", \"Comedy\", \"Cult\",\r\n    \"Gangsta Rap\", \"Top 40\", \"Christian Rap\", \"Pop/Funk\", \"Jungle\", \"Native American\",\r\n    \"Cabaret\", \"New Wave\", \"Psychedelic\", \"Rave\", \"Showtunes\", \"Trailer\", \"Lo-Fi\", \"Tribal\",\r\n    \"Acid Punk\", \"Acid Jazz\", \"Polka\", \"Retro\", \"Musical\", \"Rock & Roll\", \"Hard Rock\",\r\n    \"Folk\", \"Folk/Rock\", \"National Folk\", \"Swing\", \"Fast-Fusion\", \"Bebob\", \"Latin\", \"Revival\",\r\n    \"Celtic\", \"Bluegrass\", \"Avantgarde\", \"Gothic Rock\", \"Progressive Rock\", \"Psychedelic Rock\",\r\n    \"Symphonic Rock\", \"Slow Rock\", \"Big Band\", \"Chorus\", \"Easy Listening\", \"Acoustic\", \"Humour\",\r\n    \"Speech\", \"Chanson\", \"Opera\", \"Chamber Music\", \"Sonata\", \"Symphony\", \"Booty Bass\", \"Primus\",\r\n    \"Porn Groove\", \"Satire\", \"Slow Jam\", \"Club\", \"Tango\", \"Samba\", \"Folklore\",\r\n    \"Ballad\", \"Power Ballad\", \"Rhythmic Soul\", \"Freestyle\", \"Duet\", \"Punk Rock\", \"Drum Solo\",\r\n    \"A Cappella\", \"Euro-House\", \"Dance Hall\", \"Goa\", \"Drum & Bass\", \"Club-House\",\r\n    \"Hardcore\", \"Terror\", \"Indie\", \"BritPop\", \"Negerpunk\", \"Polsk Punk\", \"Beat\",\r\n    \"Christian Gangsta Rap\", \"Heavy Metal\", \"Black Metal\", \"Crossover\", \"Contemporary Christian\",\r\n    \"Christian Rock\", \"Merengue\", \"Salsa\", \"Thrash Metal\", \"Anime\", \"JPop\", \"Synthpop\",\r\n    \"Abstract\", \"Art Rock\", \"Baroque\", \"Bhangra\", \"Big Beat\", \"Breakbeat\", \"Chillout\",\r\n    \"Downtempo\", \"Dub\", \"EBM\", \"Eclectic\", \"Electro\", \"Electroclash\", \"Emo\", \"Experimental\",\r\n    \"Garage\", \"Global\", \"IDM\", \"Illbient\", \"Industro-Goth\", \"Jam Band\", \"Krautrock\",\r\n    \"Leftfield\", \"Lounge\", \"Math Rock\", \"New Romantic\", \"Nu-Breakz\", \"Post-Punk\", \"Post-Rock\",\r\n    \"Psytrance\", \"Shoegaze\", \"Space Rock\", \"Trop Rock\", \"World Music\", \"Neoclassical\", \"Audiobook\",\r\n    \"Audio Theatre\", \"Neue Deutsche Welle\", \"Podcast\", \"Indie Rock\", \"G-Funk\", \"Dubstep\",\r\n    \"Garage Rock\", \"Psybient\"\r\n];\r\n/**\r\n * Spec: http://id3.org/ID3v1\r\n * Wiki: https://en.wikipedia.org/wiki/ID3\r\n */\r\nconst Iid3v1Token = {\r\n    len: 128,\r\n    /**\r\n     * @param buf Buffer possibly holding the 128 bytes ID3v1.1 metadata header\r\n     * @param off Offset in buffer in bytes\r\n     * @returns ID3v1.1 header if first 3 bytes equals 'TAG', otherwise null is returned\r\n     */\r\n    get: (buf, off) => {\r\n        const header = new Id3v1StringType(3).get(buf, off);\r\n        return header === \"TAG\" ? {\r\n            header,\r\n            title: new Id3v1StringType(30).get(buf, off + 3),\r\n            artist: new Id3v1StringType(30).get(buf, off + 33),\r\n            album: new Id3v1StringType(30).get(buf, off + 63),\r\n            year: new Id3v1StringType(4).get(buf, off + 93),\r\n            comment: new Id3v1StringType(28).get(buf, off + 97),\r\n            // ID3v1.1 separator for track\r\n            zeroByte: Token.UINT8.get(buf, off + 127),\r\n            // track: ID3v1.1 field added by Michael Mutschler\r\n            track: Token.UINT8.get(buf, off + 126),\r\n            genre: Token.UINT8.get(buf, off + 127)\r\n        } : null;\r\n    }\r\n};\r\nclass Id3v1StringType extends Token.StringType {\r\n    constructor(len) {\r\n        super(len, \"binary\");\r\n    }\r\n    get(buf, off) {\r\n        let value = super.get(buf, off);\r\n        value = Util_1.default.trimRightNull(value);\r\n        value = value.trim();\r\n        return value.length > 0 ? value : undefined;\r\n    }\r\n}\r\nclass ID3v1Parser extends BasicParser_1.BasicParser {\r\n    static getGenre(genreIndex) {\r\n        if (genreIndex < exports.Genres.length) {\r\n            return exports.Genres[genreIndex];\r\n        }\r\n        return undefined; // ToDO: generate warning\r\n    }\r\n    async parse() {\r\n        if (!this.tokenizer.fileInfo.size) {\r\n            debug('Skip checking for ID3v1 because the file-size is unknown');\r\n            return;\r\n        }\r\n        if (this.options.apeHeader) {\r\n            this.tokenizer.ignore(this.options.apeHeader.offset - this.tokenizer.position);\r\n            const apeParser = new APEv2Parser_1.APEv2Parser();\r\n            apeParser.init(this.metadata, this.tokenizer, this.options);\r\n            await apeParser.parseTags(this.options.apeHeader.footer);\r\n        }\r\n        const offset = this.tokenizer.fileInfo.size - Iid3v1Token.len;\r\n        if (this.tokenizer.position > offset) {\r\n            debug('Already consumed the last 128 bytes');\r\n            return;\r\n        }\r\n        const header = await this.tokenizer.readToken(Iid3v1Token, offset);\r\n        if (header) {\r\n            debug(\"ID3v1 header found at: pos=%s\", this.tokenizer.fileInfo.size - Iid3v1Token.len);\r\n            for (const id of [\"title\", \"artist\", \"album\", \"comment\", \"track\", \"year\"]) {\r\n                if (header[id] && header[id] !== \"\")\r\n                    this.addTag(id, header[id]);\r\n            }\r\n            const genre = ID3v1Parser.getGenre(header.genre);\r\n            if (genre)\r\n                this.addTag('genre', genre);\r\n        }\r\n        else {\r\n            debug(\"ID3v1 header not found at: pos=%s\", this.tokenizer.fileInfo.size - Iid3v1Token.len);\r\n        }\r\n    }\r\n    addTag(id, value) {\r\n        this.metadata.addTag('ID3v1', id, value);\r\n    }\r\n}\r\nexports.ID3v1Parser = ID3v1Parser;\r\nasync function hasID3v1Header(reader) {\r\n    if (reader.fileSize >= 128) {\r\n        const tag = Buffer.alloc(3);\r\n        await reader.randomRead(tag, 0, tag.length, reader.fileSize - 128);\r\n        return tag.toString('binary') === 'TAG';\r\n    }\r\n    return false;\r\n}\r\nexports.hasID3v1Header = hasID3v1Header;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v1/ID3v1TagMap.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v1/ID3v1TagMap.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ID3v1TagMapper = void 0;\r\nconst GenericTagMapper_1 = __webpack_require__(/*! ../common/GenericTagMapper */ \"./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\r\n/**\r\n * ID3v1 tag mappings\r\n */\r\nconst id3v1TagMap = {\r\n    title: 'title',\r\n    artist: 'artist',\r\n    album: 'album',\r\n    year: 'year',\r\n    comment: 'comment',\r\n    track: 'track',\r\n    genre: 'genre'\r\n};\r\nclass ID3v1TagMapper extends GenericTagMapper_1.CommonTagMapper {\r\n    constructor() {\r\n        super(['ID3v1'], id3v1TagMap);\r\n    }\r\n}\r\nexports.ID3v1TagMapper = ID3v1TagMapper;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/id3v1/ID3v1TagMap.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AbstractID3Parser = void 0;\r\nconst core_1 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\r\nconst ID3v2Token_1 = __webpack_require__(/*! ./ID3v2Token */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\r\nconst ID3v2Parser_1 = __webpack_require__(/*! ./ID3v2Parser */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\r\nconst ID3v1Parser_1 = __webpack_require__(/*! ../id3v1/ID3v1Parser */ \"./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\r\nconst _debug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\r\nconst debug = _debug('music-metadata:parser:ID3');\r\n/**\r\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\r\n */\r\nclass AbstractID3Parser extends BasicParser_1.BasicParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.id3parser = new ID3v2Parser_1.ID3v2Parser();\r\n    }\r\n    static async startsWithID3v2Header(tokenizer) {\r\n        return (await tokenizer.peekToken(ID3v2Token_1.ID3v2Header)).fileIdentifier === 'ID3';\r\n    }\r\n    async parse() {\r\n        try {\r\n            await this.parseID3v2();\r\n        }\r\n        catch (err) {\r\n            if (err instanceof core_1.EndOfStreamError) {\r\n                debug(`End-of-stream`);\r\n            }\r\n            else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n    finalize() {\r\n        return;\r\n    }\r\n    async parseID3v2() {\r\n        await this.tryReadId3v2Headers();\r\n        debug(\"End of ID3v2 header, go to MPEG-parser: pos=%s\", this.tokenizer.position);\r\n        await this._parse();\r\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\r\n            this.finalize();\r\n        }\r\n        else {\r\n            const id3v1parser = new ID3v1Parser_1.ID3v1Parser();\r\n            await id3v1parser.init(this.metadata, this.tokenizer, this.options).parse();\r\n            this.finalize();\r\n        }\r\n    }\r\n    async tryReadId3v2Headers() {\r\n        const id3Header = await this.tokenizer.peekToken(ID3v2Token_1.ID3v2Header);\r\n        if (id3Header.fileIdentifier === \"ID3\") {\r\n            debug(\"Found ID3v2 header, pos=%s\", this.tokenizer.position);\r\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\r\n            return this.tryReadId3v2Headers();\r\n        }\r\n    }\r\n}\r\nexports.AbstractID3Parser = AbstractID3Parser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v2/FrameParser.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/FrameParser.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.FrameParser = exports.parseGenre = void 0;\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst ID3v2Token_1 = __webpack_require__(/*! ./ID3v2Token */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\r\nconst ID3v1Parser_1 = __webpack_require__(/*! ../id3v1/ID3v1Parser */ \"./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\r\nconst debug = initDebug('music-metadata:id3v2:frame-parser');\r\nconst defaultEnc = 'iso-8859-1';\r\nfunction parseGenre(origVal) {\r\n    // match everything inside parentheses\r\n    const genres = [];\r\n    let code;\r\n    let word = '';\r\n    for (const c of origVal) {\r\n        if (typeof code === 'string') {\r\n            if (c === '(' && code === '') {\r\n                word += '(';\r\n                code = undefined;\r\n            }\r\n            else if (c === ')') {\r\n                if (word !== '') {\r\n                    genres.push(word);\r\n                    word = '';\r\n                }\r\n                const genre = parseGenreCode(code);\r\n                if (genre) {\r\n                    genres.push(genre);\r\n                }\r\n                code = undefined;\r\n            }\r\n            else\r\n                code += c;\r\n        }\r\n        else if (c === '(') {\r\n            code = '';\r\n        }\r\n        else {\r\n            word += c;\r\n        }\r\n    }\r\n    if (word) {\r\n        if (genres.length === 0 && word.match(/^\\d*$/)) {\r\n            word = ID3v1Parser_1.Genres[word];\r\n        }\r\n        genres.push(word);\r\n    }\r\n    return genres;\r\n}\r\nexports.parseGenre = parseGenre;\r\nfunction parseGenreCode(code) {\r\n    if (code === 'RX')\r\n        return 'Remix';\r\n    if (code === 'CR')\r\n        return 'Cover';\r\n    if (code.match(/^\\d*$/)) {\r\n        return ID3v1Parser_1.Genres[code];\r\n    }\r\n}\r\nclass FrameParser {\r\n    /**\r\n     * Create id3v2 frame parser\r\n     * @param major - Major version, e.g. (4) for  id3v2.4\r\n     * @param warningCollector - Used to collect decode issue\r\n     */\r\n    constructor(major, warningCollector) {\r\n        this.major = major;\r\n        this.warningCollector = warningCollector;\r\n    }\r\n    readData(b, type, includeCovers) {\r\n        if (b.length === 0) {\r\n            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\r\n            return;\r\n        }\r\n        const { encoding, bom } = ID3v2Token_1.TextEncodingToken.get(b, 0);\r\n        const length = b.length;\r\n        let offset = 0;\r\n        let output = []; // ToDo\r\n        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\r\n        let fzero;\r\n        const out = {};\r\n        debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\r\n        switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\r\n            case 'T*': // 4.2.1. Text information frames - details\r\n            case 'IPLS': // v2.3: Involved people list\r\n            case 'MVIN':\r\n            case 'MVNM':\r\n            case 'PCS':\r\n            case 'PCST':\r\n                const text = Util_1.default.decodeString(b.slice(1), encoding).replace(/\\x00+$/, '');\r\n                switch (type) {\r\n                    case 'TMCL': // Musician credits list\r\n                    case 'TIPL': // Involved people list\r\n                    case 'IPLS': // Involved people list\r\n                        output = this.splitValue(type, text);\r\n                        output = FrameParser.functionList(output);\r\n                        break;\r\n                    case 'TRK':\r\n                    case 'TRCK':\r\n                    case 'TPOS':\r\n                        output = text;\r\n                        break;\r\n                    case 'TCOM':\r\n                    case 'TEXT':\r\n                    case 'TOLY':\r\n                    case 'TOPE':\r\n                    case 'TPE1':\r\n                    case 'TSRC':\r\n                        // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\r\n                        output = this.splitValue(type, text);\r\n                        break;\r\n                    case 'TCO':\r\n                    case 'TCON':\r\n                        output = this.splitValue(type, text).map(v => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);\r\n                        break;\r\n                    case 'PCS':\r\n                    case 'PCST':\r\n                        // TODO: Why `default` not results `1` but `''`?\r\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\r\n                        output = (Array.isArray(output) && output[0] === '') ? 1 : 0;\r\n                        break;\r\n                    default:\r\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\r\n                }\r\n                break;\r\n            case 'TXXX':\r\n                output = FrameParser.readIdentifierAndData(b, offset + 1, length, encoding);\r\n                output = {\r\n                    description: output.id,\r\n                    text: this.splitValue(type, Util_1.default.decodeString(output.data, encoding).replace(/\\x00+$/, ''))\r\n                };\r\n                break;\r\n            case 'PIC':\r\n            case 'APIC':\r\n                if (includeCovers) {\r\n                    const pic = {};\r\n                    offset += 1;\r\n                    switch (this.major) {\r\n                        case 2:\r\n                            pic.format = Util_1.default.decodeString(b.slice(offset, offset + 3), 'iso-8859-1');\r\n                            offset += 3;\r\n                            break;\r\n                        case 3:\r\n                        case 4:\r\n                            fzero = Util_1.default.findZero(b, offset, length, defaultEnc);\r\n                            pic.format = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\r\n                            offset = fzero + 1;\r\n                            break;\r\n                        default:\r\n                            throw new Error('Warning: unexpected major versionIndex: ' + this.major);\r\n                    }\r\n                    pic.format = FrameParser.fixPictureMimeType(pic.format);\r\n                    pic.type = ID3v2Token_1.AttachedPictureType[b[offset]];\r\n                    offset += 1;\r\n                    fzero = Util_1.default.findZero(b, offset, length, encoding);\r\n                    pic.description = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\r\n                    offset = fzero + nullTerminatorLength;\r\n                    pic.data = Buffer.from(b.slice(offset, length));\r\n                    output = pic;\r\n                }\r\n                break;\r\n            case 'CNT':\r\n            case 'PCNT':\r\n                output = Token.UINT32_BE.get(b, 0);\r\n                break;\r\n            case 'SYLT':\r\n                // skip text encoding (1 byte),\r\n                //      language (3 bytes),\r\n                //      time stamp format (1 byte),\r\n                //      content tagTypes (1 byte),\r\n                //      content descriptor (1 byte)\r\n                offset += 7;\r\n                output = [];\r\n                while (offset < length) {\r\n                    const txt = b.slice(offset, offset = Util_1.default.findZero(b, offset, length, encoding));\r\n                    offset += 5; // push offset forward one +  4 byte timestamp\r\n                    output.push(Util_1.default.decodeString(txt, encoding));\r\n                }\r\n                break;\r\n            case 'ULT':\r\n            case 'USLT':\r\n            case 'COM':\r\n            case 'COMM':\r\n                offset += 1;\r\n                out.language = Util_1.default.decodeString(b.slice(offset, offset + 3), defaultEnc);\r\n                offset += 3;\r\n                fzero = Util_1.default.findZero(b, offset, length, encoding);\r\n                out.description = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\r\n                offset = fzero + nullTerminatorLength;\r\n                out.text = Util_1.default.decodeString(b.slice(offset, length), encoding).replace(/\\x00+$/, '');\r\n                output = [out];\r\n                break;\r\n            case 'UFID':\r\n                output = FrameParser.readIdentifierAndData(b, offset, length, defaultEnc);\r\n                output = { owner_identifier: output.id, identifier: output.data };\r\n                break;\r\n            case 'PRIV': // private frame\r\n                output = FrameParser.readIdentifierAndData(b, offset, length, defaultEnc);\r\n                output = { owner_identifier: output.id, data: output.data };\r\n                break;\r\n            case 'POPM': // Popularimeter\r\n                fzero = Util_1.default.findZero(b, offset, length, defaultEnc);\r\n                const email = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\r\n                offset = fzero + 1;\r\n                const dataLen = length - offset;\r\n                output = {\r\n                    email,\r\n                    rating: b.readUInt8(offset),\r\n                    counter: dataLen >= 5 ? b.readUInt32BE(offset + 1) : undefined\r\n                };\r\n                break;\r\n            case 'GEOB': { // General encapsulated object\r\n                fzero = Util_1.default.findZero(b, offset + 1, length, encoding);\r\n                const mimeType = Util_1.default.decodeString(b.slice(offset + 1, fzero), defaultEnc);\r\n                offset = fzero + 1;\r\n                fzero = Util_1.default.findZero(b, offset, length - offset, encoding);\r\n                const filename = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\r\n                offset = fzero + 1;\r\n                fzero = Util_1.default.findZero(b, offset, length - offset, encoding);\r\n                const description = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\r\n                output = {\r\n                    type: mimeType,\r\n                    filename,\r\n                    description,\r\n                    data: b.slice(offset + 1, length)\r\n                };\r\n                break;\r\n            }\r\n            // W-Frames:\r\n            case 'WCOM':\r\n            case 'WCOP':\r\n            case 'WOAF':\r\n            case 'WOAR':\r\n            case 'WOAS':\r\n            case 'WORS':\r\n            case 'WPAY':\r\n            case 'WPUB':\r\n                // Decode URL\r\n                output = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\r\n                break;\r\n            case 'WXXX': {\r\n                // Decode URL\r\n                fzero = Util_1.default.findZero(b, offset + 1, length, encoding);\r\n                const description = Util_1.default.decodeString(b.slice(offset + 1, fzero), encoding);\r\n                offset = fzero + (encoding === 'utf16' ? 2 : 1);\r\n                output = { description, url: Util_1.default.decodeString(b.slice(offset, length), defaultEnc) };\r\n                break;\r\n            }\r\n            case 'WFD':\r\n            case 'WFED':\r\n                output = Util_1.default.decodeString(b.slice(offset + 1, Util_1.default.findZero(b, offset + 1, length, encoding)), encoding);\r\n                break;\r\n            case 'MCDI': {\r\n                // Music CD identifier\r\n                output = b.slice(0, length);\r\n                break;\r\n            }\r\n            default:\r\n                debug('Warning: unsupported id3v2-tag-type: ' + type);\r\n                break;\r\n        }\r\n        return output;\r\n    }\r\n    static fixPictureMimeType(pictureType) {\r\n        pictureType = pictureType.toLocaleLowerCase();\r\n        switch (pictureType) {\r\n            case 'jpg':\r\n                return 'image/jpeg';\r\n            case 'png':\r\n                return 'image/png';\r\n        }\r\n        return pictureType;\r\n    }\r\n    /**\r\n     * Converts TMCL (Musician credits list) or TIPL (Involved people list)\r\n     * @param entries\r\n     */\r\n    static functionList(entries) {\r\n        const res = {};\r\n        for (let i = 0; i + 1 < entries.length; i += 2) {\r\n            const names = entries[i + 1].split(',');\r\n            res[entries[i]] = res.hasOwnProperty(entries[i]) ? res[entries[i]].concat(names) : names;\r\n        }\r\n        return res;\r\n    }\r\n    /**\r\n     * id3v2.4 defines that multiple T* values are separated by 0x00\r\n     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\r\n     * @param tag - Tag name\r\n     * @param text - Concatenated tag value\r\n     * @returns Split tag value\r\n     */\r\n    splitValue(tag, text) {\r\n        let values;\r\n        if (this.major < 4) {\r\n            values = text.split(/\\x00/g);\r\n            if (values.length > 1) {\r\n                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\r\n            }\r\n            else {\r\n                values = text.split(/\\//g);\r\n            }\r\n        }\r\n        else {\r\n            values = text.split(/\\x00/g);\r\n        }\r\n        return FrameParser.trimArray(values);\r\n    }\r\n    static trimArray(values) {\r\n        return values.map(value => value.replace(/\\x00+$/, '').trim());\r\n    }\r\n    static readIdentifierAndData(b, offset, length, encoding) {\r\n        const fzero = Util_1.default.findZero(b, offset, length, encoding);\r\n        const id = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\r\n        offset = fzero + FrameParser.getNullTerminatorLength(encoding);\r\n        return { id, data: b.slice(offset, length) };\r\n    }\r\n    static getNullTerminatorLength(enc) {\r\n        return enc === 'utf16' ? 2 : 1;\r\n    }\r\n}\r\nexports.FrameParser = FrameParser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/id3v2/FrameParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v2/ID3v22TagMapper.js":
/*!******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/ID3v22TagMapper.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ID3v22TagMapper = exports.id3v22TagMap = void 0;\r\nconst CaseInsensitiveTagMap_1 = __webpack_require__(/*! ../common/CaseInsensitiveTagMap */ \"./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\");\r\n/**\r\n * ID3v2.2 tag mappings\r\n */\r\nexports.id3v22TagMap = {\r\n    TT2: 'title',\r\n    TP1: 'artist',\r\n    TP2: 'albumartist',\r\n    TAL: 'album',\r\n    TYE: 'year',\r\n    COM: 'comment',\r\n    TRK: 'track',\r\n    TPA: 'disk',\r\n    TCO: 'genre',\r\n    PIC: 'picture',\r\n    TCM: 'composer',\r\n    TOR: 'originaldate',\r\n    TOT: 'originalalbum',\r\n    TXT: 'lyricist',\r\n    TP3: 'conductor',\r\n    TPB: 'label',\r\n    TT1: 'grouping',\r\n    TT3: 'subtitle',\r\n    TLA: 'language',\r\n    TCR: 'copyright',\r\n    WCP: 'license',\r\n    TEN: 'encodedby',\r\n    TSS: 'encodersettings',\r\n    WAR: 'website',\r\n    'COM:iTunPGAP': 'gapless'\r\n    /* ToDo: iTunes tags:\r\n    'COM:iTunNORM': ,\r\n    'COM:iTunSMPB': 'encoder delay',\r\n    'COM:iTunes_CDDB_IDs'\r\n    */ ,\r\n    PCS: 'podcast',\r\n    TCP: \"compilation\",\r\n    TDR: 'date',\r\n    TS2: 'albumartistsort',\r\n    TSA: 'albumsort',\r\n    TSC: 'composersort',\r\n    TSP: 'artistsort',\r\n    TST: 'titlesort',\r\n    WFD: 'podcasturl'\r\n};\r\nclass ID3v22TagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {\r\n    constructor() {\r\n        super(['ID3v2.2'], exports.id3v22TagMap);\r\n    }\r\n}\r\nexports.ID3v22TagMapper = ID3v22TagMapper;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/id3v2/ID3v22TagMapper.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v2/ID3v24TagMapper.js":
/*!******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/ID3v24TagMapper.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ID3v24TagMapper = void 0;\r\nconst GenericTagMapper_1 = __webpack_require__(/*! ../common/GenericTagMapper */ \"./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\r\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst CaseInsensitiveTagMap_1 = __webpack_require__(/*! ../common/CaseInsensitiveTagMap */ \"./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\");\r\n/**\r\n * ID3v2.3/ID3v2.4 tag mappings\r\n */\r\nconst id3v24TagMap = {\r\n    // id3v2.3\r\n    TIT2: 'title',\r\n    TPE1: 'artist',\r\n    'TXXX:Artists': 'artists',\r\n    TPE2: 'albumartist',\r\n    TALB: 'album',\r\n    TDRV: 'date',\r\n    /**\r\n     * Original release year\r\n     */\r\n    TORY: 'originalyear',\r\n    TPOS: 'disk',\r\n    TCON: 'genre',\r\n    APIC: 'picture',\r\n    TCOM: 'composer',\r\n    'USLT:description': 'lyrics',\r\n    TSOA: 'albumsort',\r\n    TSOT: 'titlesort',\r\n    TOAL: 'originalalbum',\r\n    TSOP: 'artistsort',\r\n    TSO2: 'albumartistsort',\r\n    TSOC: 'composersort',\r\n    TEXT: 'lyricist',\r\n    'TXXX:Writer': 'writer',\r\n    TPE3: 'conductor',\r\n    // 'IPLS:instrument': 'performer:instrument', // ToDo\r\n    TPE4: 'remixer',\r\n    'IPLS:arranger': 'arranger',\r\n    'IPLS:engineer': 'engineer',\r\n    'IPLS:producer': 'producer',\r\n    'IPLS:DJ-mix': 'djmixer',\r\n    'IPLS:mix': 'mixer',\r\n    TPUB: 'label',\r\n    TIT1: 'grouping',\r\n    TIT3: 'subtitle',\r\n    TRCK: 'track',\r\n    TCMP: 'compilation',\r\n    POPM: 'rating',\r\n    TBPM: 'bpm',\r\n    TMED: 'media',\r\n    'TXXX:CATALOGNUMBER': 'catalognumber',\r\n    'TXXX:MusicBrainz Album Status': 'releasestatus',\r\n    'TXXX:MusicBrainz Album Type': 'releasetype',\r\n    /**\r\n     * Release country as documented: https://picard.musicbrainz.org/docs/mappings/#cite_note-0\r\n     */\r\n    'TXXX:MusicBrainz Album Release Country': 'releasecountry',\r\n    /**\r\n     * Release country as implemented // ToDo: report\r\n     */\r\n    'TXXX:RELEASECOUNTRY': 'releasecountry',\r\n    'TXXX:SCRIPT': 'script',\r\n    TLAN: 'language',\r\n    TCOP: 'copyright',\r\n    WCOP: 'license',\r\n    TENC: 'encodedby',\r\n    TSSE: 'encodersettings',\r\n    'TXXX:BARCODE': 'barcode',\r\n    'TXXX:ISRC': 'isrc',\r\n    TSRC: 'isrc',\r\n    'TXXX:ASIN': 'asin',\r\n    'TXXX:originalyear': 'originalyear',\r\n    'UFID:http://musicbrainz.org': 'musicbrainz_recordingid',\r\n    'TXXX:MusicBrainz Release Track Id': 'musicbrainz_trackid',\r\n    'TXXX:MusicBrainz Album Id': 'musicbrainz_albumid',\r\n    'TXXX:MusicBrainz Artist Id': 'musicbrainz_artistid',\r\n    'TXXX:MusicBrainz Album Artist Id': 'musicbrainz_albumartistid',\r\n    'TXXX:MusicBrainz Release Group Id': 'musicbrainz_releasegroupid',\r\n    'TXXX:MusicBrainz Work Id': 'musicbrainz_workid',\r\n    'TXXX:MusicBrainz TRM Id': 'musicbrainz_trmid',\r\n    'TXXX:MusicBrainz Disc Id': 'musicbrainz_discid',\r\n    'TXXX:ACOUSTID_ID': 'acoustid_id',\r\n    'TXXX:Acoustid Id': 'acoustid_id',\r\n    'TXXX:Acoustid Fingerprint': 'acoustid_fingerprint',\r\n    'TXXX:MusicIP PUID': 'musicip_puid',\r\n    'TXXX:MusicMagic Fingerprint': 'musicip_fingerprint',\r\n    WOAR: 'website',\r\n    // id3v2.4\r\n    // ToDo: In same sequence as defined at http://id3.org/id3v2.4.0-frames\r\n    TDRC: 'date',\r\n    TYER: 'year',\r\n    TDOR: 'originaldate',\r\n    // 'TMCL:instrument': 'performer:instrument',\r\n    'TIPL:arranger': 'arranger',\r\n    'TIPL:engineer': 'engineer',\r\n    'TIPL:producer': 'producer',\r\n    'TIPL:DJ-mix': 'djmixer',\r\n    'TIPL:mix': 'mixer',\r\n    TMOO: 'mood',\r\n    // additional mappings:\r\n    SYLT: 'lyrics',\r\n    TSST: 'discsubtitle',\r\n    TKEY: 'key',\r\n    COMM: 'comment',\r\n    TOPE: 'originalartist',\r\n    // Windows Media Player\r\n    'PRIV:AverageLevel': 'averageLevel',\r\n    'PRIV:PeakLevel': 'peakLevel',\r\n    // Discogs\r\n    'TXXX:DISCOGS_ARTIST_ID': 'discogs_artist_id',\r\n    'TXXX:DISCOGS_ARTISTS': 'artists',\r\n    'TXXX:DISCOGS_ARTIST_NAME': 'artists',\r\n    'TXXX:DISCOGS_ALBUM_ARTISTS': 'albumartist',\r\n    'TXXX:DISCOGS_CATALOG': 'catalognumber',\r\n    'TXXX:DISCOGS_COUNTRY': 'releasecountry',\r\n    'TXXX:DISCOGS_DATE': 'originaldate',\r\n    'TXXX:DISCOGS_LABEL': 'label',\r\n    'TXXX:DISCOGS_LABEL_ID': 'discogs_label_id',\r\n    'TXXX:DISCOGS_MASTER_RELEASE_ID': 'discogs_master_release_id',\r\n    'TXXX:DISCOGS_RATING': 'discogs_rating',\r\n    'TXXX:DISCOGS_RELEASED': 'date',\r\n    'TXXX:DISCOGS_RELEASE_ID': 'discogs_release_id',\r\n    'TXXX:DISCOGS_VOTES': 'discogs_votes',\r\n    'TXXX:CATALOGID': 'catalognumber',\r\n    'TXXX:STYLE': 'genre',\r\n    'TXXX:REPLAYGAIN_TRACK_PEAK': 'replaygain_track_peak',\r\n    'TXXX:REPLAYGAIN_TRACK_GAIN': 'replaygain_track_gain',\r\n    'TXXX:REPLAYGAIN_ALBUM_PEAK': 'replaygain_album_peak',\r\n    'TXXX:REPLAYGAIN_ALBUM_GAIN': 'replaygain_album_gain',\r\n    'TXXX:MP3GAIN_MINMAX': 'replaygain_track_minmax',\r\n    'TXXX:MP3GAIN_ALBUM_MINMAX': 'replaygain_album_minmax',\r\n    'TXXX:MP3GAIN_UNDO': 'replaygain_undo',\r\n    MVNM: 'movement',\r\n    MVIN: 'movementIndex',\r\n    PCST: 'podcast',\r\n    TCAT: 'category',\r\n    TDES: 'description',\r\n    TDRL: 'date',\r\n    TGID: 'podcastId',\r\n    TKWD: 'keywords',\r\n    WFED: 'podcasturl'\r\n};\r\nclass ID3v24TagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {\r\n    static toRating(popm) {\r\n        return {\r\n            source: popm.email,\r\n            rating: popm.rating > 0 ? (popm.rating - 1) / 254 * GenericTagMapper_1.CommonTagMapper.maxRatingScore : undefined\r\n        };\r\n    }\r\n    constructor() {\r\n        super(['ID3v2.3', 'ID3v2.4'], id3v24TagMap);\r\n    }\r\n    /**\r\n     * Handle post mapping exceptions / correction\r\n     * @param {string} tag to post map\r\n     * @param warnings USed to register warnings\r\n     * @return Common value e.g. \"Buena Vista Social Club\"\r\n     */\r\n    postMap(tag, warnings) {\r\n        switch (tag.id) {\r\n            case 'UFID': // decode MusicBrainz Recording Id\r\n                if (tag.value.owner_identifier === 'http://musicbrainz.org') {\r\n                    tag.id += ':' + tag.value.owner_identifier;\r\n                    tag.value = Util_1.default.decodeString(tag.value.identifier, 'iso-8859-1');\r\n                }\r\n                break;\r\n            case 'PRIV':\r\n                switch (tag.value.owner_identifier) {\r\n                    // decode Windows Media Player\r\n                    case 'AverageLevel':\r\n                    case 'PeakValue':\r\n                        tag.id += ':' + tag.value.owner_identifier;\r\n                        tag.value = tag.value.data.length === 4 ? tag.value.data.readUInt32LE(0) : null;\r\n                        if (tag.value === null) {\r\n                            warnings.addWarning(`Failed to parse PRIV:PeakValue`);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        warnings.addWarning(`Unknown PRIV owner-identifier: ${tag.value.owner_identifier}`);\r\n                }\r\n                break;\r\n            case 'COMM':\r\n                tag.value = tag.value ? tag.value.text : null;\r\n                break;\r\n            case 'POPM':\r\n                tag.value = ID3v24TagMapper.toRating(tag.value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\nexports.ID3v24TagMapper = ID3v24TagMapper;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/id3v2/ID3v24TagMapper.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ID3v2Parser = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst FrameParser_1 = __webpack_require__(/*! ./FrameParser */ \"./node_modules/music-metadata/lib/id3v2/FrameParser.js\");\r\nconst ID3v2Token_1 = __webpack_require__(/*! ./ID3v2Token */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\r\nclass ID3v2Parser {\r\n    static removeUnsyncBytes(buffer) {\r\n        let readI = 0;\r\n        let writeI = 0;\r\n        while (readI < buffer.length - 1) {\r\n            if (readI !== writeI) {\r\n                buffer[writeI] = buffer[readI];\r\n            }\r\n            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\r\n            writeI++;\r\n        }\r\n        if (readI < buffer.length) {\r\n            buffer[writeI++] = buffer[readI];\r\n        }\r\n        return buffer.slice(0, writeI);\r\n    }\r\n    static getFrameHeaderLength(majorVer) {\r\n        switch (majorVer) {\r\n            case 2:\r\n                return 6;\r\n            case 3:\r\n            case 4:\r\n                return 10;\r\n            default:\r\n                throw new Error('header versionIndex is incorrect');\r\n        }\r\n    }\r\n    static readFrameFlags(b) {\r\n        return {\r\n            status: {\r\n                tag_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 6),\r\n                file_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 5),\r\n                read_only: Util_1.default.strtokBITSET.get(b, 0, 4)\r\n            },\r\n            format: {\r\n                grouping_identity: Util_1.default.strtokBITSET.get(b, 1, 7),\r\n                compression: Util_1.default.strtokBITSET.get(b, 1, 3),\r\n                encryption: Util_1.default.strtokBITSET.get(b, 1, 2),\r\n                unsynchronisation: Util_1.default.strtokBITSET.get(b, 1, 1),\r\n                data_length_indicator: Util_1.default.strtokBITSET.get(b, 1, 0)\r\n            }\r\n        };\r\n    }\r\n    static readFrameData(buf, frameHeader, majorVer, includeCovers, warningCollector) {\r\n        const frameParser = new FrameParser_1.FrameParser(majorVer, warningCollector);\r\n        switch (majorVer) {\r\n            case 2:\r\n                return frameParser.readData(buf, frameHeader.id, includeCovers);\r\n            case 3:\r\n            case 4:\r\n                if (frameHeader.flags.format.unsynchronisation) {\r\n                    buf = ID3v2Parser.removeUnsyncBytes(buf);\r\n                }\r\n                if (frameHeader.flags.format.data_length_indicator) {\r\n                    buf = buf.slice(4, buf.length);\r\n                }\r\n                return frameParser.readData(buf, frameHeader.id, includeCovers);\r\n            default:\r\n                throw new Error('Unexpected majorVer: ' + majorVer);\r\n        }\r\n    }\r\n    /**\r\n     * Create a combined tag key, of tag & description\r\n     * @param {string} tag e.g.: COM\r\n     * @param {string} description e.g. iTunPGAP\r\n     * @returns {string} e.g. COM:iTunPGAP\r\n     */\r\n    static makeDescriptionTagName(tag, description) {\r\n        return tag + (description ? ':' + description : '');\r\n    }\r\n    async parse(metadata, tokenizer, options) {\r\n        this.tokenizer = tokenizer;\r\n        this.metadata = metadata;\r\n        this.options = options;\r\n        const id3Header = await this.tokenizer.readToken(ID3v2Token_1.ID3v2Header);\r\n        if (id3Header.fileIdentifier !== 'ID3') {\r\n            throw new Error('expected ID3-header file-identifier \\'ID3\\' was not found');\r\n        }\r\n        this.id3Header = id3Header;\r\n        this.headerType = ('ID3v2.' + id3Header.version.major);\r\n        if (id3Header.flags.isExtendedHeader) {\r\n            return this.parseExtendedHeader();\r\n        }\r\n        else {\r\n            return this.parseId3Data(id3Header.size);\r\n        }\r\n    }\r\n    async parseExtendedHeader() {\r\n        const extendedHeader = await this.tokenizer.readToken(ID3v2Token_1.ExtendedHeader);\r\n        const dataRemaining = extendedHeader.size - ID3v2Token_1.ExtendedHeader.len;\r\n        if (dataRemaining > 0) {\r\n            return this.parseExtendedHeaderData(dataRemaining, extendedHeader.size);\r\n        }\r\n        else {\r\n            return this.parseId3Data(this.id3Header.size - extendedHeader.size);\r\n        }\r\n    }\r\n    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\r\n        const buffer = Buffer.alloc(dataRemaining);\r\n        await this.tokenizer.readBuffer(buffer, { length: dataRemaining });\r\n        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\r\n    }\r\n    async parseId3Data(dataLen) {\r\n        const buffer = Buffer.alloc(dataLen);\r\n        await this.tokenizer.readBuffer(buffer, { length: dataLen });\r\n        for (const tag of this.parseMetadata(buffer)) {\r\n            if (tag.id === 'TXXX') {\r\n                if (tag.value) {\r\n                    for (const text of tag.value.text) {\r\n                        this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, tag.value.description), text);\r\n                    }\r\n                }\r\n            }\r\n            else if (tag.id === 'COM') {\r\n                for (const value of tag.value) {\r\n                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value.text);\r\n                }\r\n            }\r\n            else if (tag.id === 'COMM') {\r\n                for (const value of tag.value) {\r\n                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value);\r\n                }\r\n            }\r\n            else if (Array.isArray(tag.value)) {\r\n                for (const value of tag.value) {\r\n                    this.addTag(tag.id, value);\r\n                }\r\n            }\r\n            else {\r\n                this.addTag(tag.id, tag.value);\r\n            }\r\n        }\r\n    }\r\n    addTag(id, value) {\r\n        this.metadata.addTag(this.headerType, id, value);\r\n    }\r\n    parseMetadata(data) {\r\n        let offset = 0;\r\n        const tags = [];\r\n        while (true) {\r\n            if (offset === data.length)\r\n                break;\r\n            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\r\n            if (offset + frameHeaderLength > data.length) {\r\n                this.metadata.addWarning('Illegal ID3v2 tag length');\r\n                break;\r\n            }\r\n            const frameHeaderBytes = data.slice(offset, offset += frameHeaderLength);\r\n            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\r\n            const frameDataBytes = data.slice(offset, offset += frameHeader.length);\r\n            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\r\n            if (values) {\r\n                tags.push({ id: frameHeader.id, value: values });\r\n            }\r\n        }\r\n        return tags;\r\n    }\r\n    readFrameHeader(v, majorVer) {\r\n        let header;\r\n        switch (majorVer) {\r\n            case 2:\r\n                header = {\r\n                    id: v.toString('ascii', 0, 3),\r\n                    length: Token.UINT24_BE.get(v, 3)\r\n                };\r\n                if (!header.id.match(/[A-Z0-9]{3}/g)) {\r\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\r\n                }\r\n                break;\r\n            case 3:\r\n            case 4:\r\n                header = {\r\n                    id: v.toString('ascii', 0, 4),\r\n                    length: (majorVer === 4 ? ID3v2Token_1.UINT32SYNCSAFE : Token.UINT32_BE).get(v, 4),\r\n                    flags: ID3v2Parser.readFrameFlags(v.slice(8, 10))\r\n                };\r\n                if (!header.id.match(/[A-Z0-9]{4}/g)) {\r\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error('Unexpected majorVer: ' + majorVer);\r\n        }\r\n        return header;\r\n    }\r\n}\r\nexports.ID3v2Parser = ID3v2Parser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v2/ID3v2Token.js":
/*!*************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/ID3v2Token.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.TextEncodingToken = exports.ExtendedHeader = exports.ID3v2Header = exports.UINT32SYNCSAFE = exports.AttachedPictureType = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\n/**\r\n * The picture type according to the ID3v2 APIC frame\r\n * Ref: http://id3.org/id3v2.3.0#Attached_picture\r\n */\r\nvar AttachedPictureType;\r\n(function (AttachedPictureType) {\r\n    AttachedPictureType[AttachedPictureType[\"Other\"] = 0] = \"Other\";\r\n    AttachedPictureType[AttachedPictureType[\"32x32 pixels 'file icon' (PNG only)\"] = 1] = \"32x32 pixels 'file icon' (PNG only)\";\r\n    AttachedPictureType[AttachedPictureType[\"Other file icon\"] = 2] = \"Other file icon\";\r\n    AttachedPictureType[AttachedPictureType[\"Cover (front)\"] = 3] = \"Cover (front)\";\r\n    AttachedPictureType[AttachedPictureType[\"Cover (back)\"] = 4] = \"Cover (back)\";\r\n    AttachedPictureType[AttachedPictureType[\"Leaflet page\"] = 5] = \"Leaflet page\";\r\n    AttachedPictureType[AttachedPictureType[\"Media (e.g. label side of CD)\"] = 6] = \"Media (e.g. label side of CD)\";\r\n    AttachedPictureType[AttachedPictureType[\"Lead artist/lead performer/soloist\"] = 7] = \"Lead artist/lead performer/soloist\";\r\n    AttachedPictureType[AttachedPictureType[\"Artist/performer\"] = 8] = \"Artist/performer\";\r\n    AttachedPictureType[AttachedPictureType[\"Conductor\"] = 9] = \"Conductor\";\r\n    AttachedPictureType[AttachedPictureType[\"Band/Orchestra\"] = 10] = \"Band/Orchestra\";\r\n    AttachedPictureType[AttachedPictureType[\"Composer\"] = 11] = \"Composer\";\r\n    AttachedPictureType[AttachedPictureType[\"Lyricist/text writer\"] = 12] = \"Lyricist/text writer\";\r\n    AttachedPictureType[AttachedPictureType[\"Recording Location\"] = 13] = \"Recording Location\";\r\n    AttachedPictureType[AttachedPictureType[\"During recording\"] = 14] = \"During recording\";\r\n    AttachedPictureType[AttachedPictureType[\"During performance\"] = 15] = \"During performance\";\r\n    AttachedPictureType[AttachedPictureType[\"Movie/video screen capture\"] = 16] = \"Movie/video screen capture\";\r\n    AttachedPictureType[AttachedPictureType[\"A bright coloured fish\"] = 17] = \"A bright coloured fish\";\r\n    AttachedPictureType[AttachedPictureType[\"Illustration\"] = 18] = \"Illustration\";\r\n    AttachedPictureType[AttachedPictureType[\"Band/artist logotype\"] = 19] = \"Band/artist logotype\";\r\n    AttachedPictureType[AttachedPictureType[\"Publisher/Studio logotype\"] = 20] = \"Publisher/Studio logotype\";\r\n})(AttachedPictureType = exports.AttachedPictureType || (exports.AttachedPictureType = {}));\r\n/**\r\n * 28 bits (representing up to 256MB) integer, the msb is 0 to avoid 'false syncsignals'.\r\n * 4 * %0xxxxxxx\r\n */\r\nexports.UINT32SYNCSAFE = {\r\n    get: (buf, off) => {\r\n        return buf[off + 3] & 0x7f | ((buf[off + 2]) << 7) |\r\n            ((buf[off + 1]) << 14) | ((buf[off]) << 21);\r\n    },\r\n    len: 4\r\n};\r\n/**\r\n * ID3v2 header\r\n * Ref: http://id3.org/id3v2.3.0#ID3v2_header\r\n * ToDo\r\n */\r\nexports.ID3v2Header = {\r\n    len: 10,\r\n    get: (buf, off) => {\r\n        return {\r\n            // ID3v2/file identifier   \"ID3\"\r\n            fileIdentifier: new Token.StringType(3, 'ascii').get(buf, off),\r\n            // ID3v2 versionIndex\r\n            version: {\r\n                major: Token.INT8.get(buf, off + 3),\r\n                revision: Token.INT8.get(buf, off + 4)\r\n            },\r\n            // ID3v2 flags\r\n            flags: {\r\n                // Unsynchronisation\r\n                unsynchronisation: Util_1.default.strtokBITSET.get(buf, off + 5, 7),\r\n                // Extended header\r\n                isExtendedHeader: Util_1.default.strtokBITSET.get(buf, off + 5, 6),\r\n                // Experimental indicator\r\n                expIndicator: Util_1.default.strtokBITSET.get(buf, off + 5, 5),\r\n                footer: Util_1.default.strtokBITSET.get(buf, off + 5, 4)\r\n            },\r\n            size: exports.UINT32SYNCSAFE.get(buf, off + 6)\r\n        };\r\n    }\r\n};\r\nexports.ExtendedHeader = {\r\n    len: 10,\r\n    get: (buf, off) => {\r\n        return {\r\n            // Extended header size\r\n            size: Token.UINT32_BE.get(buf, off),\r\n            // Extended Flags\r\n            extendedFlags: Token.UINT16_BE.get(buf, off + 4),\r\n            // Size of padding\r\n            sizeOfPadding: Token.UINT32_BE.get(buf, off + 6),\r\n            // CRC data present\r\n            crcDataPresent: Util_1.default.strtokBITSET.get(buf, off + 4, 31)\r\n        };\r\n    }\r\n};\r\nexports.TextEncodingToken = {\r\n    len: 1,\r\n    get: (buf, off) => {\r\n        switch (buf.readUInt8(off)) {\r\n            case 0x00:\r\n                return { encoding: 'iso-8859-1' }; // binary\r\n            case 0x01:\r\n                return { encoding: 'utf16', bom: true };\r\n            case 0x02:\r\n                return { encoding: 'utf16', bom: false };\r\n            case 0x03:\r\n                return { encoding: 'utf8', bom: false };\r\n            default:\r\n                return { encoding: 'utf8', bom: false };\r\n        }\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/id3v2/ID3v2Token.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/iff/index.js":
/*!******************************************************!*\
  !*** ./node_modules/music-metadata/lib/iff/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Header = void 0;\r\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\r\n/**\r\n * Common AIFF chunk header\r\n */\r\nexports.Header = {\r\n    len: 8,\r\n    get: (buf, off) => {\r\n        return {\r\n            // Chunk type ID\r\n            chunkID: FourCC_1.FourCcToken.get(buf, off),\r\n            // Chunk size\r\n            chunkSize: buf.readUInt32BE(off + 4)\r\n        };\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/iff/index.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/music-metadata/lib/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ratingToStars = exports.orderTags = exports.parseFile = exports.parseStream = exports.selectCover = exports.parseBuffer = exports.parseFromTokenizer = void 0;\r\nconst strtok3 = __webpack_require__(/*! strtok3 */ \"./node_modules/strtok3/lib/index.js\");\r\nconst Core = __webpack_require__(/*! ./core */ \"./node_modules/music-metadata/lib/core.js\");\r\nconst ParserFactory_1 = __webpack_require__(/*! ./ParserFactory */ \"./node_modules/music-metadata/lib/ParserFactory.js\");\r\nconst _debug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst RandomFileReader_1 = __webpack_require__(/*! ./common/RandomFileReader */ \"./node_modules/music-metadata/lib/common/RandomFileReader.js\");\r\nconst debug = _debug(\"music-metadata:parser\");\r\nvar core_1 = __webpack_require__(/*! ./core */ \"./node_modules/music-metadata/lib/core.js\");\r\nObject.defineProperty(exports, \"parseFromTokenizer\", ({ enumerable: true, get: function () { return core_1.parseFromTokenizer; } }));\r\nObject.defineProperty(exports, \"parseBuffer\", ({ enumerable: true, get: function () { return core_1.parseBuffer; } }));\r\nObject.defineProperty(exports, \"selectCover\", ({ enumerable: true, get: function () { return core_1.selectCover; } }));\r\n/**\r\n * Parse audio from Node Stream.Readable\r\n * @param stream - Stream to read the audio track from\r\n * @param fileInfo - File information object or MIME-type, e.g.: 'audio/mpeg'\r\n * @param options - Parsing options\r\n * @returns Metadata\r\n */\r\nasync function parseStream(stream, fileInfo, options = {}) {\r\n    const tokenizer = await strtok3.fromStream(stream, typeof fileInfo === 'string' ? { mimeType: fileInfo } : fileInfo);\r\n    return Core.parseFromTokenizer(tokenizer, options);\r\n}\r\nexports.parseStream = parseStream;\r\n/**\r\n * Parse audio from Node file\r\n * @param filePath - Media file to read meta-data from\r\n * @param options - Parsing options\r\n * @returns Metadata\r\n */\r\nasync function parseFile(filePath, options = {}) {\r\n    debug(`parseFile: ${filePath}`);\r\n    const fileTokenizer = await strtok3.fromFile(filePath);\r\n    const fileReader = new RandomFileReader_1.RandomFileReader(filePath, fileTokenizer.fileInfo.size);\r\n    try {\r\n        await Core.scanAppendingHeaders(fileReader, options);\r\n    }\r\n    finally {\r\n        fileReader.close();\r\n    }\r\n    try {\r\n        const parserName = ParserFactory_1.ParserFactory.getParserIdForExtension(filePath);\r\n        if (!parserName)\r\n            debug(' Parser could not be determined by file extension');\r\n        return await ParserFactory_1.ParserFactory.parse(fileTokenizer, parserName, options);\r\n    }\r\n    finally {\r\n        await fileTokenizer.close();\r\n    }\r\n}\r\nexports.parseFile = parseFile;\r\n/**\r\n * Create a dictionary ordered by their tag id (key)\r\n * @param nativeTags - List of tags\r\n * @returns Tags indexed by id\r\n */\r\nexports.orderTags = Core.orderTags;\r\n/**\r\n * Convert rating to 1-5 star rating\r\n * @param rating - Normalized rating [0..1] (common.rating[n].rating)\r\n * @returns Number of stars: 1, 2, 3, 4 or 5 stars\r\n */\r\nexports.ratingToStars = Core.ratingToStars;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/index.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/lyrics3/Lyrics3.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/lyrics3/Lyrics3.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getLyricsHeaderLength = exports.endTag2 = void 0;\r\nexports.endTag2 = 'LYRICS200';\r\nasync function getLyricsHeaderLength(reader) {\r\n    if (reader.fileSize >= 143) {\r\n        const buf = Buffer.alloc(15);\r\n        await reader.randomRead(buf, 0, buf.length, reader.fileSize - 143);\r\n        const txt = buf.toString('binary');\r\n        const tag = txt.substr(6);\r\n        if (tag === exports.endTag2) {\r\n            return parseInt(txt.substr(0, 6), 10) + 15;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\nexports.getLyricsHeaderLength = getLyricsHeaderLength;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/lyrics3/Lyrics3.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/matroska/MatroskaDtd.js":
/*!*****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/matroska/MatroskaDtd.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.elements = void 0;\r\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/music-metadata/lib/matroska/types.js\");\r\n/**\r\n * Elements of document type description\r\n * Derived from https://github.com/tungol/EBML/blob/master/doctypes/matroska.dtd\r\n * Extended with:\r\n *  https://www.matroska.org/technical/specs/index.html\r\n */\r\nexports.elements = {\r\n    0x1a45dfa3: {\r\n        name: 'ebml',\r\n        container: {\r\n            0x4286: { name: 'ebmlVersion', value: types_1.DataType.uint },\r\n            0x42f7: { name: 'ebmlReadVersion', value: types_1.DataType.uint },\r\n            0x42f2: { name: 'ebmlMaxIDWidth', value: types_1.DataType.uint },\r\n            0x42f3: { name: 'ebmlMaxSizeWidth', value: types_1.DataType.uint },\r\n            0x4282: { name: 'docType', value: types_1.DataType.string },\r\n            0x4287: { name: 'docTypeVersion', value: types_1.DataType.uint },\r\n            0x4285: { name: 'docTypeReadVersion', value: types_1.DataType.uint } // 5.1.7\r\n        }\r\n    },\r\n    // Matroska segments\r\n    0x18538067: {\r\n        name: 'segment',\r\n        container: {\r\n            // Meta Seek Information\r\n            0x114d9b74: {\r\n                name: 'seekHead',\r\n                container: {\r\n                    0x4dbb: {\r\n                        name: 'seek',\r\n                        container: {\r\n                            0x53ab: { name: 'seekId', value: types_1.DataType.binary },\r\n                            0x53ac: { name: 'seekPosition', value: types_1.DataType.uint }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            // Segment Information\r\n            0x1549a966: {\r\n                name: 'info',\r\n                container: {\r\n                    0x73a4: { name: 'uid', value: types_1.DataType.uid },\r\n                    0x7384: { name: 'filename', value: types_1.DataType.string },\r\n                    0x3cb923: { name: 'prevUID', value: types_1.DataType.uid },\r\n                    0x3c83ab: { name: 'prevFilename', value: types_1.DataType.string },\r\n                    0x3eb923: { name: 'nextUID', value: types_1.DataType.uid },\r\n                    0x3e83bb: { name: 'nextFilename', value: types_1.DataType.string },\r\n                    0x2ad7b1: { name: 'timecodeScale', value: types_1.DataType.uint },\r\n                    0x4489: { name: 'duration', value: types_1.DataType.float },\r\n                    0x4461: { name: 'dateUTC', value: types_1.DataType.uint },\r\n                    0x7ba9: { name: 'title', value: types_1.DataType.string },\r\n                    0x4d80: { name: 'muxingApp', value: types_1.DataType.string },\r\n                    0x5741: { name: 'writingApp', value: types_1.DataType.string }\r\n                }\r\n            },\r\n            // Cluster\r\n            0x1f43b675: {\r\n                name: 'cluster',\r\n                multiple: true,\r\n                container: {\r\n                    0xe7: { name: 'timecode', value: types_1.DataType.uid },\r\n                    0xa3: { name: 'unknown', value: types_1.DataType.binary },\r\n                    0xa7: { name: 'position', value: types_1.DataType.uid },\r\n                    0xab: { name: 'prevSize', value: types_1.DataType.uid }\r\n                }\r\n            },\r\n            // Track\r\n            0x1654ae6b: {\r\n                name: 'tracks',\r\n                container: {\r\n                    0xae: {\r\n                        name: 'entries',\r\n                        multiple: true,\r\n                        container: {\r\n                            0xd7: { name: 'trackNumber', value: types_1.DataType.uint },\r\n                            0x73c5: { name: 'uid', value: types_1.DataType.uid },\r\n                            0x83: { name: 'trackType', value: types_1.DataType.uint },\r\n                            0xb9: { name: 'flagEnabled', value: types_1.DataType.bool },\r\n                            0x88: { name: 'flagDefault', value: types_1.DataType.bool },\r\n                            0x55aa: { name: 'flagForced', value: types_1.DataType.bool },\r\n                            0x9c: { name: 'flagLacing', value: types_1.DataType.bool },\r\n                            0x6de7: { name: 'minCache', value: types_1.DataType.uint },\r\n                            0x6de8: { name: 'maxCache', value: types_1.DataType.uint },\r\n                            0x23e383: { name: 'defaultDuration', value: types_1.DataType.uint },\r\n                            0x23314f: { name: 'timecodeScale', value: types_1.DataType.float },\r\n                            0x536e: { name: 'name', value: types_1.DataType.string },\r\n                            0x22b59c: { name: 'language', value: types_1.DataType.string },\r\n                            0x86: { name: 'codecID', value: types_1.DataType.string },\r\n                            0x63a2: { name: 'codecPrivate', value: types_1.DataType.binary },\r\n                            0x258688: { name: 'codecName', value: types_1.DataType.string },\r\n                            0x3a9697: { name: 'codecSettings', value: types_1.DataType.string },\r\n                            0x3b4040: { name: 'codecInfoUrl', value: types_1.DataType.string },\r\n                            0x26b240: { name: 'codecDownloadUrl', value: types_1.DataType.string },\r\n                            0xaa: { name: 'codecDecodeAll', value: types_1.DataType.bool },\r\n                            0x6fab: { name: 'trackOverlay', value: types_1.DataType.uint },\r\n                            // Video\r\n                            0xe0: {\r\n                                name: 'video',\r\n                                container: {\r\n                                    0x9a: { name: 'flagInterlaced', value: types_1.DataType.bool },\r\n                                    0x53b8: { name: 'stereoMode', value: types_1.DataType.uint },\r\n                                    0xb0: { name: 'pixelWidth', value: types_1.DataType.uint },\r\n                                    0xba: { name: 'pixelHeight', value: types_1.DataType.uint },\r\n                                    0x54b0: { name: 'displayWidth', value: types_1.DataType.uint },\r\n                                    0x54ba: { name: 'displayHeight', value: types_1.DataType.uint },\r\n                                    0x54b3: { name: 'aspectRatioType', value: types_1.DataType.uint },\r\n                                    0x2eb524: { name: 'colourSpace', value: types_1.DataType.uint },\r\n                                    0x2fb523: { name: 'gammaValue', value: types_1.DataType.float }\r\n                                }\r\n                            },\r\n                            // Audio\r\n                            0xe1: {\r\n                                name: 'audio',\r\n                                container: {\r\n                                    0xb5: { name: 'samplingFrequency', value: types_1.DataType.float },\r\n                                    0x78b5: { name: 'outputSamplingFrequency', value: types_1.DataType.float },\r\n                                    0x9f: { name: 'channels', value: types_1.DataType.uint },\r\n                                    0x94: { name: 'channels', value: types_1.DataType.uint },\r\n                                    0x7d7b: { name: 'channelPositions', value: types_1.DataType.binary },\r\n                                    0x6264: { name: 'bitDepth', value: types_1.DataType.uint }\r\n                                }\r\n                            },\r\n                            // Content Encoding\r\n                            0x6d80: {\r\n                                name: 'contentEncodings',\r\n                                container: {\r\n                                    0x6240: {\r\n                                        name: 'contentEncoding',\r\n                                        container: {\r\n                                            0x5031: { name: 'order', value: types_1.DataType.uint },\r\n                                            0x5032: { name: 'scope', value: types_1.DataType.bool },\r\n                                            0x5033: { name: 'type', value: types_1.DataType.uint },\r\n                                            0x5034: {\r\n                                                name: 'contentEncoding',\r\n                                                container: {\r\n                                                    0x4254: { name: 'contentCompAlgo', value: types_1.DataType.uint },\r\n                                                    0x4255: { name: 'contentCompSettings', value: types_1.DataType.binary }\r\n                                                }\r\n                                            },\r\n                                            0x5035: {\r\n                                                name: 'contentEncoding',\r\n                                                container: {\r\n                                                    0x47e1: { name: 'contentEncAlgo', value: types_1.DataType.uint },\r\n                                                    0x47e2: { name: 'contentEncKeyID', value: types_1.DataType.binary },\r\n                                                    0x47e3: { name: 'contentSignature ', value: types_1.DataType.binary },\r\n                                                    0x47e4: { name: 'ContentSigKeyID  ', value: types_1.DataType.binary },\r\n                                                    0x47e5: { name: 'contentSigAlgo ', value: types_1.DataType.uint },\r\n                                                    0x47e6: { name: 'contentSigHashAlgo ', value: types_1.DataType.uint }\r\n                                                }\r\n                                            },\r\n                                            0x6264: { name: 'bitDepth', value: types_1.DataType.uint }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            // Cueing Data\r\n            0x1c53bb6b: {\r\n                name: 'cues',\r\n                container: {\r\n                    0xbb: {\r\n                        name: 'cuePoint',\r\n                        container: {\r\n                            0xb3: { name: 'cueTime', value: types_1.DataType.uid },\r\n                            0xb7: {\r\n                                name: 'positions',\r\n                                container: {\r\n                                    0xf7: { name: 'track', value: types_1.DataType.uint },\r\n                                    0xf1: { name: 'clusterPosition', value: types_1.DataType.uint },\r\n                                    0x5378: { name: 'blockNumber', value: types_1.DataType.uint },\r\n                                    0xea: { name: 'codecState', value: types_1.DataType.uint },\r\n                                    0xdb: {\r\n                                        name: 'reference', container: {\r\n                                            0x96: { name: 'time', value: types_1.DataType.uint },\r\n                                            0x97: { name: 'cluster', value: types_1.DataType.uint },\r\n                                            0x535f: { name: 'number', value: types_1.DataType.uint },\r\n                                            0xeb: { name: 'codecState', value: types_1.DataType.uint }\r\n                                        }\r\n                                    },\r\n                                    0xf0: { name: 'relativePosition', value: types_1.DataType.uint } // extended\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            // Attachment\r\n            0x1941a469: {\r\n                name: 'attachments',\r\n                container: {\r\n                    0x61a7: {\r\n                        name: 'attachedFiles',\r\n                        multiple: true,\r\n                        container: {\r\n                            0x467e: { name: 'description', value: types_1.DataType.string },\r\n                            0x466e: { name: 'name', value: types_1.DataType.string },\r\n                            0x4660: { name: 'mimeType', value: types_1.DataType.string },\r\n                            0x465c: { name: 'data', value: types_1.DataType.binary },\r\n                            0x46ae: { name: 'uid', value: types_1.DataType.uid }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            // Chapters\r\n            0x1043a770: {\r\n                name: 'chapters',\r\n                container: {\r\n                    0x45b9: {\r\n                        name: 'editionEntry',\r\n                        container: {\r\n                            0xb6: {\r\n                                name: 'chapterAtom',\r\n                                container: {\r\n                                    0x73c4: { name: 'uid', value: types_1.DataType.uid },\r\n                                    0x91: { name: 'timeStart', value: types_1.DataType.uint },\r\n                                    0x92: { name: 'timeEnd', value: types_1.DataType.uid },\r\n                                    0x98: { name: 'hidden', value: types_1.DataType.bool },\r\n                                    0x4598: { name: 'enabled', value: types_1.DataType.uid },\r\n                                    0x8f: { name: 'track', container: {\r\n                                            0x89: { name: 'trackNumber', value: types_1.DataType.uid },\r\n                                            0x80: {\r\n                                                name: 'display', container: {\r\n                                                    0x85: { name: 'string', value: types_1.DataType.string },\r\n                                                    0x437c: { name: 'language ', value: types_1.DataType.string },\r\n                                                    0x437e: { name: 'country ', value: types_1.DataType.string }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            // Tagging\r\n            0x1254c367: {\r\n                name: 'tags',\r\n                container: {\r\n                    0x7373: {\r\n                        name: 'tag',\r\n                        multiple: true,\r\n                        container: {\r\n                            0x63c0: {\r\n                                name: 'target',\r\n                                container: {\r\n                                    0x63c5: { name: 'tagTrackUID', value: types_1.DataType.uid },\r\n                                    0x63c4: { name: 'tagChapterUID', value: types_1.DataType.uint },\r\n                                    0x63c6: { name: 'tagAttachmentUID', value: types_1.DataType.uid },\r\n                                    0x63ca: { name: 'targetType', value: types_1.DataType.string },\r\n                                    0x68ca: { name: 'targetTypeValue', value: types_1.DataType.uint },\r\n                                    0x63c9: { name: 'tagEditionUID', value: types_1.DataType.uid } // extended\r\n                                }\r\n                            },\r\n                            0x67c8: {\r\n                                name: 'simpleTags',\r\n                                multiple: true,\r\n                                container: {\r\n                                    0x45a3: { name: 'name', value: types_1.DataType.string },\r\n                                    0x4487: { name: 'string', value: types_1.DataType.string },\r\n                                    0x4485: { name: 'binary', value: types_1.DataType.binary },\r\n                                    0x447a: { name: 'language', value: types_1.DataType.string },\r\n                                    0x447b: { name: 'languageIETF', value: types_1.DataType.string },\r\n                                    0x4484: { name: 'default', value: types_1.DataType.bool } // extended\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/matroska/MatroskaDtd.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/matroska/MatroskaParser.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/matroska/MatroskaParser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.MatroskaParser = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst _debug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\r\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/music-metadata/lib/matroska/types.js\");\r\nconst matroskaDtd = __webpack_require__(/*! ./MatroskaDtd */ \"./node_modules/music-metadata/lib/matroska/MatroskaDtd.js\");\r\nconst debug = _debug('music-metadata:parser:matroska');\r\n/**\r\n * Extensible Binary Meta Language (EBML) parser\r\n * https://en.wikipedia.org/wiki/Extensible_Binary_Meta_Language\r\n * http://matroska.sourceforge.net/technical/specs/rfc/index.html\r\n *\r\n * WEBM VP8 AUDIO FILE\r\n */\r\nclass MatroskaParser extends BasicParser_1.BasicParser {\r\n    constructor() {\r\n        super();\r\n        this.padding = 0;\r\n        this.parserMap = new Map();\r\n        this.ebmlMaxIDLength = 4;\r\n        this.ebmlMaxSizeLength = 8;\r\n        this.parserMap.set(types_1.DataType.uint, e => this.readUint(e));\r\n        this.parserMap.set(types_1.DataType.string, e => this.readString(e));\r\n        this.parserMap.set(types_1.DataType.binary, e => this.readBuffer(e));\r\n        this.parserMap.set(types_1.DataType.uid, async (e) => await this.readUint(e) === 1);\r\n        this.parserMap.set(types_1.DataType.bool, e => this.readFlag(e));\r\n        this.parserMap.set(types_1.DataType.float, e => this.readFloat(e));\r\n    }\r\n    /**\r\n     * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).\r\n     * @param {INativeMetadataCollector} metadata Output\r\n     * @param {ITokenizer} tokenizer Input\r\n     * @param {IOptions} options Parsing options\r\n     */\r\n    init(metadata, tokenizer, options) {\r\n        super.init(metadata, tokenizer, options);\r\n        return this;\r\n    }\r\n    async parse() {\r\n        const matroska = await this.parseContainer(matroskaDtd.elements, this.tokenizer.fileInfo.size, []);\r\n        this.metadata.setFormat('container', `EBML/${matroska.ebml.docType}`);\r\n        if (matroska.segment) {\r\n            const info = matroska.segment.info;\r\n            if (info) {\r\n                const timecodeScale = info.timecodeScale ? info.timecodeScale : 1000000;\r\n                const duration = info.duration * timecodeScale / 1000000000;\r\n                this.addTag('segment:title', info.title);\r\n                this.metadata.setFormat('duration', duration);\r\n            }\r\n            const audioTracks = matroska.segment.tracks;\r\n            if (audioTracks && audioTracks.entries) {\r\n                audioTracks.entries.forEach(entry => {\r\n                    const stream = {\r\n                        codecName: entry.codecID.replace('A_', '').replace('V_', ''),\r\n                        codecSettings: entry.codecSettings,\r\n                        flagDefault: entry.flagDefault,\r\n                        flagLacing: entry.flagLacing,\r\n                        flagEnabled: entry.flagEnabled,\r\n                        language: entry.language,\r\n                        name: entry.name,\r\n                        type: entry.trackType,\r\n                        audio: entry.audio,\r\n                        video: entry.video\r\n                    };\r\n                    this.metadata.addStreamInfo(stream);\r\n                });\r\n                const audioTrack = audioTracks.entries\r\n                    .filter(entry => {\r\n                    return entry.trackType === types_1.TrackType.audio.valueOf();\r\n                })\r\n                    .reduce((acc, cur) => {\r\n                    if (!acc) {\r\n                        return cur;\r\n                    }\r\n                    if (!acc.flagDefault && cur.flagDefault) {\r\n                        return cur;\r\n                    }\r\n                    if (cur.trackNumber && cur.trackNumber < acc.trackNumber) {\r\n                        return cur;\r\n                    }\r\n                    return acc;\r\n                }, null);\r\n                if (audioTrack) {\r\n                    this.metadata.setFormat('codec', audioTrack.codecID.replace('A_', ''));\r\n                    this.metadata.setFormat('sampleRate', audioTrack.audio.samplingFrequency);\r\n                    this.metadata.setFormat('numberOfChannels', audioTrack.audio.channels);\r\n                }\r\n                if (matroska.segment.tags) {\r\n                    matroska.segment.tags.tag.forEach(tag => {\r\n                        const target = tag.target;\r\n                        const targetType = target.targetTypeValue ? types_1.TargetType[target.targetTypeValue] : (target.targetType ? target.targetType : 'track');\r\n                        tag.simpleTags.forEach(simpleTag => {\r\n                            const value = simpleTag.string ? simpleTag.string : simpleTag.binary;\r\n                            this.addTag(`${targetType}:${simpleTag.name}`, value);\r\n                        });\r\n                    });\r\n                }\r\n                if (matroska.segment.attachments) {\r\n                    matroska.segment.attachments.attachedFiles\r\n                        .filter(file => file.mimeType.startsWith('image/'))\r\n                        .map(file => {\r\n                        return {\r\n                            data: file.data,\r\n                            format: file.mimeType,\r\n                            description: file.description,\r\n                            name: file.name\r\n                        };\r\n                    }).forEach(picture => {\r\n                        this.addTag('picture', picture);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    async parseContainer(container, posDone, path) {\r\n        const tree = {};\r\n        while (this.tokenizer.position < posDone) {\r\n            let element;\r\n            try {\r\n                element = await this.readElement();\r\n            }\r\n            catch (error) {\r\n                if (error.message === 'End-Of-Stream') {\r\n                    break;\r\n                }\r\n                throw error;\r\n            }\r\n            const type = container[element.id];\r\n            if (type) {\r\n                debug(`Element: name=${type.name}, container=${!!type.container}`);\r\n                if (type.container) {\r\n                    const res = await this.parseContainer(type.container, element.len >= 0 ? this.tokenizer.position + element.len : -1, path.concat([type.name]));\r\n                    if (type.multiple) {\r\n                        if (!tree[type.name]) {\r\n                            tree[type.name] = [];\r\n                        }\r\n                        tree[type.name].push(res);\r\n                    }\r\n                    else {\r\n                        tree[type.name] = res;\r\n                    }\r\n                }\r\n                else {\r\n                    tree[type.name] = await this.parserMap.get(type.value)(element);\r\n                }\r\n            }\r\n            else {\r\n                switch (element.id) {\r\n                    case 0xec: // void\r\n                        this.padding += element.len;\r\n                        await this.tokenizer.ignore(element.len);\r\n                        break;\r\n                    default:\r\n                        debug(`parseEbml: path=${path.join('/')}, unknown element: id=${element.id.toString(16)}`);\r\n                        this.padding += element.len;\r\n                        await this.tokenizer.ignore(element.len);\r\n                }\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n    async readVintData(maxLength) {\r\n        const msb = await this.tokenizer.peekNumber(Token.UINT8);\r\n        let mask = 0x80;\r\n        let oc = 1;\r\n        // Calculate VINT_WIDTH\r\n        while ((msb & mask) === 0) {\r\n            if (oc > maxLength) {\r\n                throw new Error('VINT value exceeding maximum size');\r\n            }\r\n            ++oc;\r\n            mask >>= 1;\r\n        }\r\n        const id = Buffer.alloc(oc);\r\n        await this.tokenizer.readBuffer(id);\r\n        return id;\r\n    }\r\n    async readElement() {\r\n        const id = await this.readVintData(this.ebmlMaxIDLength);\r\n        const lenField = await this.readVintData(this.ebmlMaxSizeLength);\r\n        lenField[0] ^= 0x80 >> (lenField.length - 1);\r\n        const nrLen = Math.min(6, lenField.length); // JavaScript can max read 6 bytes integer\r\n        return {\r\n            id: id.readUIntBE(0, id.length),\r\n            len: lenField.readUIntBE(lenField.length - nrLen, nrLen)\r\n        };\r\n    }\r\n    isMaxValue(vintData) {\r\n        if (vintData.length === this.ebmlMaxSizeLength) {\r\n            for (let n = 1; n < this.ebmlMaxSizeLength; ++n) {\r\n                if (vintData[n] !== 0xff)\r\n                    return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    async readFloat(e) {\r\n        switch (e.len) {\r\n            case 0:\r\n                return 0.0;\r\n            case 4:\r\n                return this.tokenizer.readNumber(Token.Float32_BE);\r\n            case 8:\r\n                return this.tokenizer.readNumber(Token.Float64_BE);\r\n            case 10:\r\n                return this.tokenizer.readNumber(Token.Float64_BE);\r\n            default:\r\n                throw new Error(`Invalid IEEE-754 float length: ${e.len}`);\r\n        }\r\n    }\r\n    async readFlag(e) {\r\n        return (await this.readUint(e)) === 1;\r\n    }\r\n    async readUint(e) {\r\n        const buf = await this.readBuffer(e);\r\n        const nrLen = Math.min(6, e.len); // JavaScript can max read 6 bytes integer\r\n        return buf.readUIntBE(e.len - nrLen, nrLen);\r\n    }\r\n    async readString(e) {\r\n        return this.tokenizer.readToken(new Token.StringType(e.len, 'utf-8'));\r\n    }\r\n    async readBuffer(e) {\r\n        const buf = Buffer.alloc(e.len);\r\n        await this.tokenizer.readBuffer(buf);\r\n        return buf;\r\n    }\r\n    addTag(tagId, value) {\r\n        this.metadata.addTag('matroska', tagId, value);\r\n    }\r\n}\r\nexports.MatroskaParser = MatroskaParser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/matroska/MatroskaParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/matroska/MatroskaTagMapper.js":
/*!***********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/matroska/MatroskaTagMapper.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.MatroskaTagMapper = void 0;\r\nconst CaseInsensitiveTagMap_1 = __webpack_require__(/*! ../common/CaseInsensitiveTagMap */ \"./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\");\r\n/**\r\n * EBML Tag map\r\n */\r\nconst ebmlTagMap = {\r\n    'segment:title': 'title',\r\n    'album:ARTIST': 'albumartist',\r\n    'album:ARTISTSORT': 'albumartistsort',\r\n    'album:TITLE': 'album',\r\n    'album:DATE_RECORDED': 'originaldate',\r\n    'album:PART_NUMBER': 'disk',\r\n    'album:TOTAL_PARTS': 'totaltracks',\r\n    'track:ARTIST': 'artist',\r\n    'track:ARTISTSORT': 'artistsort',\r\n    'track:TITLE': 'title',\r\n    'track:PART_NUMBER': 'track',\r\n    'track:MUSICBRAINZ_TRACKID': 'musicbrainz_recordingid',\r\n    'track:MUSICBRAINZ_ALBUMID': 'musicbrainz_albumid',\r\n    'track:MUSICBRAINZ_ARTISTID': 'musicbrainz_artistid',\r\n    'track:PUBLISHER': 'label',\r\n    'track:GENRE': 'genre',\r\n    'track:ENCODER': 'encodedby',\r\n    'track:ENCODER_OPTIONS': 'encodersettings',\r\n    'edition:TOTAL_PARTS': 'totaldiscs',\r\n    picture: 'picture'\r\n};\r\nclass MatroskaTagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {\r\n    constructor() {\r\n        super(['matroska'], ebmlTagMap);\r\n    }\r\n}\r\nexports.MatroskaTagMapper = MatroskaTagMapper;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/matroska/MatroskaTagMapper.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/matroska/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/music-metadata/lib/matroska/types.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.TrackType = exports.TargetType = exports.DataType = void 0;\r\nvar DataType;\r\n(function (DataType) {\r\n    DataType[DataType[\"string\"] = 0] = \"string\";\r\n    DataType[DataType[\"uint\"] = 1] = \"uint\";\r\n    DataType[DataType[\"uid\"] = 2] = \"uid\";\r\n    DataType[DataType[\"bool\"] = 3] = \"bool\";\r\n    DataType[DataType[\"binary\"] = 4] = \"binary\";\r\n    DataType[DataType[\"float\"] = 5] = \"float\";\r\n})(DataType = exports.DataType || (exports.DataType = {}));\r\nvar TargetType;\r\n(function (TargetType) {\r\n    TargetType[TargetType[\"shot\"] = 10] = \"shot\";\r\n    TargetType[TargetType[\"scene\"] = 20] = \"scene\";\r\n    TargetType[TargetType[\"track\"] = 30] = \"track\";\r\n    TargetType[TargetType[\"part\"] = 40] = \"part\";\r\n    TargetType[TargetType[\"album\"] = 50] = \"album\";\r\n    TargetType[TargetType[\"edition\"] = 60] = \"edition\";\r\n    TargetType[TargetType[\"collection\"] = 70] = \"collection\";\r\n})(TargetType = exports.TargetType || (exports.TargetType = {}));\r\nvar TrackType;\r\n(function (TrackType) {\r\n    TrackType[TrackType[\"video\"] = 1] = \"video\";\r\n    TrackType[TrackType[\"audio\"] = 2] = \"audio\";\r\n    TrackType[TrackType[\"complex\"] = 3] = \"complex\";\r\n    TrackType[TrackType[\"logo\"] = 4] = \"logo\";\r\n    TrackType[TrackType[\"subtitle\"] = 17] = \"subtitle\";\r\n    TrackType[TrackType[\"button\"] = 18] = \"button\";\r\n    TrackType[TrackType[\"control\"] = 32] = \"control\";\r\n})(TrackType = exports.TrackType || (exports.TrackType = {}));\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/matroska/types.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/mp4/Atom.js":
/*!*****************************************************!*\
  !*** ./node_modules/music-metadata/lib/mp4/Atom.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Atom = void 0;\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst AtomToken = __webpack_require__(/*! ./AtomToken */ \"./node_modules/music-metadata/lib/mp4/AtomToken.js\");\r\nconst debug = initDebug('music-metadata:parser:MP4:Atom');\r\nclass Atom {\r\n    constructor(header, extended, parent) {\r\n        this.header = header;\r\n        this.extended = extended;\r\n        this.parent = parent;\r\n        this.children = [];\r\n        this.atomPath = (this.parent ? this.parent.atomPath + '.' : '') + this.header.name;\r\n    }\r\n    static async readAtom(tokenizer, dataHandler, parent, remaining) {\r\n        // Parse atom header\r\n        const offset = tokenizer.position;\r\n        // debug(`Reading next token on offset=${offset}...`); //  buf.toString('ascii')\r\n        const header = await tokenizer.readToken(AtomToken.Header);\r\n        const extended = header.length === 1;\r\n        if (extended) {\r\n            header.length = await tokenizer.readToken(AtomToken.ExtendedSize);\r\n        }\r\n        const atomBean = new Atom(header, header.length === 1, parent);\r\n        const payloadLength = atomBean.getPayloadLength(remaining);\r\n        debug(`parse atom name=${atomBean.atomPath}, extended=${atomBean.extended}, offset=${offset}, len=${atomBean.header.length}`); //  buf.toString('ascii')\r\n        await atomBean.readData(tokenizer, dataHandler, payloadLength);\r\n        return atomBean;\r\n    }\r\n    getHeaderLength() {\r\n        return this.extended ? 16 : 8;\r\n    }\r\n    getPayloadLength(remaining) {\r\n        return (this.header.length === 0 ? remaining : this.header.length) - this.getHeaderLength();\r\n    }\r\n    async readAtoms(tokenizer, dataHandler, size) {\r\n        while (size > 0) {\r\n            const atomBean = await Atom.readAtom(tokenizer, dataHandler, this, size);\r\n            this.children.push(atomBean);\r\n            size -= atomBean.header.length === 0 ? size : atomBean.header.length;\r\n        }\r\n    }\r\n    async readData(tokenizer, dataHandler, remaining) {\r\n        switch (this.header.name) {\r\n            // \"Container\" atoms, contains nested atoms\r\n            case 'moov': // The Movie Atom: contains other atoms\r\n            case 'udta': // User defined atom\r\n            case 'trak':\r\n            case 'mdia': // Media atom\r\n            case 'minf': // Media Information Atom\r\n            case 'stbl': // The Sample Table Atom\r\n            case '<id>':\r\n            case 'ilst':\r\n            case 'tref':\r\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining));\r\n            case 'meta': // Metadata Atom, ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\r\n                // meta has 4 bytes of padding, ignore\r\n                await tokenizer.ignore(4);\r\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining) - 4);\r\n            case 'mdhd': // Media header atom\r\n            case 'mvhd': // 'movie' => 'mvhd': movie header atom; child of Movie Atom\r\n            case 'tkhd':\r\n            case 'stsz':\r\n            case 'mdat':\r\n            default:\r\n                return dataHandler(this, remaining);\r\n        }\r\n    }\r\n}\r\nexports.Atom = Atom;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/mp4/Atom.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/mp4/AtomToken.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/mp4/AtomToken.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ChapterText = exports.StcoAtom = exports.StszAtom = exports.StscAtom = exports.SampleToChunkToken = exports.SttsAtom = exports.TimeToSampleToken = exports.SoundSampleDescriptionV0 = exports.SoundSampleDescriptionVersion = exports.StsdAtom = exports.TrackHeaderAtom = exports.NameAtom = exports.DataAtom = exports.MvhdAtom = exports.MdhdAtom = exports.FixedLengthAtom = exports.mhdr = exports.tkhd = exports.ftyp = exports.ExtendedSize = exports.Header = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst debug = initDebug('music-metadata:parser:MP4:atom');\r\nexports.Header = {\r\n    len: 8,\r\n    get: (buf, off) => {\r\n        const length = Token.UINT32_BE.get(buf, off);\r\n        if (length < 0)\r\n            throw new Error('Invalid atom header length');\r\n        return {\r\n            length,\r\n            name: new Token.StringType(4, 'binary').get(buf, off + 4)\r\n        };\r\n    },\r\n    put: (buf, off, hdr) => {\r\n        Token.UINT32_BE.put(buf, off, hdr.length);\r\n        return FourCC_1.FourCcToken.put(buf, off + 4, hdr.name);\r\n    }\r\n};\r\n/**\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap1/qtff1.html#//apple_ref/doc/uid/TP40000939-CH203-38190\r\n */\r\nexports.ExtendedSize = Token.UINT64_BE;\r\nexports.ftyp = {\r\n    len: 4,\r\n    get: (buf, off) => {\r\n        return {\r\n            type: new Token.StringType(4, 'ascii').get(buf, off)\r\n        };\r\n    }\r\n};\r\nexports.tkhd = {\r\n    len: 4,\r\n    get: (buf, off) => {\r\n        return {\r\n            type: new Token.StringType(4, 'ascii').get(buf, off)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Token: Movie Header Atom\r\n */\r\nexports.mhdr = {\r\n    len: 8,\r\n    get: (buf, off) => {\r\n        return {\r\n            version: Token.UINT8.get(buf, off + 0),\r\n            flags: Token.UINT24_BE.get(buf, off + 1),\r\n            nextItemID: Token.UINT32_BE.get(buf, off + 4)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Base class for 'fixed' length atoms.\r\n * In some cases these atoms are longer then the sum of the described fields.\r\n * Issue: https://github.com/Borewit/music-metadata/issues/120\r\n */\r\nclass FixedLengthAtom {\r\n    /**\r\n     *\r\n     * @param {number} len Length as specified in the size field\r\n     * @param {number} expLen Total length of sum of specified fields in the standard\r\n     */\r\n    constructor(len, expLen, atomId) {\r\n        this.len = len;\r\n        if (len < expLen) {\r\n            throw new Error(`Atom ${atomId} expected to be ${expLen}, but specifies ${len} bytes long.`);\r\n        }\r\n        else if (len > expLen) {\r\n            debug(`Warning: atom ${atomId} expected to be ${expLen}, but was actually ${len} bytes long.`);\r\n        }\r\n    }\r\n}\r\nexports.FixedLengthAtom = FixedLengthAtom;\r\n/**\r\n * Timestamp stored in seconds since Mac Epoch (1 January 1904)\r\n */\r\nconst SecondsSinceMacEpoch = {\r\n    len: 4,\r\n    get: (buf, off) => {\r\n        const secondsSinceUnixEpoch = Token.UINT32_BE.get(buf, off) - 2082844800;\r\n        return new Date(secondsSinceUnixEpoch * 1000);\r\n    }\r\n};\r\n/**\r\n * Token: Media Header Atom\r\n * Ref:\r\n *   https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-SW34\r\n *   https://wiki.multimedia.cx/index.php/QuickTime_container#mdhd\r\n */\r\nclass MdhdAtom extends FixedLengthAtom {\r\n    constructor(len) {\r\n        super(len, 24, 'mdhd');\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            version: Token.UINT8.get(buf, off + 0),\r\n            flags: Token.UINT24_BE.get(buf, off + 1),\r\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\r\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\r\n            timeScale: Token.UINT32_BE.get(buf, off + 12),\r\n            duration: Token.UINT32_BE.get(buf, off + 16),\r\n            language: Token.UINT16_BE.get(buf, off + 20),\r\n            quality: Token.UINT16_BE.get(buf, off + 22)\r\n        };\r\n    }\r\n}\r\nexports.MdhdAtom = MdhdAtom;\r\n/**\r\n * Token: Movie Header Atom\r\n */\r\nclass MvhdAtom extends FixedLengthAtom {\r\n    constructor(len) {\r\n        super(len, 100, 'mvhd');\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            version: Token.UINT8.get(buf, off),\r\n            flags: Token.UINT24_BE.get(buf, off + 1),\r\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\r\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\r\n            timeScale: Token.UINT32_BE.get(buf, off + 12),\r\n            duration: Token.UINT32_BE.get(buf, off + 16),\r\n            preferredRate: Token.UINT32_BE.get(buf, off + 20),\r\n            preferredVolume: Token.UINT16_BE.get(buf, off + 24),\r\n            // ignore reserver: 10 bytes\r\n            // ignore matrix structure: 36 bytes\r\n            previewTime: Token.UINT32_BE.get(buf, off + 72),\r\n            previewDuration: Token.UINT32_BE.get(buf, off + 76),\r\n            posterTime: Token.UINT32_BE.get(buf, off + 80),\r\n            selectionTime: Token.UINT32_BE.get(buf, off + 84),\r\n            selectionDuration: Token.UINT32_BE.get(buf, off + 88),\r\n            currentTime: Token.UINT32_BE.get(buf, off + 92),\r\n            nextTrackID: Token.UINT32_BE.get(buf, off + 96)\r\n        };\r\n    }\r\n}\r\nexports.MvhdAtom = MvhdAtom;\r\n/**\r\n * Data Atom Structure\r\n */\r\nclass DataAtom {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            type: {\r\n                set: Token.UINT8.get(buf, off + 0),\r\n                type: Token.UINT24_BE.get(buf, off + 1)\r\n            },\r\n            locale: Token.UINT24_BE.get(buf, off + 4),\r\n            value: new Token.BufferType(this.len - 8).get(buf, off + 8)\r\n        };\r\n    }\r\n}\r\nexports.DataAtom = DataAtom;\r\n/**\r\n * Data Atom Structure\r\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW31\r\n */\r\nclass NameAtom {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            version: Token.UINT8.get(buf, off),\r\n            flags: Token.UINT24_BE.get(buf, off + 1),\r\n            name: new Token.StringType(this.len - 4, 'utf-8').get(buf, off + 4)\r\n        };\r\n    }\r\n}\r\nexports.NameAtom = NameAtom;\r\n/**\r\n * Track Header Atoms structure\r\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25550\r\n */\r\nclass TrackHeaderAtom {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            version: Token.UINT8.get(buf, off),\r\n            flags: Token.UINT24_BE.get(buf, off + 1),\r\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\r\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\r\n            trackId: Token.UINT32_BE.get(buf, off + 12),\r\n            // reserved 4 bytes\r\n            duration: Token.UINT32_BE.get(buf, off + 20),\r\n            layer: Token.UINT16_BE.get(buf, off + 24),\r\n            alternateGroup: Token.UINT16_BE.get(buf, off + 26),\r\n            volume: Token.UINT16_BE.get(buf, off + 28) // ToDo: fixed point\r\n            // ToDo: add remaining fields\r\n        };\r\n    }\r\n}\r\nexports.TrackHeaderAtom = TrackHeaderAtom;\r\n/**\r\n * Atom: Sample Description Atom ('stsd')\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\r\n */\r\nconst stsdHeader = {\r\n    len: 8,\r\n    get: (buf, off) => {\r\n        return {\r\n            version: Token.UINT8.get(buf, off),\r\n            flags: Token.UINT24_BE.get(buf, off + 1),\r\n            numberOfEntries: Token.UINT32_BE.get(buf, off + 4)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Atom: Sample Description Atom ('stsd')\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\r\n */\r\nclass SampleDescriptionTable {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            dataFormat: FourCC_1.FourCcToken.get(buf, off),\r\n            dataReferenceIndex: Token.UINT16_BE.get(buf, off + 10),\r\n            description: new Token.BufferType(this.len - 12).get(buf, off + 12)\r\n        };\r\n    }\r\n}\r\n/**\r\n * Atom: Sample-description Atom ('stsd')\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\r\n */\r\nclass StsdAtom {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        const header = stsdHeader.get(buf, off);\r\n        off += stsdHeader.len;\r\n        const table = [];\r\n        for (let n = 0; n < header.numberOfEntries; ++n) {\r\n            const size = Token.UINT32_BE.get(buf, off); // Sample description size\r\n            off += Token.UINT32_BE.len;\r\n            table.push(new SampleDescriptionTable(size).get(buf, off));\r\n            off += size;\r\n        }\r\n        return {\r\n            header,\r\n            table\r\n        };\r\n    }\r\n}\r\nexports.StsdAtom = StsdAtom;\r\n/**\r\n * Common Sound Sample Description (version & revision)\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-57317\r\n */\r\nexports.SoundSampleDescriptionVersion = {\r\n    len: 8,\r\n    get(buf, off) {\r\n        return {\r\n            version: Token.INT16_BE.get(buf, off),\r\n            revision: Token.INT16_BE.get(buf, off + 2),\r\n            vendor: Token.INT32_BE.get(buf, off + 4)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Sound Sample Description (Version 0)\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-130736\r\n */\r\nexports.SoundSampleDescriptionV0 = {\r\n    len: 12,\r\n    get(buf, off) {\r\n        return {\r\n            numAudioChannels: Token.INT16_BE.get(buf, off + 0),\r\n            sampleSize: Token.INT16_BE.get(buf, off + 2),\r\n            compressionId: Token.INT16_BE.get(buf, off + 4),\r\n            packetSize: Token.INT16_BE.get(buf, off + 6),\r\n            sampleRate: Token.UINT16_BE.get(buf, off + 8) + Token.UINT16_BE.get(buf, off + 10) / 10000\r\n        };\r\n    }\r\n};\r\nclass SimpleTableAtom {\r\n    constructor(len, token) {\r\n        this.len = len;\r\n        this.token = token;\r\n    }\r\n    get(buf, off) {\r\n        const nrOfEntries = Token.INT32_BE.get(buf, off + 4);\r\n        return {\r\n            version: Token.INT8.get(buf, off + 0),\r\n            flags: Token.INT24_BE.get(buf, off + 1),\r\n            numberOfEntries: nrOfEntries,\r\n            entries: readTokenTable(buf, this.token, off + 8, this.len - 8, nrOfEntries)\r\n        };\r\n    }\r\n}\r\nexports.TimeToSampleToken = {\r\n    len: 8,\r\n    get(buf, off) {\r\n        return {\r\n            count: Token.INT32_BE.get(buf, off + 0),\r\n            duration: Token.INT32_BE.get(buf, off + 4)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Time-to-sample('stts') atom.\r\n * Store duration information for a media’s samples.\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25696\r\n */\r\nclass SttsAtom extends SimpleTableAtom {\r\n    constructor(len) {\r\n        super(len, exports.TimeToSampleToken);\r\n        this.len = len;\r\n    }\r\n}\r\nexports.SttsAtom = SttsAtom;\r\nexports.SampleToChunkToken = {\r\n    len: 12,\r\n    get(buf, off) {\r\n        return {\r\n            firstChunk: Token.INT32_BE.get(buf, off),\r\n            samplesPerChunk: Token.INT32_BE.get(buf, off + 4),\r\n            sampleDescriptionId: Token.INT32_BE.get(buf, off + 8)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Sample-to-Chunk ('stsc') atom interface\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25706\r\n */\r\nclass StscAtom extends SimpleTableAtom {\r\n    constructor(len) {\r\n        super(len, exports.SampleToChunkToken);\r\n        this.len = len;\r\n    }\r\n}\r\nexports.StscAtom = StscAtom;\r\n/**\r\n * Sample-size ('stsz') atom\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25710\r\n */\r\nclass StszAtom {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        const nrOfEntries = Token.INT32_BE.get(buf, off + 8);\r\n        return {\r\n            version: Token.INT8.get(buf, off),\r\n            flags: Token.INT24_BE.get(buf, off + 1),\r\n            sampleSize: Token.INT32_BE.get(buf, off + 4),\r\n            numberOfEntries: nrOfEntries,\r\n            entries: readTokenTable(buf, Token.INT32_BE, off + 12, this.len - 12, nrOfEntries)\r\n        };\r\n    }\r\n}\r\nexports.StszAtom = StszAtom;\r\n/**\r\n * Chunk offset atom, 'stco'\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25715\r\n */\r\nclass StcoAtom extends SimpleTableAtom {\r\n    constructor(len) {\r\n        super(len, Token.INT32_BE);\r\n        this.len = len;\r\n    }\r\n}\r\nexports.StcoAtom = StcoAtom;\r\n/**\r\n * Token used to decode text-track from 'mdat' atom (raw data stream)\r\n */\r\nclass ChapterText {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        const titleLen = Token.INT16_BE.get(buf, off + 0);\r\n        const str = new Token.StringType(titleLen, 'utf-8');\r\n        return str.get(buf, off + 2);\r\n    }\r\n}\r\nexports.ChapterText = ChapterText;\r\nfunction readTokenTable(buf, token, off, remainingLen, numberOfEntries) {\r\n    debug(`remainingLen=${remainingLen}, numberOfEntries=${numberOfEntries} * token-len=${token.len}`);\r\n    if (remainingLen === 0)\r\n        return [];\r\n    if (remainingLen !== numberOfEntries * token.len)\r\n        throw new Error('mismatch number-of-entries with remaining atom-length');\r\n    const entries = [];\r\n    // parse offset-table\r\n    for (let n = 0; n < numberOfEntries; ++n) {\r\n        entries.push(token.get(buf, off));\r\n        off += token.len;\r\n    }\r\n    return entries;\r\n}\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/mp4/AtomToken.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/mp4/MP4Parser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/mp4/MP4Parser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.MP4Parser = void 0;\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\r\nconst Atom_1 = __webpack_require__(/*! ./Atom */ \"./node_modules/music-metadata/lib/mp4/Atom.js\");\r\nconst AtomToken = __webpack_require__(/*! ./AtomToken */ \"./node_modules/music-metadata/lib/mp4/AtomToken.js\");\r\nconst ID3v1Parser_1 = __webpack_require__(/*! ../id3v1/ID3v1Parser */ \"./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\r\nconst type_1 = __webpack_require__(/*! ../type */ \"./node_modules/music-metadata/lib/type.js\");\r\nconst debug = initDebug('music-metadata:parser:MP4');\r\nconst tagFormat = 'iTunes';\r\nconst encoderDict = {\r\n    raw: {\r\n        lossy: false,\r\n        format: 'raw'\r\n    },\r\n    MAC3: {\r\n        lossy: true,\r\n        format: 'MACE 3:1'\r\n    },\r\n    MAC6: {\r\n        lossy: true,\r\n        format: 'MACE 6:1'\r\n    },\r\n    ima4: {\r\n        lossy: true,\r\n        format: 'IMA 4:1'\r\n    },\r\n    ulaw: {\r\n        lossy: true,\r\n        format: 'uLaw 2:1'\r\n    },\r\n    alaw: {\r\n        lossy: true,\r\n        format: 'uLaw 2:1'\r\n    },\r\n    Qclp: {\r\n        lossy: true,\r\n        format: 'QUALCOMM PureVoice'\r\n    },\r\n    '.mp3': {\r\n        lossy: true,\r\n        format: 'MPEG-1 layer 3'\r\n    },\r\n    alac: {\r\n        lossy: false,\r\n        format: 'ALAC'\r\n    },\r\n    'ac-3': {\r\n        lossy: true,\r\n        format: 'AC-3'\r\n    },\r\n    mp4a: {\r\n        lossy: true,\r\n        format: 'MPEG-4/AAC'\r\n    },\r\n    mp4s: {\r\n        lossy: true,\r\n        format: 'MP4S'\r\n    },\r\n    // Closed Captioning Media, https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-SW87\r\n    c608: {\r\n        lossy: true,\r\n        format: 'CEA-608'\r\n    },\r\n    c708: {\r\n        lossy: true,\r\n        format: 'CEA-708'\r\n    }\r\n};\r\nfunction distinct(value, index, self) {\r\n    return self.indexOf(value) === index;\r\n}\r\n/*\r\n * Parser for the MP4 (MPEG-4 Part 14) container format\r\n * Standard: ISO/IEC 14496-14\r\n * supporting:\r\n * - QuickTime container\r\n * - MP4 File Format\r\n * - 3GPP file format\r\n * - 3GPP2 file format\r\n *\r\n * MPEG-4 Audio / Part 3 (.m4a)& MPEG 4 Video (m4v, mp4) extension.\r\n * Support for Apple iTunes tags as found in a M4A/M4V files.\r\n * Ref:\r\n *   https://en.wikipedia.org/wiki/ISO_base_media_file_format\r\n *   https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/Metadata/Metadata.html\r\n *   http://atomicparsley.sourceforge.net/mpeg-4files.html\r\n *   https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata\r\n *   https://wiki.multimedia.cx/index.php/QuickTime_container\r\n */\r\nclass MP4Parser extends BasicParser_1.BasicParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.atomParsers = {\r\n            /**\r\n             * Parse movie header (mvhd) atom\r\n             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-56313\r\n             */\r\n            mvhd: async (len) => {\r\n                const _mvhd = await this.tokenizer.readToken(new AtomToken.MvhdAtom(len));\r\n                this.metadata.setFormat('creationTime', _mvhd.creationTime);\r\n                this.metadata.setFormat('modificationTime', _mvhd.modificationTime);\r\n            },\r\n            /**\r\n             * Parse media header (mdhd) atom\r\n             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25615\r\n             */\r\n            mdhd: async (len) => {\r\n                const mdhd_data = await this.tokenizer.readToken(new AtomToken.MdhdAtom(len));\r\n                // this.parse_mxhd(mdhd_data, this.currentTrack);\r\n                const td = this.getTrackDescription();\r\n                td.creationTime = mdhd_data.creationTime;\r\n                td.modificationTime = mdhd_data.modificationTime;\r\n                td.timeScale = mdhd_data.timeScale;\r\n                td.duration = mdhd_data.duration;\r\n            },\r\n            chap: async (len) => {\r\n                const td = this.getTrackDescription();\r\n                const trackIds = [];\r\n                while (len >= Token.UINT32_BE.len) {\r\n                    trackIds.push(await this.tokenizer.readNumber(Token.UINT32_BE));\r\n                    len -= Token.UINT32_BE.len;\r\n                }\r\n                td.chapterList = trackIds;\r\n            },\r\n            tkhd: async (len) => {\r\n                const track = (await this.tokenizer.readToken(new AtomToken.TrackHeaderAtom(len)));\r\n                this.tracks.push(track);\r\n            },\r\n            /**\r\n             * Parse mdat atom.\r\n             * Will scan for chapters\r\n             */\r\n            mdat: async (len) => {\r\n                this.audioLengthInBytes = len;\r\n                this.calculateBitRate();\r\n                if (this.options.includeChapters) {\r\n                    const trackWithChapters = this.tracks.filter(track => track.chapterList);\r\n                    if (trackWithChapters.length === 1) {\r\n                        const chapterTrackIds = trackWithChapters[0].chapterList;\r\n                        const chapterTracks = this.tracks.filter(track => chapterTrackIds.indexOf(track.trackId) !== -1);\r\n                        if (chapterTracks.length === 1) {\r\n                            return this.parseChapterTrack(chapterTracks[0], trackWithChapters[0], len);\r\n                        }\r\n                    }\r\n                }\r\n                await this.tokenizer.ignore(len);\r\n            },\r\n            ftyp: async (len) => {\r\n                const types = [];\r\n                while (len > 0) {\r\n                    const ftype = await this.tokenizer.readToken(AtomToken.ftyp);\r\n                    len -= AtomToken.ftyp.len;\r\n                    const value = ftype.type.replace(/\\W/g, '');\r\n                    if (value.length > 0) {\r\n                        types.push(value); // unshift for backward compatibility\r\n                    }\r\n                }\r\n                debug(`ftyp: ${types.join('/')}`);\r\n                const x = types.filter(distinct).join('/');\r\n                this.metadata.setFormat('container', x);\r\n            },\r\n            /**\r\n             * Parse sample description atom\r\n             */\r\n            stsd: async (len) => {\r\n                const stsd = await this.tokenizer.readToken(new AtomToken.StsdAtom(len));\r\n                const trackDescription = this.getTrackDescription();\r\n                trackDescription.soundSampleDescription = stsd.table.map(dfEntry => this.parseSoundSampleDescription(dfEntry));\r\n            },\r\n            /**\r\n             * sample-to-Chunk Atoms\r\n             */\r\n            stsc: async (len) => {\r\n                const stsc = await this.tokenizer.readToken(new AtomToken.StscAtom(len));\r\n                this.getTrackDescription().sampleToChunkTable = stsc.entries;\r\n            },\r\n            /**\r\n             * time to sample\r\n             */\r\n            stts: async (len) => {\r\n                const stts = await this.tokenizer.readToken(new AtomToken.SttsAtom(len));\r\n                this.getTrackDescription().timeToSampleTable = stts.entries;\r\n            },\r\n            /**\r\n             * Parse sample-sizes atom ('stsz')\r\n             */\r\n            stsz: async (len) => {\r\n                const stsz = await this.tokenizer.readToken(new AtomToken.StszAtom(len));\r\n                const td = this.getTrackDescription();\r\n                td.sampleSize = stsz.sampleSize;\r\n                td.sampleSizeTable = stsz.entries;\r\n            },\r\n            /**\r\n             * Parse chunk-offset atom ('stco')\r\n             */\r\n            stco: async (len) => {\r\n                const stco = await this.tokenizer.readToken(new AtomToken.StcoAtom(len));\r\n                this.getTrackDescription().chunkOffsetTable = stco.entries; // remember chunk offsets\r\n            },\r\n            date: async (len) => {\r\n                const date = await this.tokenizer.readToken(new Token.StringType(len, 'utf-8'));\r\n                this.addTag('date', date);\r\n            }\r\n        };\r\n    }\r\n    static read_BE_Signed_Integer(value) {\r\n        return Token.readIntBE(value, 0, value.length);\r\n    }\r\n    static read_BE_Unsigned_Integer(value) {\r\n        return Token.readUIntBE(value, 0, value.length);\r\n    }\r\n    async parse() {\r\n        this.tracks = [];\r\n        let remainingFileSize = this.tokenizer.fileInfo.size;\r\n        while (!this.tokenizer.fileInfo.size || remainingFileSize > 0) {\r\n            try {\r\n                const token = await this.tokenizer.peekToken(AtomToken.Header);\r\n                if (token.name === '\\0\\0\\0\\0') {\r\n                    const errMsg = `Error at offset=${this.tokenizer.position}: box.id=0`;\r\n                    debug(errMsg);\r\n                    this.addWarning(errMsg);\r\n                    break;\r\n                }\r\n            }\r\n            catch (error) {\r\n                const errMsg = `Error at offset=${this.tokenizer.position}: ${error.message}`;\r\n                debug(errMsg);\r\n                this.addWarning(errMsg);\r\n                break;\r\n            }\r\n            const rootAtom = await Atom_1.Atom.readAtom(this.tokenizer, (atom, remaining) => this.handleAtom(atom, remaining), null, remainingFileSize);\r\n            remainingFileSize -= rootAtom.header.length === 0 ? remainingFileSize : rootAtom.header.length;\r\n        }\r\n        // Post process metadata\r\n        const formatList = [];\r\n        this.tracks.forEach(track => {\r\n            const trackFormats = [];\r\n            track.soundSampleDescription.forEach(ssd => {\r\n                const streamInfo = {};\r\n                const encoderInfo = encoderDict[ssd.dataFormat];\r\n                if (encoderInfo) {\r\n                    trackFormats.push(encoderInfo.format);\r\n                    streamInfo.codecName = encoderInfo.format;\r\n                }\r\n                else {\r\n                    streamInfo.codecName = `<${ssd.dataFormat}>`;\r\n                }\r\n                if (ssd.description) {\r\n                    const { description } = ssd;\r\n                    if (description.sampleRate > 0) {\r\n                        streamInfo.type = type_1.TrackType.audio;\r\n                        streamInfo.audio = {\r\n                            samplingFrequency: description.sampleRate,\r\n                            bitDepth: description.sampleSize,\r\n                            channels: description.numAudioChannels\r\n                        };\r\n                    }\r\n                }\r\n                this.metadata.addStreamInfo(streamInfo);\r\n            });\r\n            if (trackFormats.length >= 1) {\r\n                formatList.push(trackFormats.join('/'));\r\n            }\r\n        });\r\n        if (formatList.length > 0) {\r\n            this.metadata.setFormat('codec', formatList.filter(distinct).join('+'));\r\n        }\r\n        const audioTracks = this.tracks.filter(track => {\r\n            return track.soundSampleDescription.length >= 1 && track.soundSampleDescription[0].description && track.soundSampleDescription[0].description.numAudioChannels > 0;\r\n        });\r\n        if (audioTracks.length >= 1) {\r\n            const audioTrack = audioTracks[0];\r\n            const duration = audioTrack.duration / audioTrack.timeScale;\r\n            this.metadata.setFormat('duration', duration); // calculate duration in seconds\r\n            const ssd = audioTrack.soundSampleDescription[0];\r\n            if (ssd.description) {\r\n                this.metadata.setFormat('sampleRate', ssd.description.sampleRate);\r\n                this.metadata.setFormat('bitsPerSample', ssd.description.sampleSize);\r\n                this.metadata.setFormat('numberOfChannels', ssd.description.numAudioChannels);\r\n            }\r\n            const encoderInfo = encoderDict[ssd.dataFormat];\r\n            if (encoderInfo) {\r\n                this.metadata.setFormat('lossless', !encoderInfo.lossy);\r\n            }\r\n            this.calculateBitRate();\r\n        }\r\n    }\r\n    async handleAtom(atom, remaining) {\r\n        if (atom.parent) {\r\n            switch (atom.parent.header.name) {\r\n                case 'ilst':\r\n                case '<id>':\r\n                    return this.parseMetadataItemData(atom);\r\n            }\r\n        }\r\n        // const payloadLength = atom.getPayloadLength(remaining);\r\n        if (this.atomParsers[atom.header.name]) {\r\n            return this.atomParsers[atom.header.name](remaining);\r\n        }\r\n        else {\r\n            debug(`No parser for atom path=${atom.atomPath}, payload-len=${remaining}, ignoring atom`);\r\n            await this.tokenizer.ignore(remaining);\r\n        }\r\n    }\r\n    getTrackDescription() {\r\n        return this.tracks[this.tracks.length - 1];\r\n    }\r\n    calculateBitRate() {\r\n        if (this.audioLengthInBytes && this.metadata.format.duration) {\r\n            this.metadata.setFormat('bitrate', 8 * this.audioLengthInBytes / this.metadata.format.duration);\r\n        }\r\n    }\r\n    addTag(id, value) {\r\n        this.metadata.addTag(tagFormat, id, value);\r\n    }\r\n    addWarning(message) {\r\n        debug('Warning: ' + message);\r\n        this.metadata.addWarning(message);\r\n    }\r\n    /**\r\n     * Parse data of Meta-item-list-atom (item of 'ilst' atom)\r\n     * @param metaAtom\r\n     * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\r\n     */\r\n    parseMetadataItemData(metaAtom) {\r\n        let tagKey = metaAtom.header.name;\r\n        return metaAtom.readAtoms(this.tokenizer, async (child, remaining) => {\r\n            const payLoadLength = child.getPayloadLength(remaining);\r\n            switch (child.header.name) {\r\n                case 'data': // value atom\r\n                    return this.parseValueAtom(tagKey, child);\r\n                case 'name': // name atom (optional)\r\n                    const name = await this.tokenizer.readToken(new AtomToken.NameAtom(payLoadLength));\r\n                    tagKey += ':' + name.name;\r\n                    break;\r\n                case 'mean': // name atom (optional)\r\n                    const mean = await this.tokenizer.readToken(new AtomToken.NameAtom(payLoadLength));\r\n                    // console.log(\"  %s[%s] = %s\", tagKey, header.name, mean.name);\r\n                    tagKey += ':' + mean.name;\r\n                    break;\r\n                default:\r\n                    const dataAtom = await this.tokenizer.readToken(new Token.BufferType(payLoadLength));\r\n                    this.addWarning('Unsupported meta-item: ' + tagKey + '[' + child.header.name + '] => value=' + dataAtom.toString('hex') + ' ascii=' + dataAtom.toString('ascii'));\r\n            }\r\n        }, metaAtom.getPayloadLength(0));\r\n    }\r\n    async parseValueAtom(tagKey, metaAtom) {\r\n        const dataAtom = await this.tokenizer.readToken(new AtomToken.DataAtom(metaAtom.header.length - AtomToken.Header.len));\r\n        if (dataAtom.type.set !== 0) {\r\n            throw new Error('Unsupported type-set != 0: ' + dataAtom.type.set);\r\n        }\r\n        // Use well-known-type table\r\n        // Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW35\r\n        switch (dataAtom.type.type) {\r\n            case 0: // reserved: Reserved for use where no type needs to be indicated\r\n                switch (tagKey) {\r\n                    case 'trkn':\r\n                    case 'disk':\r\n                        const num = Token.UINT8.get(dataAtom.value, 3);\r\n                        const of = Token.UINT8.get(dataAtom.value, 5);\r\n                        // console.log(\"  %s[data] = %s/%s\", tagKey, num, of);\r\n                        this.addTag(tagKey, num + '/' + of);\r\n                        break;\r\n                    case 'gnre':\r\n                        const genreInt = Token.UINT8.get(dataAtom.value, 1);\r\n                        const genreStr = ID3v1Parser_1.Genres[genreInt - 1];\r\n                        // console.log(\"  %s[data] = %s\", tagKey, genreStr);\r\n                        this.addTag(tagKey, genreStr);\r\n                        break;\r\n                    default:\r\n                    // console.log(\"  reserved-data: name=%s, len=%s, set=%s, type=%s, locale=%s, value{ hex=%s, ascii=%s }\",\r\n                    // header.name, header.length, dataAtom.type.set, dataAtom.type.type, dataAtom.locale, dataAtom.value.toString('hex'), dataAtom.value.toString('ascii'));\r\n                }\r\n                break;\r\n            case 1: // UTF-8: Without any count or NULL terminator\r\n            case 18: // Unknown: Found in m4b in combination with a '©gen' tag\r\n                this.addTag(tagKey, dataAtom.value.toString('utf-8'));\r\n                break;\r\n            case 13: // JPEG\r\n                if (this.options.skipCovers)\r\n                    break;\r\n                this.addTag(tagKey, {\r\n                    format: 'image/jpeg',\r\n                    data: Buffer.from(dataAtom.value)\r\n                });\r\n                break;\r\n            case 14: // PNG\r\n                if (this.options.skipCovers)\r\n                    break;\r\n                this.addTag(tagKey, {\r\n                    format: 'image/png',\r\n                    data: Buffer.from(dataAtom.value)\r\n                });\r\n                break;\r\n            case 21: // BE Signed Integer\r\n                this.addTag(tagKey, MP4Parser.read_BE_Signed_Integer(dataAtom.value));\r\n                break;\r\n            case 22: // BE Unsigned Integer\r\n                this.addTag(tagKey, MP4Parser.read_BE_Unsigned_Integer(dataAtom.value));\r\n                break;\r\n            case 65: // An 8-bit signed integer\r\n                this.addTag(tagKey, dataAtom.value.readInt8(0));\r\n                break;\r\n            case 66: // A big-endian 16-bit signed integer\r\n                this.addTag(tagKey, dataAtom.value.readInt16BE(0));\r\n                break;\r\n            case 67: // A big-endian 32-bit signed integer\r\n                this.addTag(tagKey, dataAtom.value.readInt32BE(0));\r\n                break;\r\n            default:\r\n                this.addWarning(`atom key=${tagKey}, has unknown well-known-type (data-type): ${dataAtom.type.type}`);\r\n        }\r\n    }\r\n    /**\r\n     * @param sampleDescription\r\n     * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-128916\r\n     */\r\n    parseSoundSampleDescription(sampleDescription) {\r\n        const ssd = {\r\n            dataFormat: sampleDescription.dataFormat,\r\n            dataReferenceIndex: sampleDescription.dataReferenceIndex\r\n        };\r\n        let offset = 0;\r\n        const version = AtomToken.SoundSampleDescriptionVersion.get(sampleDescription.description, offset);\r\n        offset += AtomToken.SoundSampleDescriptionVersion.len;\r\n        if (version.version === 0 || version.version === 1) {\r\n            // Sound Sample Description (Version 0)\r\n            ssd.description = AtomToken.SoundSampleDescriptionV0.get(sampleDescription.description, offset);\r\n        }\r\n        else {\r\n            debug(`Warning: sound-sample-description ${version} not implemented`);\r\n        }\r\n        return ssd;\r\n    }\r\n    async parseChapterTrack(chapterTrack, track, len) {\r\n        if (!chapterTrack.sampleSize) {\r\n            if (chapterTrack.chunkOffsetTable.length !== chapterTrack.sampleSizeTable.length)\r\n                throw new Error('Expected equal chunk-offset-table & sample-size-table length.');\r\n        }\r\n        const chapters = [];\r\n        for (let i = 0; i < chapterTrack.chunkOffsetTable.length && len > 0; ++i) {\r\n            const chunkOffset = chapterTrack.chunkOffsetTable[i];\r\n            const nextChunkLen = chunkOffset - this.tokenizer.position;\r\n            const sampleSize = chapterTrack.sampleSize > 0 ? chapterTrack.sampleSize : chapterTrack.sampleSizeTable[i];\r\n            len -= nextChunkLen + sampleSize;\r\n            if (len < 0)\r\n                throw new Error('Chapter chunk exceeding token length');\r\n            await this.tokenizer.ignore(nextChunkLen);\r\n            const title = await this.tokenizer.readToken(new AtomToken.ChapterText(sampleSize));\r\n            debug(`Chapter ${i + 1}: ${title}`);\r\n            const chapter = {\r\n                title,\r\n                sampleOffset: this.findSampleOffset(track, this.tokenizer.position)\r\n            };\r\n            debug(`Chapter title=${chapter.title}, offset=${chapter.sampleOffset}/${this.tracks[0].duration}`);\r\n            chapters.push(chapter);\r\n        }\r\n        this.metadata.setFormat('chapters', chapters);\r\n        await this.tokenizer.ignore(len);\r\n    }\r\n    findSampleOffset(track, chapterOffset) {\r\n        let totalDuration = 0;\r\n        track.timeToSampleTable.forEach(e => {\r\n            totalDuration += e.count * e.duration;\r\n        });\r\n        debug(`Total duration=${totalDuration}`);\r\n        let chunkIndex = 0;\r\n        while (chunkIndex < track.chunkOffsetTable.length && track.chunkOffsetTable[chunkIndex] < chapterOffset) {\r\n            ++chunkIndex;\r\n        }\r\n        return this.getChunkDuration(chunkIndex + 1, track);\r\n    }\r\n    getChunkDuration(chunkId, track) {\r\n        let ttsi = 0;\r\n        let ttsc = track.timeToSampleTable[ttsi].count;\r\n        let ttsd = track.timeToSampleTable[ttsi].duration;\r\n        let curChunkId = 1;\r\n        let samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\r\n        let totalDuration = 0;\r\n        while (curChunkId < chunkId) {\r\n            const nrOfSamples = Math.min(ttsc, samplesPerChunk);\r\n            totalDuration += nrOfSamples * ttsd;\r\n            ttsc -= nrOfSamples;\r\n            samplesPerChunk -= nrOfSamples;\r\n            if (samplesPerChunk === 0) {\r\n                ++curChunkId;\r\n                samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\r\n            }\r\n            else {\r\n                ++ttsi;\r\n                ttsc = track.timeToSampleTable[ttsi].count;\r\n                ttsd = track.timeToSampleTable[ttsi].duration;\r\n            }\r\n        }\r\n        return totalDuration;\r\n    }\r\n    getSamplesPerChunk(chunkId, stcTable) {\r\n        for (let i = 0; i < stcTable.length - 1; ++i) {\r\n            if (chunkId >= stcTable[i].firstChunk && chunkId < stcTable[i + 1].firstChunk) {\r\n                return stcTable[i].samplesPerChunk;\r\n            }\r\n        }\r\n        return stcTable[stcTable.length - 1].samplesPerChunk;\r\n    }\r\n}\r\nexports.MP4Parser = MP4Parser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/mp4/MP4Parser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/mp4/MP4TagMapper.js":
/*!*************************************************************!*\
  !*** ./node_modules/music-metadata/lib/mp4/MP4TagMapper.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.MP4TagMapper = exports.tagType = void 0;\r\nconst CaseInsensitiveTagMap_1 = __webpack_require__(/*! ../common/CaseInsensitiveTagMap */ \"./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\");\r\n/**\r\n * Ref: https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata\r\n */\r\nconst mp4TagMap = {\r\n    '©nam': 'title',\r\n    '©ART': 'artist',\r\n    aART: 'albumartist',\r\n    /**\r\n     * ToDo: Album artist seems to be stored here while Picard documentation says: aART\r\n     */\r\n    '----:com.apple.iTunes:Band': 'albumartist',\r\n    '©alb': 'album',\r\n    '©day': 'date',\r\n    '©cmt': 'comment',\r\n    '©com': 'comment',\r\n    trkn: 'track',\r\n    disk: 'disk',\r\n    '©gen': 'genre',\r\n    covr: 'picture',\r\n    '©wrt': 'composer',\r\n    '©lyr': 'lyrics',\r\n    soal: 'albumsort',\r\n    sonm: 'titlesort',\r\n    soar: 'artistsort',\r\n    soaa: 'albumartistsort',\r\n    soco: 'composersort',\r\n    '----:com.apple.iTunes:LYRICIST': 'lyricist',\r\n    '----:com.apple.iTunes:CONDUCTOR': 'conductor',\r\n    '----:com.apple.iTunes:REMIXER': 'remixer',\r\n    '----:com.apple.iTunes:ENGINEER': 'engineer',\r\n    '----:com.apple.iTunes:PRODUCER': 'producer',\r\n    '----:com.apple.iTunes:DJMIXER': 'djmixer',\r\n    '----:com.apple.iTunes:MIXER': 'mixer',\r\n    '----:com.apple.iTunes:LABEL': 'label',\r\n    '©grp': 'grouping',\r\n    '----:com.apple.iTunes:SUBTITLE': 'subtitle',\r\n    '----:com.apple.iTunes:DISCSUBTITLE': 'discsubtitle',\r\n    cpil: 'compilation',\r\n    tmpo: 'bpm',\r\n    '----:com.apple.iTunes:MOOD': 'mood',\r\n    '----:com.apple.iTunes:MEDIA': 'media',\r\n    '----:com.apple.iTunes:CATALOGNUMBER': 'catalognumber',\r\n    tvsh: 'tvShow',\r\n    tvsn: 'tvSeason',\r\n    tves: 'tvEpisode',\r\n    sosn: 'tvShowSort',\r\n    tven: 'tvEpisodeId',\r\n    tvnn: 'tvNetwork',\r\n    pcst: 'podcast',\r\n    purl: 'podcasturl',\r\n    '----:com.apple.iTunes:MusicBrainz Album Status': 'releasestatus',\r\n    '----:com.apple.iTunes:MusicBrainz Album Type': 'releasetype',\r\n    '----:com.apple.iTunes:MusicBrainz Album Release Country': 'releasecountry',\r\n    '----:com.apple.iTunes:SCRIPT': 'script',\r\n    '----:com.apple.iTunes:LANGUAGE': 'language',\r\n    cprt: 'copyright',\r\n    '©cpy': 'copyright',\r\n    '----:com.apple.iTunes:LICENSE': 'license',\r\n    '©too': 'encodedby',\r\n    pgap: 'gapless',\r\n    '----:com.apple.iTunes:BARCODE': 'barcode',\r\n    '----:com.apple.iTunes:ISRC': 'isrc',\r\n    '----:com.apple.iTunes:ASIN': 'asin',\r\n    '----:com.apple.iTunes:NOTES': 'comment',\r\n    '----:com.apple.iTunes:MusicBrainz Track Id': 'musicbrainz_recordingid',\r\n    '----:com.apple.iTunes:MusicBrainz Release Track Id': 'musicbrainz_trackid',\r\n    '----:com.apple.iTunes:MusicBrainz Album Id': 'musicbrainz_albumid',\r\n    '----:com.apple.iTunes:MusicBrainz Artist Id': 'musicbrainz_artistid',\r\n    '----:com.apple.iTunes:MusicBrainz Album Artist Id': 'musicbrainz_albumartistid',\r\n    '----:com.apple.iTunes:MusicBrainz Release Group Id': 'musicbrainz_releasegroupid',\r\n    '----:com.apple.iTunes:MusicBrainz Work Id': 'musicbrainz_workid',\r\n    '----:com.apple.iTunes:MusicBrainz TRM Id': 'musicbrainz_trmid',\r\n    '----:com.apple.iTunes:MusicBrainz Disc Id': 'musicbrainz_discid',\r\n    '----:com.apple.iTunes:Acoustid Id': 'acoustid_id',\r\n    '----:com.apple.iTunes:Acoustid Fingerprint': 'acoustid_fingerprint',\r\n    '----:com.apple.iTunes:MusicIP PUID': 'musicip_puid',\r\n    '----:com.apple.iTunes:fingerprint': 'musicip_fingerprint',\r\n    '----:com.apple.iTunes:replaygain_track_gain': 'replaygain_track_gain',\r\n    '----:com.apple.iTunes:replaygain_track_peak': 'replaygain_track_peak',\r\n    '----:com.apple.iTunes:replaygain_album_gain': 'replaygain_album_gain',\r\n    '----:com.apple.iTunes:replaygain_album_peak': 'replaygain_album_peak',\r\n    '----:com.apple.iTunes:replaygain_track_minmax': 'replaygain_track_minmax',\r\n    '----:com.apple.iTunes:replaygain_album_minmax': 'replaygain_album_minmax',\r\n    '----:com.apple.iTunes:replaygain_undo': 'replaygain_undo',\r\n    // Additional mappings:\r\n    gnre: 'genre',\r\n    '----:com.apple.iTunes:ALBUMARTISTSORT': 'albumartistsort',\r\n    '----:com.apple.iTunes:ARTISTS': 'artists',\r\n    '----:com.apple.iTunes:ORIGINALDATE': 'originaldate',\r\n    '----:com.apple.iTunes:ORIGINALYEAR': 'originalyear',\r\n    // '----:com.apple.iTunes:PERFORMER': 'performer'\r\n    desc: 'description',\r\n    ldes: 'longDescription',\r\n    '©mvn': 'movement',\r\n    '©mvi': 'movementIndex',\r\n    '©mvc': 'movementTotal',\r\n    '©wrk': 'work',\r\n    catg: 'category',\r\n    egid: 'podcastId',\r\n    hdvd: 'hdVideo',\r\n    keyw: 'keywords',\r\n    shwm: 'showMovement',\r\n    stik: 'stik'\r\n};\r\nexports.tagType = 'iTunes';\r\nclass MP4TagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {\r\n    constructor() {\r\n        super([exports.tagType], mp4TagMap);\r\n    }\r\n}\r\nexports.MP4TagMapper = MP4TagMapper;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/mp4/MP4TagMapper.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Extended Lame Header\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ExtendedLameHeader = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst ReplayGainDataFormat_1 = __webpack_require__(/*! ./ReplayGainDataFormat */ \"./node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js\");\r\n/**\r\n * Info Tag\r\n * @link http://gabriel.mp3-tech.org/mp3infotag.html\r\n * @link https://github.com/quodlibet/mutagen/blob/abd58ee58772224334a18817c3fb31103572f70e/mutagen/mp3/_util.py#L112\r\n */\r\nexports.ExtendedLameHeader = {\r\n    len: 27,\r\n    get: (buf, off) => {\r\n        const track_peak = Token.UINT32_BE.get(buf, off + 2);\r\n        return {\r\n            revision: Util_1.default.getBitAllignedNumber(buf, off, 0, 4),\r\n            vbr_method: Util_1.default.getBitAllignedNumber(buf, off, 4, 4),\r\n            lowpass_filter: 100 * Token.UINT8.get(buf, off + 1),\r\n            track_peak: track_peak === 0 ? undefined : track_peak / Math.pow(2, 23),\r\n            track_gain: ReplayGainDataFormat_1.ReplayGain.get(buf, 6),\r\n            album_gain: ReplayGainDataFormat_1.ReplayGain.get(buf, 8),\r\n            music_length: Token.UINT32_BE.get(buf, off + 20),\r\n            music_crc: Token.UINT8.get(buf, off + 24),\r\n            header_crc: Token.UINT16_BE.get(buf, off + 24)\r\n        };\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/mpeg/MpegParser.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/mpeg/MpegParser.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.MpegParser = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst core_1 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst AbstractID3Parser_1 = __webpack_require__(/*! ../id3v2/AbstractID3Parser */ \"./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\");\r\nconst XingTag_1 = __webpack_require__(/*! ./XingTag */ \"./node_modules/music-metadata/lib/mpeg/XingTag.js\");\r\nconst debug = initDebug('music-metadata:parser:mpeg');\r\n/**\r\n * Cache buffer size used for searching synchronization preabmle\r\n */\r\nconst maxPeekLen = 1024;\r\n/**\r\n * MPEG-4 Audio definitions\r\n * Ref:  https://wiki.multimedia.cx/index.php/MPEG-4_Audio\r\n */\r\nconst MPEG4 = {\r\n    /**\r\n     * Audio Object Types\r\n     */\r\n    AudioObjectTypes: [\r\n        'AAC Main',\r\n        'AAC LC',\r\n        'AAC SSR',\r\n        'AAC LTP' // Long Term Prediction\r\n    ],\r\n    /**\r\n     * Sampling Frequencies\r\n     * https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Sampling_Frequencies\r\n     */\r\n    SamplingFrequencies: [\r\n        96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350, undefined, undefined, -1\r\n    ]\r\n    /**\r\n     * Channel Configurations\r\n     */\r\n};\r\nconst MPEG4_ChannelConfigurations = [\r\n    undefined,\r\n    ['front-center'],\r\n    ['front-left', 'front-right'],\r\n    ['front-center', 'front-left', 'front-right'],\r\n    ['front-center', 'front-left', 'front-right', 'back-center'],\r\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right'],\r\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right', 'LFE-channel'],\r\n    ['front-center', 'front-left', 'front-right', 'side-left', 'side-right', 'back-left', 'back-right', 'LFE-channel']\r\n];\r\n/**\r\n * MPEG Audio Layer I/II/III frame header\r\n * Ref: https://www.mp3-tech.org/programmer/frame_header.html\r\n * Bit layout: AAAAAAAA AAABBCCD EEEEFFGH IIJJKLMM\r\n * Ref: https://wiki.multimedia.cx/index.php/ADTS\r\n */\r\nclass MpegFrameHeader {\r\n    constructor(buf, off) {\r\n        // B(20,19): MPEG Audio versionIndex ID\r\n        this.versionIndex = Util_1.default.getBitAllignedNumber(buf, off + 1, 3, 2);\r\n        // C(18,17): Layer description\r\n        this.layer = MpegFrameHeader.LayerDescription[Util_1.default.getBitAllignedNumber(buf, off + 1, 5, 2)];\r\n        if (this.versionIndex > 1 && this.layer === 0) {\r\n            this.parseAdtsHeader(buf, off); // Audio Data Transport Stream (ADTS)\r\n        }\r\n        else {\r\n            this.parseMpegHeader(buf, off); // Conventional MPEG header\r\n        }\r\n        // D(16): Protection bit (if true 16-bit CRC follows header)\r\n        this.isProtectedByCRC = !Util_1.default.isBitSet(buf, off + 1, 7);\r\n    }\r\n    calcDuration(numFrames) {\r\n        return numFrames * this.calcSamplesPerFrame() / this.samplingRate;\r\n    }\r\n    calcSamplesPerFrame() {\r\n        return MpegFrameHeader.samplesInFrameTable[this.version === 1 ? 0 : 1][this.layer];\r\n    }\r\n    calculateSideInfoLength() {\r\n        if (this.layer !== 3)\r\n            return 2;\r\n        if (this.channelModeIndex === 3) {\r\n            // mono\r\n            if (this.version === 1) {\r\n                return 17;\r\n            }\r\n            else if (this.version === 2 || this.version === 2.5) {\r\n                return 9;\r\n            }\r\n        }\r\n        else {\r\n            if (this.version === 1) {\r\n                return 32;\r\n            }\r\n            else if (this.version === 2 || this.version === 2.5) {\r\n                return 17;\r\n            }\r\n        }\r\n    }\r\n    calcSlotSize() {\r\n        return [null, 4, 1, 1][this.layer];\r\n    }\r\n    parseMpegHeader(buf, off) {\r\n        this.container = 'MPEG';\r\n        // E(15,12): Bitrate index\r\n        this.bitrateIndex = Util_1.default.getBitAllignedNumber(buf, off + 2, 0, 4);\r\n        // F(11,10): Sampling rate frequency index\r\n        this.sampRateFreqIndex = Util_1.default.getBitAllignedNumber(buf, off + 2, 4, 2);\r\n        // G(9): Padding bit\r\n        this.padding = Util_1.default.isBitSet(buf, off + 2, 6);\r\n        // H(8): Private bit\r\n        this.privateBit = Util_1.default.isBitSet(buf, off + 2, 7);\r\n        // I(7,6): Channel Mode\r\n        this.channelModeIndex = Util_1.default.getBitAllignedNumber(buf, off + 3, 0, 2);\r\n        // J(5,4): Mode extension (Only used in Joint stereo)\r\n        this.modeExtension = Util_1.default.getBitAllignedNumber(buf, off + 3, 2, 2);\r\n        // K(3): Copyright\r\n        this.isCopyrighted = Util_1.default.isBitSet(buf, off + 3, 4);\r\n        // L(2): Original\r\n        this.isOriginalMedia = Util_1.default.isBitSet(buf, off + 3, 5);\r\n        // M(3): The original bit indicates, if it is set, that the frame is located on its original media.\r\n        this.emphasis = Util_1.default.getBitAllignedNumber(buf, off + 3, 7, 2);\r\n        this.version = MpegFrameHeader.VersionID[this.versionIndex];\r\n        this.channelMode = MpegFrameHeader.ChannelMode[this.channelModeIndex];\r\n        this.codec = `MPEG ${this.version} Layer ${this.layer}`;\r\n        // Calculate bitrate\r\n        const bitrateInKbps = this.calcBitrate();\r\n        if (!bitrateInKbps) {\r\n            throw new Error('Cannot determine bit-rate');\r\n        }\r\n        this.bitrate = bitrateInKbps * 1000;\r\n        // Calculate sampling rate\r\n        this.samplingRate = this.calcSamplingRate();\r\n        if (this.samplingRate == null) {\r\n            throw new Error('Cannot determine sampling-rate');\r\n        }\r\n    }\r\n    parseAdtsHeader(buf, off) {\r\n        debug(`layer=0 => ADTS`);\r\n        this.version = this.versionIndex === 2 ? 4 : 2;\r\n        this.container = 'ADTS/MPEG-' + this.version;\r\n        const profileIndex = Util_1.default.getBitAllignedNumber(buf, off + 2, 0, 2);\r\n        this.codec = 'AAC';\r\n        this.codecProfile = MPEG4.AudioObjectTypes[profileIndex];\r\n        debug(`MPEG-4 audio-codec=${this.codec}`);\r\n        const samplingFrequencyIndex = Util_1.default.getBitAllignedNumber(buf, off + 2, 2, 4);\r\n        this.samplingRate = MPEG4.SamplingFrequencies[samplingFrequencyIndex];\r\n        debug(`sampling-rate=${this.samplingRate}`);\r\n        const channelIndex = Util_1.default.getBitAllignedNumber(buf, off + 2, 7, 3);\r\n        this.mp4ChannelConfig = MPEG4_ChannelConfigurations[channelIndex];\r\n        debug(`channel-config=${this.mp4ChannelConfig.join('+')}`);\r\n        this.frameLength = Util_1.default.getBitAllignedNumber(buf, off + 3, 6, 2) << 11;\r\n    }\r\n    calcBitrate() {\r\n        if (this.bitrateIndex === 0x00 || // free\r\n            this.bitrateIndex === 0x0F) { // reserved\r\n            return;\r\n        }\r\n        const codecIndex = `${Math.floor(this.version)}${this.layer}`;\r\n        return MpegFrameHeader.bitrate_index[this.bitrateIndex][codecIndex];\r\n    }\r\n    calcSamplingRate() {\r\n        if (this.sampRateFreqIndex === 0x03)\r\n            return null; // 'reserved'\r\n        return MpegFrameHeader.sampling_rate_freq_index[this.version][this.sampRateFreqIndex];\r\n    }\r\n}\r\nMpegFrameHeader.SyncByte1 = 0xFF;\r\nMpegFrameHeader.SyncByte2 = 0xE0;\r\nMpegFrameHeader.VersionID = [2.5, null, 2, 1];\r\nMpegFrameHeader.LayerDescription = [0, 3, 2, 1];\r\nMpegFrameHeader.ChannelMode = ['stereo', 'joint_stereo', 'dual_channel', 'mono'];\r\nMpegFrameHeader.bitrate_index = {\r\n    0x01: { 11: 32, 12: 32, 13: 32, 21: 32, 22: 8, 23: 8 },\r\n    0x02: { 11: 64, 12: 48, 13: 40, 21: 48, 22: 16, 23: 16 },\r\n    0x03: { 11: 96, 12: 56, 13: 48, 21: 56, 22: 24, 23: 24 },\r\n    0x04: { 11: 128, 12: 64, 13: 56, 21: 64, 22: 32, 23: 32 },\r\n    0x05: { 11: 160, 12: 80, 13: 64, 21: 80, 22: 40, 23: 40 },\r\n    0x06: { 11: 192, 12: 96, 13: 80, 21: 96, 22: 48, 23: 48 },\r\n    0x07: { 11: 224, 12: 112, 13: 96, 21: 112, 22: 56, 23: 56 },\r\n    0x08: { 11: 256, 12: 128, 13: 112, 21: 128, 22: 64, 23: 64 },\r\n    0x09: { 11: 288, 12: 160, 13: 128, 21: 144, 22: 80, 23: 80 },\r\n    0x0A: { 11: 320, 12: 192, 13: 160, 21: 160, 22: 96, 23: 96 },\r\n    0x0B: { 11: 352, 12: 224, 13: 192, 21: 176, 22: 112, 23: 112 },\r\n    0x0C: { 11: 384, 12: 256, 13: 224, 21: 192, 22: 128, 23: 128 },\r\n    0x0D: { 11: 416, 12: 320, 13: 256, 21: 224, 22: 144, 23: 144 },\r\n    0x0E: { 11: 448, 12: 384, 13: 320, 21: 256, 22: 160, 23: 160 }\r\n};\r\nMpegFrameHeader.sampling_rate_freq_index = {\r\n    1: { 0x00: 44100, 0x01: 48000, 0x02: 32000 },\r\n    2: { 0x00: 22050, 0x01: 24000, 0x02: 16000 },\r\n    2.5: { 0x00: 11025, 0x01: 12000, 0x02: 8000 }\r\n};\r\nMpegFrameHeader.samplesInFrameTable = [\r\n    /* Layer   I    II   III */\r\n    [0, 384, 1152, 1152],\r\n    [0, 384, 1152, 576] // MPEG-2(.5\r\n];\r\n/**\r\n * MPEG Audio Layer I/II/III\r\n */\r\nconst FrameHeader = {\r\n    len: 4,\r\n    get: (buf, off) => {\r\n        return new MpegFrameHeader(buf, off);\r\n    }\r\n};\r\nfunction getVbrCodecProfile(vbrScale) {\r\n    return 'V' + Math.floor((100 - vbrScale) / 10);\r\n}\r\nclass MpegParser extends AbstractID3Parser_1.AbstractID3Parser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.frameCount = 0;\r\n        this.syncFrameCount = -1;\r\n        this.countSkipFrameData = 0;\r\n        this.totalDataLength = 0;\r\n        this.bitrates = [];\r\n        this.calculateEofDuration = false;\r\n        this.buf_frame_header = Buffer.alloc(4);\r\n        this.syncPeek = {\r\n            buf: Buffer.alloc(maxPeekLen),\r\n            len: 0\r\n        };\r\n    }\r\n    /**\r\n     * Called after ID3 headers have been parsed\r\n     */\r\n    async _parse() {\r\n        this.metadata.setFormat('lossless', false);\r\n        try {\r\n            let quit = false;\r\n            while (!quit) {\r\n                await this.sync();\r\n                quit = await this.parseCommonMpegHeader();\r\n            }\r\n        }\r\n        catch (err) {\r\n            if (err instanceof core_1.EndOfStreamError) {\r\n                debug(`End-of-stream`);\r\n                if (this.calculateEofDuration) {\r\n                    const numberOfSamples = this.frameCount * this.samplesPerFrame;\r\n                    this.metadata.setFormat('numberOfSamples', numberOfSamples);\r\n                    const duration = numberOfSamples / this.metadata.format.sampleRate;\r\n                    debug(`Calculate duration at EOF: ${duration} sec.`, duration);\r\n                    this.metadata.setFormat('duration', duration);\r\n                }\r\n            }\r\n            else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Called after file has been fully parsed, this allows, if present, to exclude the ID3v1.1 header length\r\n     */\r\n    finalize() {\r\n        const format = this.metadata.format;\r\n        const hasID3v1 = this.metadata.native.hasOwnProperty('ID3v1');\r\n        if (format.duration && this.tokenizer.fileInfo.size) {\r\n            const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\r\n            if (format.codecProfile && format.codecProfile[0] === 'V') {\r\n                this.metadata.setFormat('bitrate', mpegSize * 8 / format.duration);\r\n            }\r\n        }\r\n        else if (this.tokenizer.fileInfo.size && format.codecProfile === 'CBR') {\r\n            const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\r\n            const numberOfSamples = Math.round(mpegSize / this.frame_size) * this.samplesPerFrame;\r\n            this.metadata.setFormat('numberOfSamples', numberOfSamples);\r\n            const duration = numberOfSamples / format.sampleRate;\r\n            debug(\"Calculate CBR duration based on file size: %s\", duration);\r\n            this.metadata.setFormat('duration', duration);\r\n        }\r\n    }\r\n    async sync() {\r\n        let gotFirstSync = false;\r\n        while (true) {\r\n            let bo = 0;\r\n            this.syncPeek.len = await this.tokenizer.peekBuffer(this.syncPeek.buf, { length: maxPeekLen, mayBeLess: true });\r\n            if (this.syncPeek.len <= 163) {\r\n                throw new core_1.EndOfStreamError();\r\n            }\r\n            while (true) {\r\n                if (gotFirstSync && (this.syncPeek.buf[bo] & 0xE0) === 0xE0) {\r\n                    this.buf_frame_header[0] = MpegFrameHeader.SyncByte1;\r\n                    this.buf_frame_header[1] = this.syncPeek.buf[bo];\r\n                    await this.tokenizer.ignore(bo);\r\n                    debug(`Sync at offset=${this.tokenizer.position - 1}, frameCount=${this.frameCount}`);\r\n                    if (this.syncFrameCount === this.frameCount) {\r\n                        debug(`Re-synced MPEG stream, frameCount=${this.frameCount}`);\r\n                        this.frameCount = 0;\r\n                        this.frame_size = 0;\r\n                    }\r\n                    this.syncFrameCount = this.frameCount;\r\n                    return; // sync\r\n                }\r\n                else {\r\n                    gotFirstSync = false;\r\n                    bo = this.syncPeek.buf.indexOf(MpegFrameHeader.SyncByte1, bo);\r\n                    if (bo === -1) {\r\n                        if (this.syncPeek.len < this.syncPeek.buf.length) {\r\n                            throw new core_1.EndOfStreamError();\r\n                        }\r\n                        await this.tokenizer.ignore(this.syncPeek.len);\r\n                        break; // continue with next buffer\r\n                    }\r\n                    else {\r\n                        ++bo;\r\n                        gotFirstSync = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Combined ADTS & MPEG (MP2 & MP3) header handling\r\n     * @return {Promise<boolean>} true if parser should quit\r\n     */\r\n    async parseCommonMpegHeader() {\r\n        if (this.frameCount === 0) {\r\n            this.mpegOffset = this.tokenizer.position - 1;\r\n        }\r\n        await this.tokenizer.peekBuffer(this.buf_frame_header, { offset: 1, length: 3 });\r\n        let header;\r\n        try {\r\n            header = FrameHeader.get(this.buf_frame_header, 0);\r\n        }\r\n        catch (err) {\r\n            await this.tokenizer.ignore(1);\r\n            this.metadata.addWarning('Parse error: ' + err.message);\r\n            return false; // sync\r\n        }\r\n        await this.tokenizer.ignore(3);\r\n        this.metadata.setFormat('container', header.container);\r\n        this.metadata.setFormat('codec', header.codec);\r\n        this.metadata.setFormat('lossless', false);\r\n        this.metadata.setFormat('sampleRate', header.samplingRate);\r\n        this.frameCount++;\r\n        if (header.version >= 2 && header.layer === 0) {\r\n            return this.parseAdts(header); // ADTS, usually AAC\r\n        }\r\n        else {\r\n            return this.parseAudioFrameHeader(header); // MP3\r\n        }\r\n    }\r\n    /**\r\n     * @return {Promise<boolean>} true if parser should quit\r\n     */\r\n    async parseAudioFrameHeader(header) {\r\n        this.metadata.setFormat('numberOfChannels', header.channelMode === 'mono' ? 1 : 2);\r\n        this.metadata.setFormat('bitrate', header.bitrate);\r\n        if (this.frameCount < 20 * 10000) {\r\n            debug('offset=%s MP%s bitrate=%s sample-rate=%s', this.tokenizer.position - 4, header.layer, header.bitrate, header.samplingRate);\r\n        }\r\n        const slot_size = header.calcSlotSize();\r\n        if (slot_size === null) {\r\n            throw new Error('invalid slot_size');\r\n        }\r\n        const samples_per_frame = header.calcSamplesPerFrame();\r\n        debug(`samples_per_frame=${samples_per_frame}`);\r\n        const bps = samples_per_frame / 8.0;\r\n        const fsize = (bps * header.bitrate / header.samplingRate) +\r\n            ((header.padding) ? slot_size : 0);\r\n        this.frame_size = Math.floor(fsize);\r\n        this.audioFrameHeader = header;\r\n        this.bitrates.push(header.bitrate);\r\n        // xtra header only exists in first frame\r\n        if (this.frameCount === 1) {\r\n            this.offset = FrameHeader.len;\r\n            await this.skipSideInformation();\r\n            return false;\r\n        }\r\n        if (this.frameCount === 3) {\r\n            // the stream is CBR if the first 3 frame bitrates are the same\r\n            if (this.areAllSame(this.bitrates)) {\r\n                // Actual calculation will be done in finalize\r\n                this.samplesPerFrame = samples_per_frame;\r\n                this.metadata.setFormat('codecProfile', 'CBR');\r\n                if (this.tokenizer.fileInfo.size)\r\n                    return true; // Will calculate duration based on the file size\r\n            }\r\n            else if (this.metadata.format.duration) {\r\n                return true; // We already got the duration, stop processing MPEG stream any further\r\n            }\r\n            if (!this.options.duration) {\r\n                return true; // Enforce duration not enabled, stop processing entire stream\r\n            }\r\n        }\r\n        // once we know the file is VBR attach listener to end of\r\n        // stream so we can do the duration calculation when we\r\n        // have counted all the frames\r\n        if (this.options.duration && this.frameCount === 4) {\r\n            this.samplesPerFrame = samples_per_frame;\r\n            this.calculateEofDuration = true;\r\n        }\r\n        this.offset = 4;\r\n        if (header.isProtectedByCRC) {\r\n            await this.parseCrc();\r\n            return false;\r\n        }\r\n        else {\r\n            await this.skipSideInformation();\r\n            return false;\r\n        }\r\n    }\r\n    async parseAdts(header) {\r\n        const buf = Buffer.alloc(3);\r\n        await this.tokenizer.readBuffer(buf);\r\n        header.frameLength += Util_1.default.getBitAllignedNumber(buf, 0, 0, 11);\r\n        this.totalDataLength += header.frameLength;\r\n        this.samplesPerFrame = 1024;\r\n        const framesPerSec = header.samplingRate / this.samplesPerFrame;\r\n        const bytesPerFrame = this.frameCount === 0 ? 0 : this.totalDataLength / this.frameCount;\r\n        const bitrate = 8 * bytesPerFrame * framesPerSec + 0.5;\r\n        this.metadata.setFormat('bitrate', bitrate);\r\n        debug(`frame-count=${this.frameCount}, size=${header.frameLength} bytes, bit-rate=${bitrate}`);\r\n        await this.tokenizer.ignore(header.frameLength > 7 ? header.frameLength - 7 : 1);\r\n        // Consume remaining header and frame data\r\n        if (this.frameCount === 3) {\r\n            this.metadata.setFormat('codecProfile', header.codecProfile);\r\n            if (header.mp4ChannelConfig) {\r\n                this.metadata.setFormat('numberOfChannels', header.mp4ChannelConfig.length);\r\n            }\r\n            if (this.options.duration) {\r\n                this.calculateEofDuration = true;\r\n            }\r\n            else {\r\n                return true; // Stop parsing after the third frame\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    async parseCrc() {\r\n        this.crc = await this.tokenizer.readNumber(Token.INT16_BE);\r\n        this.offset += 2;\r\n        return this.skipSideInformation();\r\n    }\r\n    async skipSideInformation() {\r\n        const sideinfo_length = this.audioFrameHeader.calculateSideInfoLength();\r\n        // side information\r\n        await this.tokenizer.readToken(new Token.BufferType(sideinfo_length));\r\n        this.offset += sideinfo_length;\r\n        await this.readXtraInfoHeader();\r\n        return;\r\n    }\r\n    async readXtraInfoHeader() {\r\n        const headerTag = await this.tokenizer.readToken(XingTag_1.InfoTagHeaderTag);\r\n        this.offset += XingTag_1.InfoTagHeaderTag.len; // 12\r\n        switch (headerTag) {\r\n            case 'Info':\r\n                this.metadata.setFormat('codecProfile', 'CBR');\r\n                return this.readXingInfoHeader();\r\n            case 'Xing':\r\n                const infoTag = await this.readXingInfoHeader();\r\n                const codecProfile = getVbrCodecProfile(infoTag.vbrScale);\r\n                this.metadata.setFormat('codecProfile', codecProfile);\r\n                return null;\r\n            case 'Xtra':\r\n                // ToDo: ???\r\n                break;\r\n            case 'LAME':\r\n                const version = await this.tokenizer.readToken(XingTag_1.LameEncoderVersion);\r\n                if (this.frame_size >= this.offset + XingTag_1.LameEncoderVersion.len) {\r\n                    this.offset += XingTag_1.LameEncoderVersion.len;\r\n                    this.metadata.setFormat('tool', 'LAME ' + version);\r\n                    await this.skipFrameData(this.frame_size - this.offset);\r\n                    return null;\r\n                }\r\n                else {\r\n                    this.metadata.addWarning('Corrupt LAME header');\r\n                    break;\r\n                }\r\n            // ToDo: ???\r\n        }\r\n        // ToDo: promise duration???\r\n        const frameDataLeft = this.frame_size - this.offset;\r\n        if (frameDataLeft < 0) {\r\n            this.metadata.addWarning('Frame ' + this.frameCount + 'corrupt: negative frameDataLeft');\r\n        }\r\n        else {\r\n            await this.skipFrameData(frameDataLeft);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\r\n     * @returns {Promise<string>}\r\n     */\r\n    async readXingInfoHeader() {\r\n        const _offset = this.tokenizer.position;\r\n        const infoTag = await XingTag_1.readXingHeader(this.tokenizer);\r\n        this.offset += this.tokenizer.position - _offset;\r\n        if (infoTag.lame) {\r\n            this.metadata.setFormat('tool', 'LAME ' + Util_1.default.stripNulls(infoTag.lame.version));\r\n            if (infoTag.lame.extended) {\r\n                // this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain);\r\n                this.metadata.setFormat('trackPeakLevel', infoTag.lame.extended.track_peak);\r\n                if (infoTag.lame.extended.track_gain) {\r\n                    this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain.adjustment);\r\n                }\r\n                if (infoTag.lame.extended.album_gain) {\r\n                    this.metadata.setFormat('albumGain', infoTag.lame.extended.album_gain.adjustment);\r\n                }\r\n                this.metadata.setFormat('duration', infoTag.lame.extended.music_length / 1000);\r\n            }\r\n        }\r\n        if (infoTag.streamSize) {\r\n            const duration = this.audioFrameHeader.calcDuration(infoTag.numFrames);\r\n            this.metadata.setFormat('duration', duration);\r\n            debug('Get duration from Xing header: %s', this.metadata.format.duration);\r\n            return infoTag;\r\n        }\r\n        // frames field is not present\r\n        const frameDataLeft = this.frame_size - this.offset;\r\n        await this.skipFrameData(frameDataLeft);\r\n        return infoTag;\r\n    }\r\n    async skipFrameData(frameDataLeft) {\r\n        if (frameDataLeft < 0)\r\n            throw new Error('frame-data-left cannot be negative');\r\n        await this.tokenizer.ignore(frameDataLeft);\r\n        this.countSkipFrameData += frameDataLeft;\r\n    }\r\n    areAllSame(array) {\r\n        const first = array[0];\r\n        return array.every(element => {\r\n            return element === first;\r\n        });\r\n    }\r\n}\r\nexports.MpegParser = MpegParser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/mpeg/MpegParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js":
/*!**********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ReplayGain = void 0;\r\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\n/**\r\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#name-code\r\n */\r\nvar NameCode;\r\n(function (NameCode) {\r\n    /**\r\n     * not set\r\n     */\r\n    NameCode[NameCode[\"not_set\"] = 0] = \"not_set\";\r\n    /**\r\n     * Radio Gain Adjustment\r\n     */\r\n    NameCode[NameCode[\"radio\"] = 1] = \"radio\";\r\n    /**\r\n     * Audiophile Gain Adjustment\r\n     */\r\n    NameCode[NameCode[\"audiophile\"] = 2] = \"audiophile\";\r\n})(NameCode || (NameCode = {}));\r\n/**\r\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#originator-code\r\n */\r\nvar ReplayGainOriginator;\r\n(function (ReplayGainOriginator) {\r\n    /**\r\n     * Replay Gain unspecified\r\n     */\r\n    ReplayGainOriginator[ReplayGainOriginator[\"unspecified\"] = 0] = \"unspecified\";\r\n    /**\r\n     * Replay Gain pre-set by artist/producer/mastering engineer\r\n     */\r\n    ReplayGainOriginator[ReplayGainOriginator[\"engineer\"] = 1] = \"engineer\";\r\n    /**\r\n     * Replay Gain set by user\r\n     */\r\n    ReplayGainOriginator[ReplayGainOriginator[\"user\"] = 2] = \"user\";\r\n    /**\r\n     * Replay Gain determined automatically, as described on this site\r\n     */\r\n    ReplayGainOriginator[ReplayGainOriginator[\"automatic\"] = 3] = \"automatic\";\r\n    /**\r\n     * Set by simple RMS average\r\n     */\r\n    ReplayGainOriginator[ReplayGainOriginator[\"rms_average\"] = 4] = \"rms_average\";\r\n})(ReplayGainOriginator || (ReplayGainOriginator = {}));\r\n/**\r\n * Replay Gain Data Format\r\n *\r\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format\r\n */\r\nexports.ReplayGain = {\r\n    len: 2,\r\n    get: (buf, off) => {\r\n        const gain_type = Util_1.default.getBitAllignedNumber(buf, off, 0, 3);\r\n        const sign = Util_1.default.getBitAllignedNumber(buf, off, 6, 1);\r\n        const gain_adj = Util_1.default.getBitAllignedNumber(buf, off, 7, 9) / 10.0;\r\n        if (gain_type > 0) {\r\n            return {\r\n                type: Util_1.default.getBitAllignedNumber(buf, off, 0, 3),\r\n                origin: Util_1.default.getBitAllignedNumber(buf, off, 3, 3),\r\n                adjustment: (sign ? -gain_adj : gain_adj)\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/mpeg/XingTag.js":
/*!*********************************************************!*\
  !*** ./node_modules/music-metadata/lib/mpeg/XingTag.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.readXingHeader = exports.XingHeaderFlags = exports.LameEncoderVersion = exports.InfoTagHeaderTag = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst ExtendedLameHeader_1 = __webpack_require__(/*! ./ExtendedLameHeader */ \"./node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js\");\r\n/**\r\n * Info Tag: Xing, LAME\r\n */\r\nexports.InfoTagHeaderTag = new Token.StringType(4, 'ascii');\r\n/**\r\n * LAME TAG value\r\n * Did not find any official documentation for this\r\n * Value e.g.: \"3.98.4\"\r\n */\r\nexports.LameEncoderVersion = new Token.StringType(6, 'ascii');\r\n/**\r\n * Info Tag\r\n * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\r\n */\r\nexports.XingHeaderFlags = {\r\n    len: 4,\r\n    get: (buf, off) => {\r\n        return {\r\n            frames: Util_1.default.isBitSet(buf, off, 31),\r\n            bytes: Util_1.default.isBitSet(buf, off, 30),\r\n            toc: Util_1.default.isBitSet(buf, off, 29),\r\n            vbrScale: Util_1.default.isBitSet(buf, off, 28)\r\n        };\r\n    }\r\n};\r\n// /**\r\n//  * XING Header Tag\r\n//  * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\r\n//  */\r\nasync function readXingHeader(tokenizer) {\r\n    const flags = await tokenizer.readToken(exports.XingHeaderFlags);\r\n    const xingInfoTag = {};\r\n    if (flags.frames) {\r\n        xingInfoTag.numFrames = await tokenizer.readToken(Token.UINT32_BE);\r\n    }\r\n    if (flags.bytes) {\r\n        xingInfoTag.streamSize = await tokenizer.readToken(Token.UINT32_BE);\r\n    }\r\n    if (flags.toc) {\r\n        xingInfoTag.toc = Buffer.alloc(100);\r\n        await tokenizer.readBuffer(xingInfoTag.toc);\r\n    }\r\n    if (flags.vbrScale) {\r\n        xingInfoTag.vbrScale = await tokenizer.readToken(Token.UINT32_BE);\r\n    }\r\n    const lameTag = await tokenizer.peekToken(new Token.StringType(4, 'ascii'));\r\n    if (lameTag === 'LAME') {\r\n        await tokenizer.ignore(4);\r\n        xingInfoTag.lame = {\r\n            version: await tokenizer.readToken(new Token.StringType(5, 'ascii'))\r\n        };\r\n        const match = xingInfoTag.lame.version.match(/\\d+.\\d+/g);\r\n        if (match) {\r\n            const majorMinorVersion = xingInfoTag.lame.version.match(/\\d+.\\d+/g)[0]; // e.g. 3.97\r\n            const version = majorMinorVersion.split('.').map(n => parseInt(n, 10));\r\n            if (version[0] >= 3 && version[1] >= 90) {\r\n                xingInfoTag.lame.extended = await tokenizer.readToken(ExtendedLameHeader_1.ExtendedLameHeader);\r\n            }\r\n        }\r\n    }\r\n    return xingInfoTag;\r\n}\r\nexports.readXingHeader = readXingHeader;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/mpeg/XingTag.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/musepack/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst MpcSv8Parser_1 = __webpack_require__(/*! ./sv8/MpcSv8Parser */ \"./node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js\");\r\nconst MpcSv7Parser_1 = __webpack_require__(/*! ./sv7/MpcSv7Parser */ \"./node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js\");\r\nconst AbstractID3Parser_1 = __webpack_require__(/*! ../id3v2/AbstractID3Parser */ \"./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\");\r\nconst debug = initDebug('music-metadata:parser:musepack');\r\nclass MusepackParser extends AbstractID3Parser_1.AbstractID3Parser {\r\n    async _parse() {\r\n        const signature = await this.tokenizer.peekToken(new Token.StringType(3, 'binary'));\r\n        let mpcParser;\r\n        switch (signature) {\r\n            case 'MP+': {\r\n                debug('Musepack stream-version 7');\r\n                mpcParser = new MpcSv7Parser_1.MpcSv7Parser();\r\n                break;\r\n            }\r\n            case 'MPC': {\r\n                debug('Musepack stream-version 8');\r\n                mpcParser = new MpcSv8Parser_1.MpcSv8Parser();\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error('Invalid Musepack signature prefix');\r\n            }\r\n        }\r\n        mpcParser.init(this.metadata, this.tokenizer, this.options);\r\n        return mpcParser.parse();\r\n    }\r\n}\r\nexports.default = MusepackParser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/musepack/index.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/musepack/sv7/BitReader.js":
/*!*******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/sv7/BitReader.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BitReader = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nclass BitReader {\r\n    constructor(tokenizer) {\r\n        this.tokenizer = tokenizer;\r\n        this.pos = 0;\r\n        this.dword = undefined;\r\n    }\r\n    /**\r\n     *\r\n     * @param bits 1..30 bits\r\n     */\r\n    async read(bits) {\r\n        while (this.dword === undefined) {\r\n            this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\r\n        }\r\n        let out = this.dword;\r\n        this.pos += bits;\r\n        if (this.pos < 32) {\r\n            out >>>= (32 - this.pos);\r\n            return out & ((1 << bits) - 1);\r\n        }\r\n        else {\r\n            this.pos -= 32;\r\n            if (this.pos === 0) {\r\n                this.dword = undefined;\r\n                return out & ((1 << bits) - 1);\r\n            }\r\n            else {\r\n                this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\r\n                if (this.pos) {\r\n                    out <<= this.pos;\r\n                    out |= this.dword >>> (32 - this.pos);\r\n                }\r\n                return out & ((1 << bits) - 1);\r\n            }\r\n        }\r\n    }\r\n    async ignore(bits) {\r\n        if (this.pos > 0) {\r\n            const remaining = 32 - this.pos;\r\n            this.dword = undefined;\r\n            bits -= remaining;\r\n            this.pos = 0;\r\n        }\r\n        const remainder = bits % 32;\r\n        const numOfWords = (bits - remainder) / 32;\r\n        await this.tokenizer.ignore(numOfWords * 4);\r\n        return this.read(remainder);\r\n    }\r\n}\r\nexports.BitReader = BitReader;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/musepack/sv7/BitReader.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js":
/*!**********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.MpcSv7Parser = void 0;\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst BasicParser_1 = __webpack_require__(/*! ../../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\r\nconst SV7 = __webpack_require__(/*! ./StreamVersion7 */ \"./node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js\");\r\nconst APEv2Parser_1 = __webpack_require__(/*! ../../apev2/APEv2Parser */ \"./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\r\nconst BitReader_1 = __webpack_require__(/*! ./BitReader */ \"./node_modules/music-metadata/lib/musepack/sv7/BitReader.js\");\r\nconst debug = initDebug('music-metadata:parser:musepack');\r\nclass MpcSv7Parser extends BasicParser_1.BasicParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.audioLength = 0;\r\n    }\r\n    async parse() {\r\n        const header = await this.tokenizer.readToken(SV7.Header);\r\n        if (header.signature !== 'MP+')\r\n            throw new Error('Unexpected magic number');\r\n        debug(`stream-version=${header.streamMajorVersion}.${header.streamMinorVersion}`);\r\n        this.metadata.setFormat('container', 'Musepack, SV7');\r\n        this.metadata.setFormat('sampleRate', header.sampleFrequency);\r\n        const numberOfSamples = 1152 * (header.frameCount - 1) + header.lastFrameLength;\r\n        this.metadata.setFormat('numberOfSamples', numberOfSamples);\r\n        this.duration = numberOfSamples / header.sampleFrequency;\r\n        this.metadata.setFormat('duration', this.duration);\r\n        this.bitreader = new BitReader_1.BitReader(this.tokenizer);\r\n        this.metadata.setFormat('numberOfChannels', header.midSideStereo || header.intensityStereo ? 2 : 1);\r\n        const version = await this.bitreader.read(8);\r\n        this.metadata.setFormat('codec', (version / 100).toFixed(2));\r\n        await this.skipAudioData(header.frameCount);\r\n        debug(`End of audio stream, switching to APEv2, offset=${this.tokenizer.position}`);\r\n        return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\r\n    }\r\n    async skipAudioData(frameCount) {\r\n        while (frameCount-- > 0) {\r\n            const frameLength = await this.bitreader.read(20);\r\n            this.audioLength += 20 + frameLength;\r\n            await this.bitreader.ignore(frameLength);\r\n        }\r\n        // last frame\r\n        const lastFrameLength = await this.bitreader.read(11);\r\n        this.audioLength += lastFrameLength;\r\n        this.metadata.setFormat('bitrate', this.audioLength / this.duration);\r\n    }\r\n}\r\nexports.MpcSv7Parser = MpcSv7Parser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js":
/*!************************************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Header = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst Util_1 = __webpack_require__(/*! ../../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\n/**\r\n * BASIC STRUCTURE\r\n */\r\nexports.Header = {\r\n    len: 6 * 4,\r\n    get: (buf, off) => {\r\n        const header = {\r\n            // word 0\r\n            signature: buf.toString(\"binary\", off, off + 3),\r\n            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)\r\n            streamMinorVersion: Util_1.default.getBitAllignedNumber(buf, off + 3, 0, 4),\r\n            streamMajorVersion: Util_1.default.getBitAllignedNumber(buf, off + 3, 4, 4),\r\n            // word 1\r\n            frameCount: Token.UINT32_LE.get(buf, off + 4),\r\n            // word 2\r\n            maxLevel: Token.UINT16_LE.get(buf, off + 8),\r\n            sampleFrequency: [44100, 48000, 37800, 32000][Util_1.default.getBitAllignedNumber(buf, off + 10, 0, 2)],\r\n            link: Util_1.default.getBitAllignedNumber(buf, off + 10, 2, 2),\r\n            profile: Util_1.default.getBitAllignedNumber(buf, off + 10, 4, 4),\r\n            maxBand: Util_1.default.getBitAllignedNumber(buf, off + 11, 0, 6),\r\n            intensityStereo: Util_1.default.isBitSet(buf, off + 11, 6),\r\n            midSideStereo: Util_1.default.isBitSet(buf, off + 11, 7),\r\n            // word 3\r\n            titlePeak: Token.UINT16_LE.get(buf, off + 12),\r\n            titleGain: Token.UINT16_LE.get(buf, off + 14),\r\n            // word 4\r\n            albumPeak: Token.UINT16_LE.get(buf, off + 16),\r\n            albumGain: Token.UINT16_LE.get(buf, off + 18),\r\n            // word\r\n            lastFrameLength: (Token.UINT32_LE.get(buf, off + 20) >>> 20) & 0x7FF,\r\n            trueGapless: Util_1.default.isBitSet(buf, off + 23, 0)\r\n        };\r\n        header.lastFrameLength = header.trueGapless ? (Token.UINT32_LE.get(buf, 20) >>> 20) & 0x7FF : 0;\r\n        return header;\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js":
/*!**********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.MpcSv8Parser = void 0;\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst BasicParser_1 = __webpack_require__(/*! ../../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\r\nconst SV8 = __webpack_require__(/*! ./StreamVersion8 */ \"./node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js\");\r\nconst APEv2Parser_1 = __webpack_require__(/*! ../../apev2/APEv2Parser */ \"./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\r\nconst FourCC_1 = __webpack_require__(/*! ../../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\r\nconst debug = initDebug('music-metadata:parser:musepack');\r\nclass MpcSv8Parser extends BasicParser_1.BasicParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.audioLength = 0;\r\n    }\r\n    async parse() {\r\n        const signature = await this.tokenizer.readToken(FourCC_1.FourCcToken);\r\n        if (signature !== 'MPCK')\r\n            throw new Error('Invalid Magic number');\r\n        this.metadata.setFormat('container', 'Musepack, SV8');\r\n        return this.parsePacket();\r\n    }\r\n    async parsePacket() {\r\n        const sv8reader = new SV8.StreamReader(this.tokenizer);\r\n        do {\r\n            const header = await sv8reader.readPacketHeader();\r\n            debug(`packet-header key=${header.key}, payloadLength=${header.payloadLength}`);\r\n            switch (header.key) {\r\n                case 'SH': // Stream Header\r\n                    const sh = await sv8reader.readStreamHeader(header.payloadLength);\r\n                    this.metadata.setFormat('numberOfSamples', sh.sampleCount);\r\n                    this.metadata.setFormat('sampleRate', sh.sampleFrequency);\r\n                    this.metadata.setFormat('duration', sh.sampleCount / sh.sampleFrequency);\r\n                    this.metadata.setFormat('numberOfChannels', sh.channelCount);\r\n                    break;\r\n                case 'AP': // Audio Packet\r\n                    this.audioLength += header.payloadLength;\r\n                    await this.tokenizer.ignore(header.payloadLength);\r\n                    break;\r\n                case 'RG': // Replaygain\r\n                case 'EI': // Encoder Info\r\n                case 'SO': // Seek Table Offset\r\n                case 'ST': // Seek Table\r\n                case 'CT': // Chapter-Tag\r\n                    await this.tokenizer.ignore(header.payloadLength);\r\n                    break;\r\n                case 'SE': // Stream End\r\n                    this.metadata.setFormat('bitrate', this.audioLength * 8 / this.metadata.format.duration);\r\n                    return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\r\n                default:\r\n                    throw new Error(`Unexpected header: ${header.key}`);\r\n            }\r\n        } while (true);\r\n    }\r\n}\r\nexports.MpcSv8Parser = MpcSv8Parser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js":
/*!************************************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StreamReader = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst Util_1 = __webpack_require__(/*! ../../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst debug = initDebug('music-metadata:parser:musepack:sv8');\r\nconst PacketKey = new Token.StringType(2, 'binary');\r\n/**\r\n * Stream Header Packet part 1\r\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\r\n */\r\nconst SH_part1 = {\r\n    len: 5,\r\n    get: (buf, off) => {\r\n        return {\r\n            crc: Token.UINT32_LE.get(buf, off),\r\n            streamVersion: Token.UINT8.get(buf, off + 4)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Stream Header Packet part 3\r\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\r\n */\r\nconst SH_part3 = {\r\n    len: 2,\r\n    get: (buf, off) => {\r\n        return {\r\n            sampleFrequency: [44100, 48000, 37800, 32000][Util_1.default.getBitAllignedNumber(buf, off, 0, 3)],\r\n            maxUsedBands: Util_1.default.getBitAllignedNumber(buf, off, 3, 5),\r\n            channelCount: Util_1.default.getBitAllignedNumber(buf, off + 1, 0, 4) + 1,\r\n            msUsed: Util_1.default.isBitSet(buf, off + 1, 4),\r\n            audioBlockFrames: Util_1.default.getBitAllignedNumber(buf, off + 1, 5, 3)\r\n        };\r\n    }\r\n};\r\nclass StreamReader {\r\n    constructor(tokenizer) {\r\n        this.tokenizer = tokenizer;\r\n    }\r\n    async readPacketHeader() {\r\n        const key = await this.tokenizer.readToken(PacketKey);\r\n        const size = await this.readVariableSizeField();\r\n        return {\r\n            key,\r\n            payloadLength: size.value - 2 - size.len\r\n        };\r\n    }\r\n    async readStreamHeader(size) {\r\n        const streamHeader = {};\r\n        debug(`Reading SH at offset=${this.tokenizer.position}`);\r\n        const part1 = await this.tokenizer.readToken(SH_part1);\r\n        size -= SH_part1.len;\r\n        Object.assign(streamHeader, part1);\r\n        debug(`SH.streamVersion = ${part1.streamVersion}`);\r\n        const sampleCount = await this.readVariableSizeField();\r\n        size -= sampleCount.len;\r\n        streamHeader.sampleCount = sampleCount.value;\r\n        const bs = await this.readVariableSizeField();\r\n        size -= bs.len;\r\n        streamHeader.beginningOfSilence = bs.value;\r\n        const part3 = await this.tokenizer.readToken(SH_part3);\r\n        size -= SH_part3.len;\r\n        Object.assign(streamHeader, part3);\r\n        // assert.equal(size, 0);\r\n        await this.tokenizer.ignore(size);\r\n        return streamHeader;\r\n    }\r\n    async readVariableSizeField(len = 1, hb = 0) {\r\n        let n = await this.tokenizer.readNumber(Token.UINT8);\r\n        if ((n & 0x80) === 0) {\r\n            return { len, value: hb + n };\r\n        }\r\n        n &= 0x7F;\r\n        n += hb;\r\n        return this.readVariableSizeField(len + 1, n << 7);\r\n    }\r\n}\r\nexports.StreamReader = StreamReader;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/OggParser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/OggParser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.OggParser = exports.SegmentTable = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\r\nconst VorbisParser_1 = __webpack_require__(/*! ./vorbis/VorbisParser */ \"./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js\");\r\nconst OpusParser_1 = __webpack_require__(/*! ./opus/OpusParser */ \"./node_modules/music-metadata/lib/ogg/opus/OpusParser.js\");\r\nconst SpeexParser_1 = __webpack_require__(/*! ./speex/SpeexParser */ \"./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js\");\r\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\r\nconst TheoraParser_1 = __webpack_require__(/*! ./theora/TheoraParser */ \"./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js\");\r\nconst core_1 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\r\nconst debug = initDebug('music-metadata:parser:ogg');\r\nclass SegmentTable {\r\n    constructor(header) {\r\n        this.len = header.page_segments;\r\n    }\r\n    static sum(buf, off, len) {\r\n        let s = 0;\r\n        for (let i = off; i < off + len; ++i) {\r\n            s += buf[i];\r\n        }\r\n        return s;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            totalPageSize: SegmentTable.sum(buf, off, this.len)\r\n        };\r\n    }\r\n}\r\nexports.SegmentTable = SegmentTable;\r\n/**\r\n * Parser for Ogg logical bitstream framing\r\n */\r\nclass OggParser extends BasicParser_1.BasicParser {\r\n    /**\r\n     * Parse page\r\n     * @returns {Promise<void>}\r\n     */\r\n    async parse() {\r\n        debug('pos=%s, parsePage()', this.tokenizer.position);\r\n        try {\r\n            let header;\r\n            do {\r\n                header = await this.tokenizer.readToken(OggParser.Header);\r\n                if (header.capturePattern !== 'OggS')\r\n                    throw new Error('Invalid Ogg capture pattern');\r\n                this.metadata.setFormat('container', 'Ogg');\r\n                this.header = header;\r\n                this.pageNumber = header.pageSequenceNo;\r\n                debug('page#=%s, Ogg.id=%s', header.pageSequenceNo, header.capturePattern);\r\n                const segmentTable = await this.tokenizer.readToken(new SegmentTable(header));\r\n                debug('totalPageSize=%s', segmentTable.totalPageSize);\r\n                const pageData = await this.tokenizer.readToken(new Token.BufferType(segmentTable.totalPageSize));\r\n                debug('firstPage=%s, lastPage=%s, continued=%s', header.headerType.firstPage, header.headerType.lastPage, header.headerType.continued);\r\n                if (header.headerType.firstPage) {\r\n                    const id = new Token.StringType(7, 'ascii').get(pageData, 0);\r\n                    switch (id) {\r\n                        case '\\x01vorbis': // Ogg/Vorbis\r\n                            debug('Set page consumer to Ogg/Vorbis');\r\n                            this.pageConsumer = new VorbisParser_1.VorbisParser(this.metadata, this.options);\r\n                            break;\r\n                        case 'OpusHea': // Ogg/Opus\r\n                            debug('Set page consumer to Ogg/Opus');\r\n                            this.pageConsumer = new OpusParser_1.OpusParser(this.metadata, this.options, this.tokenizer);\r\n                            break;\r\n                        case 'Speex  ': // Ogg/Speex\r\n                            debug('Set page consumer to Ogg/Speex');\r\n                            this.pageConsumer = new SpeexParser_1.SpeexParser(this.metadata, this.options, this.tokenizer);\r\n                            break;\r\n                        case 'fishead':\r\n                        case '\\x00theora': // Ogg/Theora\r\n                            debug('Set page consumer to Ogg/Theora');\r\n                            this.pageConsumer = new TheoraParser_1.TheoraParser(this.metadata, this.options, this.tokenizer);\r\n                            break;\r\n                        default:\r\n                            throw new Error('gg audio-codec not recognized (id=' + id + ')');\r\n                    }\r\n                }\r\n                this.pageConsumer.parsePage(header, pageData);\r\n            } while (!header.headerType.lastPage);\r\n        }\r\n        catch (err) {\r\n            if (err instanceof core_1.EndOfStreamError) {\r\n                this.metadata.addWarning('Last OGG-page is not marked with last-page flag');\r\n                debug(`End-of-stream`);\r\n                this.metadata.addWarning('Last OGG-page is not marked with last-page flag');\r\n                if (this.header) {\r\n                    this.pageConsumer.calculateDuration(this.header);\r\n                }\r\n            }\r\n            else if (err.message.startsWith('FourCC')) {\r\n                if (this.pageNumber > 0) {\r\n                    // ignore this error: work-around if last OGG-page is not marked with last-page flag\r\n                    this.metadata.addWarning('Invalid FourCC ID, maybe last OGG-page is not marked with last-page flag');\r\n                    this.pageConsumer.flush();\r\n                }\r\n            }\r\n            else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.OggParser = OggParser;\r\nOggParser.Header = {\r\n    len: 27,\r\n    get: (buf, off) => {\r\n        return {\r\n            capturePattern: FourCC_1.FourCcToken.get(buf, off),\r\n            version: buf.readUInt8(off + 4),\r\n            headerType: {\r\n                continued: Util_1.default.strtokBITSET.get(buf, off + 5, 0),\r\n                firstPage: Util_1.default.strtokBITSET.get(buf, off + 5, 1),\r\n                lastPage: Util_1.default.strtokBITSET.get(buf, off + 5, 2)\r\n            },\r\n            // packet_flag: buf.readUInt8(off + 5),\r\n            absoluteGranulePosition: buf.readIntLE(off + 6, 6),\r\n            streamSerialNumber: Token.UINT32_LE.get(buf, off + 14),\r\n            pageSequenceNo: Token.UINT32_LE.get(buf, off + 18),\r\n            pageChecksum: Token.UINT32_LE.get(buf, off + 22),\r\n            page_segments: buf.readUInt8(off + 26)\r\n        };\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/ogg/OggParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/opus/Opus.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/opus/Opus.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.IdHeader = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\n/**\r\n * Opus ID Header parser\r\n * Ref: https://wiki.xiph.org/OggOpus#ID_Header\r\n */\r\nclass IdHeader {\r\n    constructor(len) {\r\n        this.len = len;\r\n        if (len < 19) {\r\n            throw new Error(\"ID-header-page 0 should be at least 19 bytes long\");\r\n        }\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            magicSignature: new Token.StringType(8, 'ascii').get(buf, off + 0),\r\n            version: buf.readUInt8(off + 8),\r\n            channelCount: buf.readUInt8(off + 9),\r\n            preSkip: buf.readInt16LE(off + 10),\r\n            inputSampleRate: buf.readInt32LE(off + 12),\r\n            outputGain: buf.readInt16LE(off + 16),\r\n            channelMapping: buf.readUInt8(off + 18)\r\n        };\r\n    }\r\n}\r\nexports.IdHeader = IdHeader;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/ogg/opus/Opus.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/opus/OpusParser.js":
/*!****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/opus/OpusParser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.OpusParser = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst Opus = __webpack_require__(/*! ./Opus */ \"./node_modules/music-metadata/lib/ogg/opus/Opus.js\");\r\nconst VorbisParser_1 = __webpack_require__(/*! ../vorbis/VorbisParser */ \"./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js\");\r\n/**\r\n * Opus parser\r\n * Internet Engineering Task Force (IETF) - RFC 6716\r\n * Used by OggParser\r\n */\r\nclass OpusParser extends VorbisParser_1.VorbisParser {\r\n    constructor(metadata, options, tokenizer) {\r\n        super(metadata, options);\r\n        this.tokenizer = tokenizer;\r\n        this.lastPos = -1;\r\n    }\r\n    /**\r\n     * Parse first Opus Ogg page\r\n     * @param {IPageHeader} header\r\n     * @param {Buffer} pageData\r\n     */\r\n    parseFirstPage(header, pageData) {\r\n        this.metadata.setFormat('codec', 'Opus');\r\n        // Parse Opus ID Header\r\n        this.idHeader = new Opus.IdHeader(pageData.length).get(pageData, 0);\r\n        if (this.idHeader.magicSignature !== \"OpusHead\")\r\n            throw new Error(\"Illegal ogg/Opus magic-signature\");\r\n        this.metadata.setFormat('sampleRate', this.idHeader.inputSampleRate);\r\n        this.metadata.setFormat('numberOfChannels', this.idHeader.channelCount);\r\n    }\r\n    parseFullPage(pageData) {\r\n        const magicSignature = new Token.StringType(8, 'ascii').get(pageData, 0);\r\n        switch (magicSignature) {\r\n            case 'OpusTags':\r\n                this.parseUserCommentList(pageData, 8);\r\n                this.lastPos = this.tokenizer.position - pageData.length;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    calculateDuration(header) {\r\n        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {\r\n            // Calculate duration\r\n            const pos_48bit = header.absoluteGranulePosition - this.idHeader.preSkip;\r\n            this.metadata.setFormat('numberOfSamples', pos_48bit);\r\n            this.metadata.setFormat('duration', pos_48bit / 48000);\r\n            if (this.lastPos !== -1 && this.tokenizer.fileInfo.size && this.metadata.format.duration) {\r\n                const dataSize = this.tokenizer.fileInfo.size - this.lastPos;\r\n                this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.OpusParser = OpusParser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/ogg/opus/OpusParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/speex/Speex.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/speex/Speex.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Header = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst Util_1 = __webpack_require__(/*! ../../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\n/**\r\n * Speex Header Packet\r\n * Ref: https://www.speex.org/docs/manual/speex-manual/node8.html#SECTION00830000000000000000\r\n */\r\nexports.Header = {\r\n    len: 80,\r\n    get: (buf, off) => {\r\n        return {\r\n            speex: new Token.StringType(8, 'ascii').get(buf, off + 0),\r\n            version: Util_1.default.trimRightNull(new Token.StringType(20, 'ascii').get(buf, off + 8)),\r\n            version_id: buf.readInt32LE(off + 28),\r\n            header_size: buf.readInt32LE(off + 32),\r\n            rate: buf.readInt32LE(off + 36),\r\n            mode: buf.readInt32LE(off + 40),\r\n            mode_bitstream_version: buf.readInt32LE(off + 44),\r\n            nb_channels: buf.readInt32LE(off + 48),\r\n            bitrate: buf.readInt32LE(off + 52),\r\n            frame_size: buf.readInt32LE(off + 56),\r\n            vbr: buf.readInt32LE(off + 60),\r\n            frames_per_packet: buf.readInt32LE(off + 64),\r\n            extra_headers: buf.readInt32LE(off + 68),\r\n            reserved1: buf.readInt32LE(off + 72),\r\n            reserved2: buf.readInt32LE(off + 76)\r\n        };\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/ogg/speex/Speex.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js":
/*!******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SpeexParser = void 0;\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst Speex = __webpack_require__(/*! ./Speex */ \"./node_modules/music-metadata/lib/ogg/speex/Speex.js\");\r\nconst VorbisParser_1 = __webpack_require__(/*! ../vorbis/VorbisParser */ \"./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js\");\r\nconst debug = initDebug('music-metadata:parser:ogg:speex');\r\n/**\r\n * Speex, RFC 5574\r\n * Ref:\r\n *   https://www.speex.org/docs/manual/speex-manual/\r\n *   https://tools.ietf.org/html/rfc5574\r\n */\r\nclass SpeexParser extends VorbisParser_1.VorbisParser {\r\n    constructor(metadata, options, tokenizer) {\r\n        super(metadata, options);\r\n        this.tokenizer = tokenizer;\r\n    }\r\n    /**\r\n     * Parse first Speex Ogg page\r\n     * @param {IPageHeader} header\r\n     * @param {Buffer} pageData\r\n     */\r\n    parseFirstPage(header, pageData) {\r\n        debug('First Ogg/Speex page');\r\n        const speexHeader = Speex.Header.get(pageData, 0);\r\n        this.metadata.setFormat('codec', `Speex ${speexHeader.version}`);\r\n        this.metadata.setFormat('numberOfChannels', speexHeader.nb_channels);\r\n        this.metadata.setFormat('sampleRate', speexHeader.rate);\r\n        if (speexHeader.bitrate !== -1) {\r\n            this.metadata.setFormat('bitrate', speexHeader.bitrate);\r\n        }\r\n    }\r\n}\r\nexports.SpeexParser = SpeexParser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/theora/Theora.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/theora/Theora.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.IdentificationHeader = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\n/**\r\n * 6.2 Identification Header\r\n * Ref: https://theora.org/doc/Theora.pdf: 6.2 Identification Header Decode\r\n */\r\nexports.IdentificationHeader = {\r\n    len: 42,\r\n    get: (buf, off) => {\r\n        return {\r\n            id: new Token.StringType(7, 'ascii').get(buf, off),\r\n            vmaj: buf.readUInt8(off + 7),\r\n            vmin: buf.readUInt8(off + 8),\r\n            vrev: buf.readUInt8(off + 9),\r\n            vmbw: buf.readUInt16BE(off + 10),\r\n            vmbh: buf.readUInt16BE(off + 17),\r\n            nombr: Token.UINT24_BE.get(buf, off + 37),\r\n            nqual: buf.readUInt8(off + 40)\r\n        };\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/ogg/theora/Theora.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.TheoraParser = void 0;\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst Theora_1 = __webpack_require__(/*! ./Theora */ \"./node_modules/music-metadata/lib/ogg/theora/Theora.js\");\r\nconst debug = initDebug('music-metadata:parser:ogg:theora');\r\n/**\r\n * Ref:\r\n *   https://theora.org/doc/Theora.pdf\r\n */\r\nclass TheoraParser {\r\n    constructor(metadata, options, tokenizer) {\r\n        this.metadata = metadata;\r\n        this.tokenizer = tokenizer;\r\n    }\r\n    /**\r\n     * Vorbis 1 parser\r\n     * @param header Ogg Page Header\r\n     * @param pageData Page data\r\n     */\r\n    parsePage(header, pageData) {\r\n        if (header.headerType.firstPage) {\r\n            this.parseFirstPage(header, pageData);\r\n        }\r\n    }\r\n    flush() {\r\n        debug('flush');\r\n    }\r\n    calculateDuration(header) {\r\n        debug('duration calculation not implemented');\r\n    }\r\n    /**\r\n     * Parse first Theora Ogg page. the initial identification header packet\r\n     * @param {IPageHeader} header\r\n     * @param {Buffer} pageData\r\n     */\r\n    parseFirstPage(header, pageData) {\r\n        debug('First Ogg/Theora page');\r\n        this.metadata.setFormat('codec', 'Theora');\r\n        const idHeader = Theora_1.IdentificationHeader.get(pageData, 0);\r\n        this.metadata.setFormat('bitrate', idHeader.nombr);\r\n    }\r\n}\r\nexports.TheoraParser = TheoraParser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.IdentificationHeader = exports.CommonHeader = exports.VorbisPictureToken = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst ID3v2Token_1 = __webpack_require__(/*! ../../id3v2/ID3v2Token */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\r\n/**\r\n * Parse the METADATA_BLOCK_PICTURE\r\n * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE\r\n * Ref: https://xiph.org/flac/format.html#metadata_block_picture\r\n * // ToDo: move to ID3 / APIC?\r\n */\r\nclass VorbisPictureToken {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    static fromBase64(base64str) {\r\n        return this.fromBuffer(Buffer.from(base64str, 'base64'));\r\n    }\r\n    static fromBuffer(buffer) {\r\n        const pic = new VorbisPictureToken(buffer.length);\r\n        return pic.get(buffer, 0);\r\n    }\r\n    get(buffer, offset) {\r\n        const type = ID3v2Token_1.AttachedPictureType[Token.UINT32_BE.get(buffer, offset)];\r\n        const mimeLen = Token.UINT32_BE.get(buffer, offset += 4);\r\n        const format = buffer.toString('utf-8', offset += 4, offset + mimeLen);\r\n        const descLen = Token.UINT32_BE.get(buffer, offset += mimeLen);\r\n        const description = buffer.toString('utf-8', offset += 4, offset + descLen);\r\n        const width = Token.UINT32_BE.get(buffer, offset += descLen);\r\n        const height = Token.UINT32_BE.get(buffer, offset += 4);\r\n        const colour_depth = Token.UINT32_BE.get(buffer, offset += 4);\r\n        const indexed_color = Token.UINT32_BE.get(buffer, offset += 4);\r\n        const picDataLen = Token.UINT32_BE.get(buffer, offset += 4);\r\n        const data = Buffer.from(buffer.slice(offset += 4, offset + picDataLen));\r\n        return {\r\n            type,\r\n            format,\r\n            description,\r\n            width,\r\n            height,\r\n            colour_depth,\r\n            indexed_color,\r\n            data\r\n        };\r\n    }\r\n}\r\nexports.VorbisPictureToken = VorbisPictureToken;\r\n/**\r\n * Comment header decoder\r\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\r\n */\r\nexports.CommonHeader = {\r\n    len: 7,\r\n    get: (buf, off) => {\r\n        return {\r\n            packetType: buf.readUInt8(off),\r\n            vorbis: new Token.StringType(6, 'ascii').get(buf, off + 1)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Identification header decoder\r\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2\r\n */\r\nexports.IdentificationHeader = {\r\n    len: 23,\r\n    get: (buf, off) => {\r\n        return {\r\n            version: buf.readUInt32LE(off + 0),\r\n            channelMode: buf.readUInt8(off + 4),\r\n            sampleRate: buf.readUInt32LE(off + 5),\r\n            bitrateMax: buf.readUInt32LE(off + 9),\r\n            bitrateNominal: buf.readUInt32LE(off + 13),\r\n            bitrateMin: buf.readUInt32LE(off + 17)\r\n        };\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js":
/*!*********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.VorbisDecoder = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nclass VorbisDecoder {\r\n    constructor(data, offset) {\r\n        this.data = data;\r\n        this.offset = offset;\r\n    }\r\n    readInt32() {\r\n        const value = Token.UINT32_LE.get(this.data, this.offset);\r\n        this.offset += 4;\r\n        return value;\r\n    }\r\n    readStringUtf8() {\r\n        const len = this.readInt32();\r\n        const value = this.data.toString('utf8', this.offset, this.offset + len);\r\n        this.offset += len;\r\n        return value;\r\n    }\r\n    parseUserComment() {\r\n        const offset0 = this.offset;\r\n        const v = this.readStringUtf8();\r\n        const idx = v.indexOf('=');\r\n        return {\r\n            key: v.slice(0, idx).toUpperCase(),\r\n            value: v.slice(idx + 1),\r\n            len: this.offset - offset0\r\n        };\r\n    }\r\n}\r\nexports.VorbisDecoder = VorbisDecoder;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.VorbisParser = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst _debug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst VorbisDecoder_1 = __webpack_require__(/*! ./VorbisDecoder */ \"./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js\");\r\nconst Vorbis_1 = __webpack_require__(/*! ./Vorbis */ \"./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js\");\r\nconst debug = _debug('music-metadata:parser:ogg:vorbis1');\r\n/**\r\n * Vorbis 1 Parser.\r\n * Used by OggParser\r\n */\r\nclass VorbisParser {\r\n    constructor(metadata, options) {\r\n        this.metadata = metadata;\r\n        this.options = options;\r\n        this.pageSegments = [];\r\n    }\r\n    /**\r\n     * Vorbis 1 parser\r\n     * @param header Ogg Page Header\r\n     * @param pageData Page data\r\n     */\r\n    parsePage(header, pageData) {\r\n        if (header.headerType.firstPage) {\r\n            this.parseFirstPage(header, pageData);\r\n        }\r\n        else {\r\n            if (header.headerType.continued) {\r\n                if (this.pageSegments.length === 0) {\r\n                    throw new Error(\"Cannot continue on previous page\");\r\n                }\r\n                this.pageSegments.push(pageData);\r\n            }\r\n            if (header.headerType.lastPage || !header.headerType.continued) {\r\n                // Flush page segments\r\n                if (this.pageSegments.length > 0) {\r\n                    const fullPage = Buffer.concat(this.pageSegments);\r\n                    this.parseFullPage(fullPage);\r\n                }\r\n                // Reset page segments\r\n                this.pageSegments = header.headerType.lastPage ? [] : [pageData];\r\n            }\r\n        }\r\n        if (header.headerType.lastPage) {\r\n            this.calculateDuration(header);\r\n        }\r\n    }\r\n    flush() {\r\n        this.parseFullPage(Buffer.concat(this.pageSegments));\r\n    }\r\n    parseUserComment(pageData, offset) {\r\n        const decoder = new VorbisDecoder_1.VorbisDecoder(pageData, offset);\r\n        const tag = decoder.parseUserComment();\r\n        this.addTag(tag.key, tag.value);\r\n        return tag.len;\r\n    }\r\n    addTag(id, value) {\r\n        if (id === 'METADATA_BLOCK_PICTURE' && (typeof value === 'string')) {\r\n            if (this.options.skipCovers) {\r\n                debug(`Ignore picture`);\r\n                return;\r\n            }\r\n            value = Vorbis_1.VorbisPictureToken.fromBase64(value);\r\n            debug(`Push picture: id=${id}, format=${value.format}`);\r\n        }\r\n        else {\r\n            debug(`Push tag: id=${id}, value=${value}`);\r\n        }\r\n        this.metadata.addTag('vorbis', id, value);\r\n    }\r\n    calculateDuration(header) {\r\n        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {\r\n            // Calculate duration\r\n            this.metadata.setFormat('numberOfSamples', header.absoluteGranulePosition);\r\n            this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);\r\n        }\r\n    }\r\n    /**\r\n     * Parse first Ogg/Vorbis page\r\n     * @param {IPageHeader} header\r\n     * @param {Buffer} pageData\r\n     */\r\n    parseFirstPage(header, pageData) {\r\n        this.metadata.setFormat('codec', 'Vorbis I');\r\n        debug(\"Parse first page\");\r\n        // Parse  Vorbis common header\r\n        const commonHeader = Vorbis_1.CommonHeader.get(pageData, 0);\r\n        if (commonHeader.vorbis !== 'vorbis')\r\n            throw new Error('Metadata does not look like Vorbis');\r\n        if (commonHeader.packetType === 1) {\r\n            const idHeader = Vorbis_1.IdentificationHeader.get(pageData, Vorbis_1.CommonHeader.len);\r\n            this.metadata.setFormat('sampleRate', idHeader.sampleRate);\r\n            this.metadata.setFormat('bitrate', idHeader.bitrateNominal);\r\n            this.metadata.setFormat('numberOfChannels', idHeader.channelMode);\r\n            debug(\"sample-rate=%s[hz], bitrate=%s[b/s], channel-mode=%s\", idHeader.sampleRate, idHeader.bitrateNominal, idHeader.channelMode);\r\n        }\r\n        else\r\n            throw new Error('First Ogg page should be type 1: the identification header');\r\n    }\r\n    parseFullPage(pageData) {\r\n        // New page\r\n        const commonHeader = Vorbis_1.CommonHeader.get(pageData, 0);\r\n        debug(\"Parse full page: type=%s, byteLength=%s\", commonHeader.packetType, pageData.byteLength);\r\n        switch (commonHeader.packetType) {\r\n            case 3: //  type 3: comment header\r\n                return this.parseUserCommentList(pageData, Vorbis_1.CommonHeader.len);\r\n            case 1: // type 1: the identification header\r\n            case 5: // type 5: setup header type\r\n                break; // ignore\r\n        }\r\n    }\r\n    /**\r\n     * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2\r\n     */\r\n    parseUserCommentList(pageData, offset) {\r\n        const strLen = Token.UINT32_LE.get(pageData, offset);\r\n        offset += 4;\r\n        // const vendorString = new Token.StringType(strLen, 'utf-8').get(pageData, offset);\r\n        offset += strLen;\r\n        let userCommentListLength = Token.UINT32_LE.get(pageData, offset);\r\n        offset += 4;\r\n        while (userCommentListLength-- > 0) {\r\n            offset += this.parseUserComment(pageData, offset);\r\n        }\r\n    }\r\n}\r\nexports.VorbisParser = VorbisParser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/vorbis/VorbisTagMapper.js":
/*!***********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/vorbis/VorbisTagMapper.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.VorbisTagMapper = void 0;\r\nconst GenericTagMapper_1 = __webpack_require__(/*! ../../common/GenericTagMapper */ \"./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\r\n/**\r\n * Vorbis tag mappings\r\n *\r\n * Mapping from native header format to one or possibly more 'common' entries\r\n * The common entries aim to read the same information from different media files\r\n * independent of the underlying format\r\n */\r\nconst vorbisTagMap = {\r\n    TITLE: 'title',\r\n    ARTIST: 'artist',\r\n    ARTISTS: 'artists',\r\n    ALBUMARTIST: 'albumartist',\r\n    'ALBUM ARTIST': 'albumartist',\r\n    ALBUM: 'album',\r\n    DATE: 'date',\r\n    ORIGINALDATE: 'originaldate',\r\n    ORIGINALYEAR: 'originalyear',\r\n    COMMENT: 'comment',\r\n    TRACKNUMBER: 'track',\r\n    DISCNUMBER: 'disk',\r\n    GENRE: 'genre',\r\n    METADATA_BLOCK_PICTURE: 'picture',\r\n    COMPOSER: 'composer',\r\n    LYRICS: 'lyrics',\r\n    ALBUMSORT: 'albumsort',\r\n    TITLESORT: 'titlesort',\r\n    WORK: 'work',\r\n    ARTISTSORT: 'artistsort',\r\n    ALBUMARTISTSORT: 'albumartistsort',\r\n    COMPOSERSORT: 'composersort',\r\n    LYRICIST: 'lyricist',\r\n    WRITER: 'writer',\r\n    CONDUCTOR: 'conductor',\r\n    // 'PERFORMER=artist (instrument)': 'performer:instrument', // ToDo\r\n    REMIXER: 'remixer',\r\n    ARRANGER: 'arranger',\r\n    ENGINEER: 'engineer',\r\n    PRODUCER: 'producer',\r\n    DJMIXER: 'djmixer',\r\n    MIXER: 'mixer',\r\n    LABEL: 'label',\r\n    GROUPING: 'grouping',\r\n    SUBTITLE: 'subtitle',\r\n    DISCSUBTITLE: 'discsubtitle',\r\n    TRACKTOTAL: 'totaltracks',\r\n    DISCTOTAL: 'totaldiscs',\r\n    COMPILATION: 'compilation',\r\n    RATING: 'rating',\r\n    BPM: 'bpm',\r\n    KEY: 'key',\r\n    MOOD: 'mood',\r\n    MEDIA: 'media',\r\n    CATALOGNUMBER: 'catalognumber',\r\n    RELEASESTATUS: 'releasestatus',\r\n    RELEASETYPE: 'releasetype',\r\n    RELEASECOUNTRY: 'releasecountry',\r\n    SCRIPT: 'script',\r\n    LANGUAGE: 'language',\r\n    COPYRIGHT: 'copyright',\r\n    LICENSE: 'license',\r\n    ENCODEDBY: 'encodedby',\r\n    ENCODERSETTINGS: 'encodersettings',\r\n    BARCODE: 'barcode',\r\n    ISRC: 'isrc',\r\n    ASIN: 'asin',\r\n    MUSICBRAINZ_TRACKID: 'musicbrainz_recordingid',\r\n    MUSICBRAINZ_RELEASETRACKID: 'musicbrainz_trackid',\r\n    MUSICBRAINZ_ALBUMID: 'musicbrainz_albumid',\r\n    MUSICBRAINZ_ARTISTID: 'musicbrainz_artistid',\r\n    MUSICBRAINZ_ALBUMARTISTID: 'musicbrainz_albumartistid',\r\n    MUSICBRAINZ_RELEASEGROUPID: 'musicbrainz_releasegroupid',\r\n    MUSICBRAINZ_WORKID: 'musicbrainz_workid',\r\n    MUSICBRAINZ_TRMID: 'musicbrainz_trmid',\r\n    MUSICBRAINZ_DISCID: 'musicbrainz_discid',\r\n    ACOUSTID_ID: 'acoustid_id',\r\n    ACOUSTID_ID_FINGERPRINT: 'acoustid_fingerprint',\r\n    MUSICIP_PUID: 'musicip_puid',\r\n    // 'FINGERPRINT=MusicMagic Fingerprint {fingerprint}': 'musicip_fingerprint', // ToDo\r\n    WEBSITE: 'website',\r\n    NOTES: 'notes',\r\n    TOTALTRACKS: 'totaltracks',\r\n    TOTALDISCS: 'totaldiscs',\r\n    // Discogs\r\n    DISCOGS_ARTIST_ID: 'discogs_artist_id',\r\n    DISCOGS_ARTISTS: 'artists',\r\n    DISCOGS_ARTIST_NAME: 'artists',\r\n    DISCOGS_ALBUM_ARTISTS: 'albumartist',\r\n    DISCOGS_CATALOG: 'catalognumber',\r\n    DISCOGS_COUNTRY: 'releasecountry',\r\n    DISCOGS_DATE: 'originaldate',\r\n    DISCOGS_LABEL: 'label',\r\n    DISCOGS_LABEL_ID: 'discogs_label_id',\r\n    DISCOGS_MASTER_RELEASE_ID: 'discogs_master_release_id',\r\n    DISCOGS_RATING: 'discogs_rating',\r\n    DISCOGS_RELEASED: 'date',\r\n    DISCOGS_RELEASE_ID: 'discogs_release_id',\r\n    DISCOGS_VOTES: 'discogs_votes',\r\n    CATALOGID: 'catalognumber',\r\n    STYLE: 'genre',\r\n    //\r\n    REPLAYGAIN_TRACK_GAIN: 'replaygain_track_gain',\r\n    REPLAYGAIN_TRACK_PEAK: 'replaygain_track_peak',\r\n    REPLAYGAIN_ALBUM_GAIN: 'replaygain_album_gain',\r\n    REPLAYGAIN_ALBUM_PEAK: 'replaygain_album_peak',\r\n    // To Sure if these (REPLAYGAIN_MINMAX, REPLAYGAIN_ALBUM_MINMAX & REPLAYGAIN_UNDO) are used for Vorbis:\r\n    REPLAYGAIN_MINMAX: 'replaygain_track_minmax',\r\n    REPLAYGAIN_ALBUM_MINMAX: 'replaygain_album_minmax',\r\n    REPLAYGAIN_UNDO: 'replaygain_undo'\r\n};\r\nclass VorbisTagMapper extends GenericTagMapper_1.CommonTagMapper {\r\n    static toRating(email, rating) {\r\n        return {\r\n            source: email ? email.toLowerCase() : email,\r\n            rating: parseFloat(rating) * GenericTagMapper_1.CommonTagMapper.maxRatingScore\r\n        };\r\n    }\r\n    constructor() {\r\n        super(['vorbis'], vorbisTagMap);\r\n    }\r\n    postMap(tag) {\r\n        if (tag.id.indexOf('RATING:') === 0) {\r\n            const keys = tag.id.split(':');\r\n            tag.value = VorbisTagMapper.toRating(keys[1], tag.value);\r\n            tag.id = keys[0];\r\n        }\r\n    }\r\n}\r\nexports.VorbisTagMapper = VorbisTagMapper;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/ogg/vorbis/VorbisTagMapper.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/riff/RiffChunk.js":
/*!***********************************************************!*\
  !*** ./node_modules/music-metadata/lib/riff/RiffChunk.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ListInfoTagValue = exports.Header = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\n/**\r\n * Common RIFF chunk header\r\n */\r\nexports.Header = {\r\n    len: 8,\r\n    get: (buf, off) => {\r\n        return {\r\n            // Group-ID\r\n            chunkID: buf.toString('binary', off, off + 4),\r\n            // Size\r\n            chunkSize: buf.readUInt32LE(off + 4)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Token to parse RIFF-INFO tag value\r\n */\r\nclass ListInfoTagValue {\r\n    constructor(tagHeader) {\r\n        this.tagHeader = tagHeader;\r\n        this.len = tagHeader.chunkSize;\r\n        this.len += this.len & 1; // if it is an odd length, round up to even\r\n    }\r\n    get(buf, off) {\r\n        return new Token.StringType(this.tagHeader.chunkSize, 'ascii').get(buf, off);\r\n    }\r\n}\r\nexports.ListInfoTagValue = ListInfoTagValue;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/riff/RiffChunk.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/riff/RiffInfoTagMap.js":
/*!****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/riff/RiffInfoTagMap.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.RiffInfoTagMapper = exports.riffInfoTagMap = void 0;\r\nconst GenericTagMapper_1 = __webpack_require__(/*! ../common/GenericTagMapper */ \"./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\r\n/**\r\n * RIFF Info Tags; part of the EXIF 2.3\r\n * Ref: http://owl.phy.queensu.ca/~phil/exiftool/TagNames/RIFF.html#Info\r\n */\r\nexports.riffInfoTagMap = {\r\n    IART: 'artist',\r\n    ICRD: 'date',\r\n    INAM: 'title',\r\n    TITL: 'title',\r\n    IPRD: 'album',\r\n    ITRK: 'track',\r\n    COMM: 'comment',\r\n    ICMT: 'comment',\r\n    ICNT: 'releasecountry',\r\n    GNRE: 'genre',\r\n    IWRI: 'writer',\r\n    RATE: 'rating',\r\n    YEAR: 'year',\r\n    ISFT: 'encodedby',\r\n    CODE: 'encodedby',\r\n    TURL: 'website',\r\n    IGNR: 'genre',\r\n    IENG: 'engineer',\r\n    ITCH: 'technician',\r\n    IMED: 'media',\r\n    IRPD: 'album' // Product, where the file was intended for\r\n};\r\nclass RiffInfoTagMapper extends GenericTagMapper_1.CommonTagMapper {\r\n    constructor() {\r\n        super(['exif'], exports.riffInfoTagMap);\r\n    }\r\n}\r\nexports.RiffInfoTagMapper = RiffInfoTagMapper;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/riff/RiffInfoTagMap.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/type.js":
/*!*************************************************!*\
  !*** ./node_modules/music-metadata/lib/type.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.TrackType = void 0;\r\nvar TrackType;\r\n(function (TrackType) {\r\n    TrackType[TrackType[\"video\"] = 1] = \"video\";\r\n    TrackType[TrackType[\"audio\"] = 2] = \"audio\";\r\n    TrackType[TrackType[\"complex\"] = 3] = \"complex\";\r\n    TrackType[TrackType[\"logo\"] = 4] = \"logo\";\r\n    TrackType[TrackType[\"subtitle\"] = 17] = \"subtitle\";\r\n    TrackType[TrackType[\"button\"] = 18] = \"button\";\r\n    TrackType[TrackType[\"control\"] = 32] = \"control\";\r\n})(TrackType = exports.TrackType || (exports.TrackType = {}));\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/type.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/wav/WaveChunk.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/wav/WaveChunk.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.FactChunk = exports.Format = exports.WaveFormat = void 0;\r\n/**\r\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd317599(v=vs.85).aspx\r\n */\r\nvar WaveFormat;\r\n(function (WaveFormat) {\r\n    WaveFormat[WaveFormat[\"PCM\"] = 1] = \"PCM\";\r\n    // MPEG-4 and AAC Audio Types\r\n    WaveFormat[WaveFormat[\"ADPCM\"] = 2] = \"ADPCM\";\r\n    WaveFormat[WaveFormat[\"IEEE_FLOAT\"] = 3] = \"IEEE_FLOAT\";\r\n    WaveFormat[WaveFormat[\"MPEG_ADTS_AAC\"] = 5632] = \"MPEG_ADTS_AAC\";\r\n    WaveFormat[WaveFormat[\"MPEG_LOAS\"] = 5634] = \"MPEG_LOAS\";\r\n    WaveFormat[WaveFormat[\"RAW_AAC1\"] = 255] = \"RAW_AAC1\";\r\n    // Dolby Audio Types\r\n    WaveFormat[WaveFormat[\"DOLBY_AC3_SPDIF\"] = 146] = \"DOLBY_AC3_SPDIF\";\r\n    WaveFormat[WaveFormat[\"DVM\"] = 8192] = \"DVM\";\r\n    WaveFormat[WaveFormat[\"RAW_SPORT\"] = 576] = \"RAW_SPORT\";\r\n    WaveFormat[WaveFormat[\"ESST_AC3\"] = 577] = \"ESST_AC3\";\r\n    WaveFormat[WaveFormat[\"DRM\"] = 9] = \"DRM\";\r\n    WaveFormat[WaveFormat[\"DTS2\"] = 8193] = \"DTS2\";\r\n    WaveFormat[WaveFormat[\"MPEG\"] = 80] = \"MPEG\";\r\n})(WaveFormat = exports.WaveFormat || (exports.WaveFormat = {}));\r\n/**\r\n * format chunk; chunk-id is \"fmt \"\r\n * http://soundfile.sapp.org/doc/WaveFormat/\r\n */\r\nclass Format {\r\n    constructor(header) {\r\n        if (header.chunkSize < 16)\r\n            throw new Error('Invalid chunk size');\r\n        this.len = header.chunkSize;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            wFormatTag: buf.readUInt16LE(off),\r\n            nChannels: buf.readUInt16LE(off + 2),\r\n            nSamplesPerSec: buf.readUInt32LE(off + 4),\r\n            nAvgBytesPerSec: buf.readUInt32LE(off + 8),\r\n            nBlockAlign: buf.readUInt16LE(off + 12),\r\n            wBitsPerSample: buf.readUInt16LE(off + 14)\r\n        };\r\n    }\r\n}\r\nexports.Format = Format;\r\n/**\r\n * Fact chunk; chunk-id is \"fact\"\r\n * http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html\r\n * http://www.recordingblogs.com/wiki/fact-chunk-of-a-wave-file\r\n */\r\nclass FactChunk {\r\n    constructor(header) {\r\n        if (header.chunkSize < 4) {\r\n            throw new Error('Invalid fact chunk size.');\r\n        }\r\n        this.len = header.chunkSize;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            dwSampleLength: buf.readUInt32LE(off)\r\n        };\r\n    }\r\n}\r\nexports.FactChunk = FactChunk;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/wav/WaveChunk.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/wav/WaveParser.js":
/*!***********************************************************!*\
  !*** ./node_modules/music-metadata/lib/wav/WaveParser.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.WaveParser = void 0;\r\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst riff = __webpack_require__(/*! ../riff/RiffChunk */ \"./node_modules/music-metadata/lib/riff/RiffChunk.js\");\r\nconst WaveChunk = __webpack_require__(/*! ./../wav/WaveChunk */ \"./node_modules/music-metadata/lib/wav/WaveChunk.js\");\r\nconst ID3v2Parser_1 = __webpack_require__(/*! ../id3v2/ID3v2Parser */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\r\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\r\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\r\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\r\nconst debug = initDebug('music-metadata:parser:RIFF');\r\n/**\r\n * Resource Interchange File Format (RIFF) Parser\r\n *\r\n * WAVE PCM soundfile format\r\n *\r\n * Ref:\r\n *  http://www.johnloomis.org/cpe102/asgn/asgn1/riff.html\r\n *  http://soundfile.sapp.org/doc/WaveFormat\r\n *\r\n *  ToDo: Split WAVE part from RIFF parser\r\n */\r\nclass WaveParser extends BasicParser_1.BasicParser {\r\n    async parse() {\r\n        const riffHeader = await this.tokenizer.readToken(riff.Header);\r\n        debug(`pos=${this.tokenizer.position}, parse: chunkID=${riffHeader.chunkID}`);\r\n        if (riffHeader.chunkID !== 'RIFF')\r\n            return; // Not RIFF format\r\n        return this.parseRiffChunk(riffHeader.chunkSize).catch(err => {\r\n            if (!(err instanceof strtok3.EndOfStreamError)) {\r\n                throw err;\r\n            }\r\n        });\r\n    }\r\n    async parseRiffChunk(chunkSize) {\r\n        const type = await this.tokenizer.readToken(FourCC_1.FourCcToken);\r\n        this.metadata.setFormat('container', type);\r\n        switch (type) {\r\n            case 'WAVE':\r\n                return this.readWaveChunk(chunkSize - FourCC_1.FourCcToken.len);\r\n            default:\r\n                throw new Error(`Unsupported RIFF format: RIFF/${type}`);\r\n        }\r\n    }\r\n    async readWaveChunk(remaining) {\r\n        while (remaining >= riff.Header.len) {\r\n            const header = await this.tokenizer.readToken(riff.Header);\r\n            remaining -= riff.Header.len + header.chunkSize;\r\n            if (header.chunkSize > remaining) {\r\n                this.metadata.addWarning('Data chunk size exceeds file size');\r\n            }\r\n            this.header = header;\r\n            debug(`pos=${this.tokenizer.position}, readChunk: chunkID=RIFF/WAVE/${header.chunkID}`);\r\n            switch (header.chunkID) {\r\n                case 'LIST':\r\n                    await this.parseListTag(header);\r\n                    break;\r\n                case 'fact': // extended Format chunk,\r\n                    this.metadata.setFormat('lossless', false);\r\n                    this.fact = await this.tokenizer.readToken(new WaveChunk.FactChunk(header));\r\n                    break;\r\n                case 'fmt ': // The Util Chunk, non-PCM Formats\r\n                    const fmt = await this.tokenizer.readToken(new WaveChunk.Format(header));\r\n                    let subFormat = WaveChunk.WaveFormat[fmt.wFormatTag];\r\n                    if (!subFormat) {\r\n                        debug('WAVE/non-PCM format=' + fmt.wFormatTag);\r\n                        subFormat = 'non-PCM (' + fmt.wFormatTag + ')';\r\n                    }\r\n                    this.metadata.setFormat('codec', subFormat);\r\n                    this.metadata.setFormat('bitsPerSample', fmt.wBitsPerSample);\r\n                    this.metadata.setFormat('sampleRate', fmt.nSamplesPerSec);\r\n                    this.metadata.setFormat('numberOfChannels', fmt.nChannels);\r\n                    this.metadata.setFormat('bitrate', fmt.nBlockAlign * fmt.nSamplesPerSec * 8);\r\n                    this.blockAlign = fmt.nBlockAlign;\r\n                    break;\r\n                case 'id3 ': // The way Picard, FooBar currently stores, ID3 meta-data\r\n                case 'ID3 ': // The way Mp3Tags stores ID3 meta-data\r\n                    const id3_data = await this.tokenizer.readToken(new Token.BufferType(header.chunkSize));\r\n                    const rst = strtok3.fromBuffer(id3_data);\r\n                    await new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, rst, this.options);\r\n                    break;\r\n                case 'data': // PCM-data\r\n                    if (this.metadata.format.lossless !== false) {\r\n                        this.metadata.setFormat('lossless', true);\r\n                    }\r\n                    let chunkSize = header.chunkSize;\r\n                    if (this.tokenizer.fileInfo.size) {\r\n                        const calcRemaining = this.tokenizer.fileInfo.size - this.tokenizer.position;\r\n                        if (calcRemaining < chunkSize) {\r\n                            this.metadata.addWarning('data chunk length exceeding file length');\r\n                            chunkSize = calcRemaining;\r\n                        }\r\n                    }\r\n                    const numberOfSamples = this.fact ? this.fact.dwSampleLength : (chunkSize === 0xffffffff ? undefined : chunkSize / this.blockAlign);\r\n                    if (numberOfSamples) {\r\n                        this.metadata.setFormat('numberOfSamples', numberOfSamples);\r\n                        this.metadata.setFormat('duration', numberOfSamples / this.metadata.format.sampleRate);\r\n                    }\r\n                    this.metadata.setFormat('bitrate', this.metadata.format.numberOfChannels * this.blockAlign * this.metadata.format.sampleRate); // ToDo: check me\r\n                    await this.tokenizer.ignore(header.chunkSize);\r\n                    break;\r\n                default:\r\n                    debug(`Ignore chunk: RIFF/${header.chunkID} of ${header.chunkSize} bytes`);\r\n                    this.metadata.addWarning('Ignore chunk: RIFF/' + header.chunkID);\r\n                    await this.tokenizer.ignore(header.chunkSize);\r\n            }\r\n            if (this.header.chunkSize % 2 === 1) {\r\n                debug('Read odd padding byte'); // https://wiki.multimedia.cx/index.php/RIFF\r\n                await this.tokenizer.ignore(1);\r\n            }\r\n        }\r\n    }\r\n    async parseListTag(listHeader) {\r\n        const listType = await this.tokenizer.readToken(new Token.StringType(4, 'binary'));\r\n        debug('pos=%s, parseListTag: chunkID=RIFF/WAVE/LIST/%s', this.tokenizer.position, listType);\r\n        switch (listType) {\r\n            case 'INFO':\r\n                return this.parseRiffInfoTags(listHeader.chunkSize - 4);\r\n            case 'adtl':\r\n            default:\r\n                this.metadata.addWarning('Ignore chunk: RIFF/WAVE/LIST/' + listType);\r\n                debug('Ignoring chunkID=RIFF/WAVE/LIST/' + listType);\r\n                return this.tokenizer.ignore(listHeader.chunkSize - 4).then();\r\n        }\r\n    }\r\n    async parseRiffInfoTags(chunkSize) {\r\n        while (chunkSize >= 8) {\r\n            const header = await this.tokenizer.readToken(riff.Header);\r\n            const valueToken = new riff.ListInfoTagValue(header);\r\n            const value = await this.tokenizer.readToken(valueToken);\r\n            this.addTag(header.chunkID, Util_1.default.stripNulls(value));\r\n            chunkSize -= (8 + valueToken.len);\r\n        }\r\n        if (chunkSize !== 0) {\r\n            throw Error('Illegal remaining size: ' + chunkSize);\r\n        }\r\n    }\r\n    addTag(id, value) {\r\n        this.metadata.addTag('exif', id, value);\r\n    }\r\n}\r\nexports.WaveParser = WaveParser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/wav/WaveParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/wavpack/WavPackParser.js":
/*!******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/wavpack/WavPackParser.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.WavPackParser = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst APEv2Parser_1 = __webpack_require__(/*! ../apev2/APEv2Parser */ \"./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\r\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\r\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\r\nconst WavPackToken_1 = __webpack_require__(/*! ./WavPackToken */ \"./node_modules/music-metadata/lib/wavpack/WavPackToken.js\");\r\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/music-metadata/node_modules/debug/src/index.js\");\r\nconst debug = initDebug('music-metadata:parser:WavPack');\r\n/**\r\n * WavPack Parser\r\n */\r\nclass WavPackParser extends BasicParser_1.BasicParser {\r\n    async parse() {\r\n        this.audioDataSize = 0;\r\n        // First parse all WavPack blocks\r\n        await this.parseWavPackBlocks();\r\n        // try to parse APEv2 header\r\n        return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\r\n    }\r\n    async parseWavPackBlocks() {\r\n        do {\r\n            const blockId = await this.tokenizer.peekToken(FourCC_1.FourCcToken);\r\n            if (blockId !== 'wvpk')\r\n                break;\r\n            const header = await this.tokenizer.readToken(WavPackToken_1.WavPack.BlockHeaderToken);\r\n            if (header.BlockID !== 'wvpk')\r\n                throw new Error('Invalid WavPack Block-ID');\r\n            debug(`WavPack header blockIndex=${header.blockIndex}, len=${WavPackToken_1.WavPack.BlockHeaderToken.len}`);\r\n            if (header.blockIndex === 0 && !this.metadata.format.container) {\r\n                this.metadata.setFormat('container', 'WavPack');\r\n                this.metadata.setFormat('lossless', !header.flags.isHybrid);\r\n                // tagTypes: this.type,\r\n                this.metadata.setFormat('bitsPerSample', header.flags.bitsPerSample);\r\n                if (!header.flags.isDSD) {\r\n                    // In case isDSD, these values will ne set in ID_DSD_BLOCK\r\n                    this.metadata.setFormat('sampleRate', header.flags.samplingRate);\r\n                    this.metadata.setFormat('duration', header.totalSamples / header.flags.samplingRate);\r\n                }\r\n                this.metadata.setFormat('numberOfChannels', header.flags.isMono ? 1 : 2);\r\n                this.metadata.setFormat('numberOfSamples', header.totalSamples);\r\n                this.metadata.setFormat('codec', header.flags.isDSD ? 'DSD' : 'PCM');\r\n            }\r\n            const ignoreBytes = header.blockSize - (WavPackToken_1.WavPack.BlockHeaderToken.len - 8);\r\n            if (header.blockIndex === 0) {\r\n                // Meta-data block\r\n                await this.parseMetadataSubBlock(header, ignoreBytes);\r\n            }\r\n            else {\r\n                await this.tokenizer.ignore(ignoreBytes);\r\n            }\r\n            if (header.blockSamples > 0) {\r\n                this.audioDataSize += header.blockSize; // Count audio data for bit-rate calculation\r\n            }\r\n        } while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= WavPackToken_1.WavPack.BlockHeaderToken.len);\r\n        this.metadata.setFormat('bitrate', this.audioDataSize * 8 / this.metadata.format.duration);\r\n    }\r\n    /**\r\n     * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks\r\n     * @param remainingLength\r\n     */\r\n    async parseMetadataSubBlock(header, remainingLength) {\r\n        while (remainingLength > WavPackToken_1.WavPack.MetadataIdToken.len) {\r\n            const id = await this.tokenizer.readToken(WavPackToken_1.WavPack.MetadataIdToken);\r\n            const dataSizeInWords = await this.tokenizer.readNumber(id.largeBlock ? Token.UINT24_LE : Token.UINT8);\r\n            const data = Buffer.alloc(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));\r\n            await this.tokenizer.readBuffer(data);\r\n            debug(`Metadata Sub-Blocks functionId=0x${id.functionId.toString(16)}, id.largeBlock=${id.largeBlock},data-size=${data.length}`);\r\n            switch (id.functionId) {\r\n                case 0x0: // ID_DUMMY: could be used to pad WavPack blocks\r\n                    break;\r\n                case 0xe: // ID_DSD_BLOCK\r\n                    debug('ID_DSD_BLOCK');\r\n                    // https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\r\n                    const mp = 1 << data.readUInt8(0);\r\n                    const samplingRate = header.flags.samplingRate * mp * 8; // ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\r\n                    if (!header.flags.isDSD)\r\n                        throw new Error('Only expect DSD block if DSD-flag is set');\r\n                    this.metadata.setFormat('sampleRate', samplingRate);\r\n                    this.metadata.setFormat('duration', header.totalSamples / samplingRate);\r\n                    break;\r\n                case 0x24: // ID_ALT_TRAILER: maybe used to embed original ID3 tag header\r\n                    debug('ID_ALT_TRAILER: trailer for non-wav files');\r\n                    break;\r\n                case 0x26: // ID_MD5_CHECKSUM\r\n                    this.metadata.setFormat('audioMD5', data);\r\n                    break;\r\n                case 0x2f: // ID_BLOCK_CHECKSUM\r\n                    debug(`ID_BLOCK_CHECKSUM: checksum=${data.toString('hex')}`);\r\n                    break;\r\n                default:\r\n                    debug(`Ignore unsupported meta-sub-block-id functionId=0x${id.functionId.toString(16)}`);\r\n                    break;\r\n            }\r\n            remainingLength -= WavPackToken_1.WavPack.MetadataIdToken.len + (id.largeBlock ? Token.UINT24_LE.len : Token.UINT8.len) + dataSizeInWords * 2;\r\n            debug(`remainingLength=${remainingLength}`);\r\n            if (id.isOddSize)\r\n                this.tokenizer.ignore(1);\r\n        }\r\n        if (remainingLength !== 0)\r\n            throw new Error('metadata-sub-block should fit it remaining length');\r\n    }\r\n}\r\nexports.WavPackParser = WavPackParser;\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/wavpack/WavPackParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/wavpack/WavPackToken.js":
/*!*****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/wavpack/WavPackToken.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.WavPack = void 0;\r\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\r\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\r\nconst SampleRates = [6000, 8000, 9600, 11025, 12000, 16000, 22050, 24000, 32000, 44100,\r\n    48000, 64000, 88200, 96000, 192000, -1];\r\nclass WavPack {\r\n    static isBitSet(flags, bitOffset) {\r\n        return WavPack.getBitAllignedNumber(flags, bitOffset, 1) === 1;\r\n    }\r\n    static getBitAllignedNumber(flags, bitOffset, len) {\r\n        return (flags >>> bitOffset) & (0xffffffff >>> (32 - len));\r\n    }\r\n}\r\nexports.WavPack = WavPack;\r\n/**\r\n * WavPack Block Header\r\n *\r\n * 32-byte little-endian header at the front of every WavPack block\r\n *\r\n * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 2/6: 2.0 \"Block Header\")\r\n */\r\nWavPack.BlockHeaderToken = {\r\n    len: 32,\r\n    get: (buf, off) => {\r\n        const flags = Token.UINT32_LE.get(buf, off + 24);\r\n        const res = {\r\n            // should equal 'wvpk'\r\n            BlockID: FourCC_1.FourCcToken.get(buf, off),\r\n            //  0x402 to 0x410 are valid for decode\r\n            blockSize: Token.UINT32_LE.get(buf, off + 4),\r\n            //  0x402 (1026) to 0x410 are valid for decode\r\n            version: Token.UINT16_LE.get(buf, off + 8),\r\n            //  40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)\r\n            totalSamples: /* replace with bigint? (Token.UINT8.get(buf, off + 11) << 32) + */ Token.UINT32_LE.get(buf, off + 12),\r\n            // 40-bit block_index\r\n            blockIndex: /* replace with bigint? (Token.UINT8.get(buf, off + 10) << 32) + */ Token.UINT32_LE.get(buf, off + 16),\r\n            // 40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)\r\n            blockSamples: Token.UINT32_LE.get(buf, off + 20),\r\n            // various flags for id and decoding\r\n            flags: {\r\n                bitsPerSample: (1 + WavPack.getBitAllignedNumber(flags, 0, 2)) * 8,\r\n                isMono: WavPack.isBitSet(flags, 2),\r\n                isHybrid: WavPack.isBitSet(flags, 3),\r\n                isJointStereo: WavPack.isBitSet(flags, 4),\r\n                crossChannel: WavPack.isBitSet(flags, 5),\r\n                hybridNoiseShaping: WavPack.isBitSet(flags, 6),\r\n                floatingPoint: WavPack.isBitSet(flags, 7),\r\n                samplingRate: SampleRates[WavPack.getBitAllignedNumber(flags, 23, 4)],\r\n                isDSD: WavPack.isBitSet(flags, 31)\r\n            },\r\n            // crc for actual decoded data\r\n            crc: new Token.BufferType(4).get(buf, off + 28)\r\n        };\r\n        if (res.flags.isDSD) {\r\n            res.totalSamples *= 8;\r\n        }\r\n        return res;\r\n    }\r\n};\r\n/**\r\n * 3.0 Metadata Sub-Blocks\r\n *  Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 4/6: 3.0 \"Metadata Sub-Block\")\r\n */\r\nWavPack.MetadataIdToken = {\r\n    len: 1,\r\n    get: (buf, off) => {\r\n        return {\r\n            functionId: WavPack.getBitAllignedNumber(buf[off], 0, 6),\r\n            isOptional: WavPack.isBitSet(buf[off], 5),\r\n            isOddSize: WavPack.isBitSet(buf[off], 6),\r\n            largeBlock: WavPack.isBitSet(buf[off], 7)\r\n        };\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/lib/wavpack/WavPackToken.js?");

/***/ }),

/***/ "./node_modules/music-metadata/node_modules/debug/src/browser.js":
/*!***********************************************************************!*\
  !*** ./node_modules/music-metadata/node_modules/debug/src/browser.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/music-metadata/node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/node_modules/debug/src/browser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/node_modules/debug/src/common.js":
/*!**********************************************************************!*\
  !*** ./node_modules/music-metadata/node_modules/debug/src/common.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(/*! ms */ \"./node_modules/music-metadata/node_modules/ms/index.js\");\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => enableOverride === null ? createDebug.enabled(namespace) : enableOverride,\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/node_modules/debug/src/common.js?");

/***/ }),

/***/ "./node_modules/music-metadata/node_modules/debug/src/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/music-metadata/node_modules/debug/src/index.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n\tmodule.exports = __webpack_require__(/*! ./browser.js */ \"./node_modules/music-metadata/node_modules/debug/src/browser.js\");\n} else {\n\tmodule.exports = __webpack_require__(/*! ./node.js */ \"./node_modules/music-metadata/node_modules/debug/src/node.js\");\n}\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/node_modules/debug/src/index.js?");

/***/ }),

/***/ "./node_modules/music-metadata/node_modules/debug/src/node.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/node_modules/debug/src/node.js ***!
  \********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * Module dependencies.\n */\n\nconst tty = __webpack_require__(/*! tty */ \"tty\");\nconst util = __webpack_require__(/*! util */ \"util\");\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = __webpack_require__(/*! supports-color */ \"./node_modules/supports-color/index.js\");\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/music-metadata/node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/node_modules/debug/src/node.js?");

/***/ }),

/***/ "./node_modules/music-metadata/node_modules/ms/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/node_modules/ms/index.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/music-metadata/node_modules/ms/index.js?");

/***/ }),

/***/ "./node_modules/peek-readable/lib/EndOfFileStream.js":
/*!***********************************************************!*\
  !*** ./node_modules/peek-readable/lib/EndOfFileStream.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EndOfStreamError = exports.defaultMessages = void 0;\nexports.defaultMessages = 'End-Of-Stream';\n/**\n * Thrown on read operation of the end of file or stream has been reached\n */\nclass EndOfStreamError extends Error {\n    constructor() {\n        super(exports.defaultMessages);\n    }\n}\nexports.EndOfStreamError = EndOfStreamError;\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/peek-readable/lib/EndOfFileStream.js?");

/***/ }),

/***/ "./node_modules/peek-readable/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/peek-readable/lib/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamReader = exports.EndOfStreamError = void 0;\nconst EndOfFileStream_1 = __webpack_require__(/*! ./EndOfFileStream */ \"./node_modules/peek-readable/lib/EndOfFileStream.js\");\nvar EndOfFileStream_2 = __webpack_require__(/*! ./EndOfFileStream */ \"./node_modules/peek-readable/lib/EndOfFileStream.js\");\nObject.defineProperty(exports, \"EndOfStreamError\", ({ enumerable: true, get: function () { return EndOfFileStream_2.EndOfStreamError; } }));\nclass Deferred {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.reject = reject;\n            this.resolve = resolve;\n        });\n    }\n}\nconst maxStreamReadSize = 1 * 1024 * 1024; // Maximum request length on read-stream operation\nclass StreamReader {\n    constructor(s) {\n        this.s = s;\n        this.endOfStream = false;\n        /**\n         * Store peeked data\n         * @type {Array}\n         */\n        this.peekQueue = [];\n        if (!s.read || !s.once) {\n            throw new Error('Expected an instance of stream.Readable');\n        }\n        this.s.once('end', () => this.reject(new EndOfFileStream_1.EndOfStreamError()));\n        this.s.once('error', err => this.reject(err));\n        this.s.once('close', () => this.reject(new Error('Stream closed')));\n    }\n    /**\n     * Read ahead (peek) from stream. Subsequent read or peeks will return the same data\n     * @param buffer - Buffer to store data read from stream in\n     * @param offset - Offset buffer\n     * @param length - Number of bytes to read\n     * @returns Number of bytes peeked\n     */\n    async peek(buffer, offset, length) {\n        const bytesRead = await this.read(buffer, offset, length);\n        this.peekQueue.push(buffer.slice(offset, offset + bytesRead)); // Put read data back to peek buffer\n        return bytesRead;\n    }\n    /**\n     * Read chunk from stream\n     * @param buffer - Target buffer to store data read from stream in\n     * @param offset - Offset of target buffer\n     * @param length - Number of bytes to read\n     * @returns Number of bytes read\n     */\n    async read(buffer, offset, length) {\n        if (length === 0) {\n            return 0;\n        }\n        if (this.peekQueue.length === 0 && this.endOfStream) {\n            throw new EndOfFileStream_1.EndOfStreamError();\n        }\n        let remaining = length;\n        let bytesRead = 0;\n        // consume peeked data first\n        while (this.peekQueue.length > 0 && remaining > 0) {\n            const peekData = this.peekQueue.pop(); // Front of queue\n            const lenCopy = Math.min(peekData.length, remaining);\n            peekData.copy(buffer, offset + bytesRead, 0, lenCopy);\n            bytesRead += lenCopy;\n            remaining -= lenCopy;\n            if (lenCopy < peekData.length) {\n                // remainder back to queue\n                this.peekQueue.push(peekData.slice(lenCopy));\n            }\n        }\n        // continue reading from stream if required\n        while (remaining > 0 && !this.endOfStream) {\n            const reqLen = Math.min(remaining, maxStreamReadSize);\n            const chunkLen = await this._read(buffer, offset + bytesRead, reqLen);\n            bytesRead += chunkLen;\n            if (chunkLen < reqLen)\n                break;\n            remaining -= chunkLen;\n        }\n        return bytesRead;\n    }\n    /**\n     * Read chunk from stream\n     * @param buffer Buffer to store data read from stream in\n     * @param offset Offset buffer\n     * @param length Number of bytes to read\n     * @returns Number of bytes read\n     */\n    async _read(buffer, offset, length) {\n        if (this.request)\n            throw new Error('Concurrent read operation?');\n        const readBuffer = this.s.read(length);\n        if (readBuffer) {\n            readBuffer.copy(buffer, offset);\n            return readBuffer.length;\n        }\n        else {\n            this.request = {\n                buffer,\n                offset,\n                length,\n                deferred: new Deferred()\n            };\n            this.s.once('readable', () => {\n                this.tryRead();\n            });\n            return this.request.deferred.promise.then(n => {\n                this.request = null;\n                return n;\n            }, err => {\n                this.request = null;\n                throw err;\n            });\n        }\n    }\n    tryRead() {\n        const readBuffer = this.s.read(this.request.length);\n        if (readBuffer) {\n            readBuffer.copy(this.request.buffer, this.request.offset);\n            this.request.deferred.resolve(readBuffer.length);\n        }\n        else {\n            this.s.once('readable', () => {\n                this.tryRead();\n            });\n        }\n    }\n    reject(err) {\n        this.endOfStream = true;\n        if (this.request) {\n            this.request.deferred.reject(err);\n            this.request = null;\n        }\n    }\n}\nexports.StreamReader = StreamReader;\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/peek-readable/lib/index.js?");

/***/ }),

/***/ "./node_modules/strtok3/lib/AbstractTokenizer.js":
/*!*******************************************************!*\
  !*** ./node_modules/strtok3/lib/AbstractTokenizer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AbstractTokenizer = void 0;\nconst peek_readable_1 = __webpack_require__(/*! peek-readable */ \"./node_modules/peek-readable/lib/index.js\");\n/**\n * Core tokenizer\n */\nclass AbstractTokenizer {\n    constructor(fileInfo) {\n        /**\n         * Tokenizer-stream position\n         */\n        this.position = 0;\n        this.numBuffer = Buffer.alloc(10);\n        this.fileInfo = fileInfo ? fileInfo : {};\n    }\n    /**\n     * Read a token from the tokenizer-stream\n     * @param token - The token to read\n     * @param position - If provided, the desired position in the tokenizer-stream\n     * @returns Promise with token data\n     */\n    async readToken(token, position) {\n        const buffer = Buffer.alloc(token.len);\n        const len = await this.readBuffer(buffer, { position });\n        if (len < token.len)\n            throw new peek_readable_1.EndOfStreamError();\n        return token.get(buffer, 0);\n    }\n    /**\n     * Peek a token from the tokenizer-stream.\n     * @param token - Token to peek from the tokenizer-stream.\n     * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.\n     * @returns Promise with token data\n     */\n    async peekToken(token, position = this.position) {\n        const buffer = Buffer.alloc(token.len);\n        const len = await this.peekBuffer(buffer, { position });\n        if (len < token.len)\n            throw new peek_readable_1.EndOfStreamError();\n        return token.get(buffer, 0);\n    }\n    /**\n     * Read a numeric token from the stream\n     * @param token - Numeric token\n     * @returns Promise with number\n     */\n    async readNumber(token) {\n        const len = await this.readBuffer(this.numBuffer, { length: token.len });\n        if (len < token.len)\n            throw new peek_readable_1.EndOfStreamError();\n        return token.get(this.numBuffer, 0);\n    }\n    /**\n     * Read a numeric token from the stream\n     * @param token - Numeric token\n     * @returns Promise with number\n     */\n    async peekNumber(token) {\n        const len = await this.peekBuffer(this.numBuffer, { length: token.len });\n        if (len < token.len)\n            throw new peek_readable_1.EndOfStreamError();\n        return token.get(this.numBuffer, 0);\n    }\n    async close() {\n        // empty\n    }\n}\nexports.AbstractTokenizer = AbstractTokenizer;\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/strtok3/lib/AbstractTokenizer.js?");

/***/ }),

/***/ "./node_modules/strtok3/lib/BufferTokenizer.js":
/*!*****************************************************!*\
  !*** ./node_modules/strtok3/lib/BufferTokenizer.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BufferTokenizer = void 0;\nconst peek_readable_1 = __webpack_require__(/*! peek-readable */ \"./node_modules/peek-readable/lib/index.js\");\nclass BufferTokenizer {\n    /**\n     * Construct BufferTokenizer\n     * @param buffer - Buffer to tokenize\n     * @param fileInfo - Pass additional file information to the tokenizer\n     */\n    constructor(buffer, fileInfo) {\n        this.buffer = buffer;\n        this.position = 0;\n        this.fileInfo = fileInfo ? fileInfo : {};\n        this.fileInfo.size = this.fileInfo.size ? this.fileInfo.size : buffer.length;\n    }\n    /**\n     * Read buffer from tokenizer\n     * @param buffer\n     * @param options - Read behaviour options\n     * @returns {Promise<number>}\n     */\n    async readBuffer(buffer, options) {\n        if (options && options.position) {\n            if (options.position < this.position) {\n                throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\n            }\n            this.position = options.position;\n        }\n        return this.peekBuffer(buffer, options).then(bytesRead => {\n            this.position += bytesRead;\n            return bytesRead;\n        });\n    }\n    /**\n     * Peek (read ahead) buffer from tokenizer\n     * @param buffer\n     * @param options - Read behaviour options\n     * @returns {Promise<number>}\n     */\n    async peekBuffer(buffer, options) {\n        let offset = 0;\n        let length = buffer.length;\n        let position = this.position;\n        if (options) {\n            if (options.position) {\n                if (options.position < this.position) {\n                    throw new Error('`options.position` can be less than `tokenizer.position`');\n                }\n                position = options.position;\n            }\n            if (Number.isInteger(options.length)) {\n                length = options.length;\n            }\n            else {\n                length -= options.offset || 0;\n            }\n            if (options.offset) {\n                offset = options.offset;\n            }\n        }\n        if (length === 0) {\n            return Promise.resolve(0);\n        }\n        position = position || this.position;\n        if (!length) {\n            length = buffer.length;\n        }\n        const bytes2read = Math.min(this.buffer.length - position, length);\n        if ((!options || !options.mayBeLess) && bytes2read < length) {\n            throw new peek_readable_1.EndOfStreamError();\n        }\n        else {\n            this.buffer.copy(buffer, offset, position, position + bytes2read);\n            return bytes2read;\n        }\n    }\n    async readToken(token, position) {\n        this.position = position || this.position;\n        try {\n            const tv = this.peekToken(token, this.position);\n            this.position += token.len;\n            return tv;\n        }\n        catch (err) {\n            this.position += this.buffer.length - position;\n            throw err;\n        }\n    }\n    async peekToken(token, position = this.position) {\n        if (this.buffer.length - position < token.len) {\n            throw new peek_readable_1.EndOfStreamError();\n        }\n        return token.get(this.buffer, position);\n    }\n    async readNumber(token) {\n        return this.readToken(token);\n    }\n    async peekNumber(token) {\n        return this.peekToken(token);\n    }\n    /**\n     * @return actual number of bytes ignored\n     */\n    async ignore(length) {\n        const bytesIgnored = Math.min(this.buffer.length - this.position, length);\n        this.position += bytesIgnored;\n        return bytesIgnored;\n    }\n    async close() {\n        // empty\n    }\n}\nexports.BufferTokenizer = BufferTokenizer;\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/strtok3/lib/BufferTokenizer.js?");

/***/ }),

/***/ "./node_modules/strtok3/lib/FileTokenizer.js":
/*!***************************************************!*\
  !*** ./node_modules/strtok3/lib/FileTokenizer.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fromFile = exports.FileTokenizer = void 0;\nconst AbstractTokenizer_1 = __webpack_require__(/*! ./AbstractTokenizer */ \"./node_modules/strtok3/lib/AbstractTokenizer.js\");\nconst peek_readable_1 = __webpack_require__(/*! peek-readable */ \"./node_modules/peek-readable/lib/index.js\");\nconst fs = __webpack_require__(/*! ./FsPromise */ \"./node_modules/strtok3/lib/FsPromise.js\");\nclass FileTokenizer extends AbstractTokenizer_1.AbstractTokenizer {\n    constructor(fd, fileInfo) {\n        super(fileInfo);\n        this.fd = fd;\n    }\n    /**\n     * Read buffer from file\n     * @param buffer\n     * @param options - Read behaviour options\n     * @returns Promise number of bytes read\n     */\n    async readBuffer(buffer, options) {\n        let offset = 0;\n        let length = buffer.length;\n        if (options) {\n            if (options.position) {\n                if (options.position < this.position) {\n                    throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\n                }\n                this.position = options.position;\n            }\n            if (Number.isInteger(options.length)) {\n                length = options.length;\n            }\n            else {\n                length -= options.offset || 0;\n            }\n            if (options.offset) {\n                offset = options.offset;\n            }\n        }\n        if (length === 0) {\n            return Promise.resolve(0);\n        }\n        const res = await fs.read(this.fd, buffer, offset, length, this.position);\n        this.position += res.bytesRead;\n        if (res.bytesRead < length && (!options || !options.mayBeLess)) {\n            throw new peek_readable_1.EndOfStreamError();\n        }\n        return res.bytesRead;\n    }\n    /**\n     * Peek buffer from file\n     * @param buffer\n     * @param options - Read behaviour options\n     * @returns Promise number of bytes read\n     */\n    async peekBuffer(buffer, options) {\n        let offset = 0;\n        let length = buffer.length;\n        let position = this.position;\n        if (options) {\n            if (options.position) {\n                if (options.position < this.position) {\n                    throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\n                }\n                position = options.position;\n            }\n            if (Number.isInteger(options.length)) {\n                length = options.length;\n            }\n            else {\n                length -= options.offset || 0;\n            }\n            if (options.offset) {\n                offset = options.offset;\n            }\n        }\n        if (length === 0) {\n            return Promise.resolve(0);\n        }\n        const res = await fs.read(this.fd, buffer, offset, length, position);\n        if ((!options || !options.mayBeLess) && res.bytesRead < length) {\n            throw new peek_readable_1.EndOfStreamError();\n        }\n        return res.bytesRead;\n    }\n    /**\n     * @param length - Number of bytes to ignore\n     * @return resolves the number of bytes ignored, equals length if this available, otherwise the number of bytes available\n     */\n    async ignore(length) {\n        const bytesLeft = this.fileInfo.size - this.position;\n        if (length <= bytesLeft) {\n            this.position += length;\n            return length;\n        }\n        else {\n            this.position += bytesLeft;\n            return bytesLeft;\n        }\n    }\n    async close() {\n        return fs.close(this.fd);\n    }\n}\nexports.FileTokenizer = FileTokenizer;\nasync function fromFile(sourceFilePath) {\n    const stat = await fs.stat(sourceFilePath);\n    if (!stat.isFile) {\n        throw new Error(`File not a file: ${sourceFilePath}`);\n    }\n    const fd = await fs.open(sourceFilePath, 'r');\n    return new FileTokenizer(fd, { path: sourceFilePath, size: stat.size });\n}\nexports.fromFile = fromFile;\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/strtok3/lib/FileTokenizer.js?");

/***/ }),

/***/ "./node_modules/strtok3/lib/FsPromise.js":
/*!***********************************************!*\
  !*** ./node_modules/strtok3/lib/FsPromise.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Module convert fs functions to promise based functions\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.readFile = exports.writeFileSync = exports.writeFile = exports.read = exports.open = exports.close = exports.stat = exports.createReadStream = exports.pathExists = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nexports.pathExists = fs.existsSync;\nexports.createReadStream = fs.createReadStream;\nasync function stat(path) {\n    return new Promise((resolve, reject) => {\n        fs.stat(path, (err, stats) => {\n            if (err)\n                reject(err);\n            else\n                resolve(stats);\n        });\n    });\n}\nexports.stat = stat;\nasync function close(fd) {\n    return new Promise((resolve, reject) => {\n        fs.close(fd, err => {\n            if (err)\n                reject(err);\n            else\n                resolve();\n        });\n    });\n}\nexports.close = close;\nasync function open(path, mode) {\n    return new Promise((resolve, reject) => {\n        fs.open(path, mode, (err, fd) => {\n            if (err)\n                reject(err);\n            else\n                resolve(fd);\n        });\n    });\n}\nexports.open = open;\nasync function read(fd, buffer, offset, length, position) {\n    return new Promise((resolve, reject) => {\n        fs.read(fd, buffer, offset, length, position, (err, bytesRead, _buffer) => {\n            if (err)\n                reject(err);\n            else\n                resolve({ bytesRead, buffer: _buffer });\n        });\n    });\n}\nexports.read = read;\nasync function writeFile(path, data) {\n    return new Promise((resolve, reject) => {\n        fs.writeFile(path, data, err => {\n            if (err)\n                reject(err);\n            else\n                resolve();\n        });\n    });\n}\nexports.writeFile = writeFile;\nfunction writeFileSync(path, data) {\n    fs.writeFileSync(path, data);\n}\nexports.writeFileSync = writeFileSync;\nasync function readFile(path) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path, (err, buffer) => {\n            if (err)\n                reject(err);\n            else\n                resolve(buffer);\n        });\n    });\n}\nexports.readFile = readFile;\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/strtok3/lib/FsPromise.js?");

/***/ }),

/***/ "./node_modules/strtok3/lib/ReadStreamTokenizer.js":
/*!*********************************************************!*\
  !*** ./node_modules/strtok3/lib/ReadStreamTokenizer.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReadStreamTokenizer = void 0;\nconst AbstractTokenizer_1 = __webpack_require__(/*! ./AbstractTokenizer */ \"./node_modules/strtok3/lib/AbstractTokenizer.js\");\nconst peek_readable_1 = __webpack_require__(/*! peek-readable */ \"./node_modules/peek-readable/lib/index.js\");\n// import * as _debug from 'debug';\n// const debug = _debug('strtok3:ReadStreamTokenizer');\nconst maxBufferSize = 256000;\nclass ReadStreamTokenizer extends AbstractTokenizer_1.AbstractTokenizer {\n    constructor(stream, fileInfo) {\n        super(fileInfo);\n        this.streamReader = new peek_readable_1.StreamReader(stream);\n    }\n    /**\n     * Get file information, an HTTP-client may implement this doing a HEAD request\n     * @return Promise with file information\n     */\n    async getFileInfo() {\n        return this.fileInfo;\n    }\n    /**\n     * Read buffer from tokenizer\n     * @param buffer - Target buffer to fill with data read from the tokenizer-stream\n     * @param options - Read behaviour options\n     * @returns Promise with number of bytes read\n     */\n    async readBuffer(buffer, options) {\n        // const _offset = position ? position : this.position;\n        // debug(`readBuffer ${_offset}...${_offset + length - 1}`);\n        let offset = 0;\n        let length = buffer.length;\n        if (options) {\n            if (Number.isInteger(options.length)) {\n                length = options.length;\n            }\n            else {\n                length -= options.offset || 0;\n            }\n            if (options.position) {\n                const skipBytes = options.position - this.position;\n                if (skipBytes > 0) {\n                    await this.ignore(skipBytes);\n                    return this.readBuffer(buffer, options);\n                }\n                else if (skipBytes < 0) {\n                    throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\n                }\n            }\n            if (options.offset) {\n                offset = options.offset;\n            }\n        }\n        if (length === 0) {\n            return 0;\n        }\n        const bytesRead = await this.streamReader.read(buffer, offset, length);\n        this.position += bytesRead;\n        if ((!options || !options.mayBeLess) && bytesRead < length) {\n            throw new peek_readable_1.EndOfStreamError();\n        }\n        return bytesRead;\n    }\n    /**\n     * Peek (read ahead) buffer from tokenizer\n     * @param buffer - Target buffer to write the data read to\n     * @param options - Read behaviour options\n     * @returns Promise with number of bytes peeked\n     */\n    async peekBuffer(buffer, options) {\n        // const _offset = position ? position : this.position;\n        // debug(`peek ${_offset}...${_offset + length - 1}`);\n        let offset = 0;\n        let bytesRead;\n        let length = buffer.length;\n        if (options) {\n            if (options.offset) {\n                offset = options.offset;\n            }\n            if (Number.isInteger(options.length)) {\n                length = options.length;\n            }\n            else {\n                length -= options.offset || 0;\n            }\n            if (options.position) {\n                const skipBytes = options.position - this.position;\n                if (skipBytes > 0) {\n                    const skipBuffer = Buffer.alloc(length + skipBytes);\n                    bytesRead = await this.peekBuffer(skipBuffer, { mayBeLess: options.mayBeLess });\n                    skipBuffer.copy(buffer, offset, skipBytes);\n                    return bytesRead - skipBytes;\n                }\n                else if (skipBytes < 0) {\n                    throw new Error('Cannot peek from a negative offset in a stream');\n                }\n            }\n        }\n        try {\n            bytesRead = await this.streamReader.peek(buffer, offset, length);\n        }\n        catch (err) {\n            if (options && options.mayBeLess && err instanceof peek_readable_1.EndOfStreamError) {\n                return 0;\n            }\n            throw err;\n        }\n        if ((!options || !options.mayBeLess) && bytesRead < length) {\n            throw new peek_readable_1.EndOfStreamError();\n        }\n        return bytesRead;\n    }\n    async ignore(length) {\n        // debug(`ignore ${this.position}...${this.position + length - 1}`);\n        const bufSize = Math.min(maxBufferSize, length);\n        const buf = Buffer.alloc(bufSize);\n        let totBytesRead = 0;\n        while (totBytesRead < length) {\n            const remaining = length - totBytesRead;\n            const bytesRead = await this.readBuffer(buf, { length: Math.min(bufSize, remaining) });\n            if (bytesRead < 0) {\n                return bytesRead;\n            }\n            totBytesRead += bytesRead;\n        }\n        return totBytesRead;\n    }\n}\nexports.ReadStreamTokenizer = ReadStreamTokenizer;\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/strtok3/lib/ReadStreamTokenizer.js?");

/***/ }),

/***/ "./node_modules/strtok3/lib/core.js":
/*!******************************************!*\
  !*** ./node_modules/strtok3/lib/core.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fromBuffer = exports.fromStream = exports.EndOfStreamError = void 0;\nconst ReadStreamTokenizer_1 = __webpack_require__(/*! ./ReadStreamTokenizer */ \"./node_modules/strtok3/lib/ReadStreamTokenizer.js\");\nconst BufferTokenizer_1 = __webpack_require__(/*! ./BufferTokenizer */ \"./node_modules/strtok3/lib/BufferTokenizer.js\");\nvar peek_readable_1 = __webpack_require__(/*! peek-readable */ \"./node_modules/peek-readable/lib/index.js\");\nObject.defineProperty(exports, \"EndOfStreamError\", ({ enumerable: true, get: function () { return peek_readable_1.EndOfStreamError; } }));\n/**\n * Construct ReadStreamTokenizer from given Stream.\n * Will set fileSize, if provided given Stream has set the .path property/\n * @param stream - Read from Node.js Stream.Readable\n * @param fileInfo - Pass the file information, like size and MIME-type of the correspnding stream.\n * @returns ReadStreamTokenizer\n */\nfunction fromStream(stream, fileInfo) {\n    fileInfo = fileInfo ? fileInfo : {};\n    return new ReadStreamTokenizer_1.ReadStreamTokenizer(stream, fileInfo);\n}\nexports.fromStream = fromStream;\n/**\n * Construct ReadStreamTokenizer from given Buffer.\n * @param buffer - Buffer to tokenize\n * @param fileInfo - Pass additional file information to the tokenizer\n * @returns BufferTokenizer\n */\nfunction fromBuffer(buffer, fileInfo) {\n    return new BufferTokenizer_1.BufferTokenizer(buffer, fileInfo);\n}\nexports.fromBuffer = fromBuffer;\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/strtok3/lib/core.js?");

/***/ }),

/***/ "./node_modules/strtok3/lib/index.js":
/*!*******************************************!*\
  !*** ./node_modules/strtok3/lib/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fromStream = exports.fromBuffer = exports.EndOfStreamError = exports.fromFile = void 0;\nconst fs = __webpack_require__(/*! ./FsPromise */ \"./node_modules/strtok3/lib/FsPromise.js\");\nconst core = __webpack_require__(/*! ./core */ \"./node_modules/strtok3/lib/core.js\");\nvar FileTokenizer_1 = __webpack_require__(/*! ./FileTokenizer */ \"./node_modules/strtok3/lib/FileTokenizer.js\");\nObject.defineProperty(exports, \"fromFile\", ({ enumerable: true, get: function () { return FileTokenizer_1.fromFile; } }));\nvar core_1 = __webpack_require__(/*! ./core */ \"./node_modules/strtok3/lib/core.js\");\nObject.defineProperty(exports, \"EndOfStreamError\", ({ enumerable: true, get: function () { return core_1.EndOfStreamError; } }));\nObject.defineProperty(exports, \"fromBuffer\", ({ enumerable: true, get: function () { return core_1.fromBuffer; } }));\n/**\n * Construct ReadStreamTokenizer from given Stream.\n * Will set fileSize, if provided given Stream has set the .path property.\n * @param stream - Node.js Stream.Readable\n * @param fileInfo - Pass additional file information to the tokenizer\n * @returns Tokenizer\n */\nasync function fromStream(stream, fileInfo) {\n    fileInfo = fileInfo ? fileInfo : {};\n    if (stream.path) {\n        const stat = await fs.stat(stream.path);\n        fileInfo.path = stream.path;\n        fileInfo.size = stat.size;\n    }\n    return core.fromStream(stream, fileInfo);\n}\nexports.fromStream = fromStream;\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/strtok3/lib/index.js?");

/***/ }),

/***/ "./node_modules/supports-color/index.js":
/*!**********************************************!*\
  !*** ./node_modules/supports-color/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst os = __webpack_require__(/*! os */ \"os\");\nconst hasFlag = __webpack_require__(/*! has-flag */ \"./node_modules/has-flag/index.js\");\n\nconst env = process.env;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false')) {\n\tforceColor = false;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = true;\n}\nif ('FORCE_COLOR' in env) {\n\tforceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(stream) {\n\tif (forceColor === false) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (stream && !stream.isTTY && forceColor !== true) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor ? 1 : 0;\n\n\tif (process.platform === 'win32') {\n\t\t// Node.js 7.5.0 is the first version of Node.js to include a patch to\n\t\t// libuv that enables 256 color output on Windows. Anything earlier and it\n\t\t// won't work. However, here we target Node.js 8 at minimum as it is an LTS\n\t\t// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows\n\t\t// release that supports 256 colors. Windows 10 build 14931 is the first release\n\t\t// that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(process.versions.node.split('.')[0]) >= 8 &&\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: getSupportLevel(process.stdout),\n\tstderr: getSupportLevel(process.stderr)\n};\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/supports-color/index.js?");

/***/ }),

/***/ "./node_modules/token-types/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/token-types/lib/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.writeIntBE = exports.readIntBE = exports.writeUIntBE = exports.readUIntBE = exports.writeIntLE = exports.AnsiStringType = exports.StringType = exports.BufferType = exports.IgnoreType = exports.Float80_LE = exports.Float80_BE = exports.Float64_LE = exports.Float64_BE = exports.Float32_LE = exports.Float32_BE = exports.Float16_LE = exports.Float16_BE = exports.INT64_BE = exports.UINT64_BE = exports.INT64_LE = exports.UINT64_LE = exports.INT32_LE = exports.INT32_BE = exports.INT24_BE = exports.INT24_LE = exports.INT16_LE = exports.INT16_BE = exports.INT8 = exports.UINT32_BE = exports.UINT32_LE = exports.UINT24_BE = exports.UINT24_LE = exports.UINT16_BE = exports.UINT16_LE = exports.UINT8 = void 0;\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\");\n// Primitive types\n/**\n * 8-bit unsigned integer\n */\nexports.UINT8 = {\n    len: 1,\n    get(buf, off) {\n        return buf.readUInt8(off);\n    },\n    put(buf, off, v) {\n        return buf.writeUInt8(v, off);\n    }\n};\n/**\n * 16-bit unsigned integer, Little Endian byte order\n */\nexports.UINT16_LE = {\n    len: 2,\n    get(buf, off) {\n        return buf.readUInt16LE(off);\n    },\n    put(buf, off, v) {\n        return buf.writeUInt16LE(v, off);\n    }\n};\n/**\n * 16-bit unsigned integer, Big Endian byte order\n */\nexports.UINT16_BE = {\n    len: 2,\n    get(buf, off) {\n        return buf.readUInt16BE(off);\n    },\n    put(buf, off, v) {\n        return buf.writeUInt16BE(v, off);\n    }\n};\n/**\n * 24-bit unsigned integer, Little Endian byte order\n */\nexports.UINT24_LE = {\n    len: 3,\n    get(buf, off) {\n        return buf.readUIntLE(off, 3);\n    },\n    put(buf, off, v) {\n        return buf.writeUIntLE(v, off, 3);\n    }\n};\n/**\n * 24-bit unsigned integer, Big Endian byte order\n */\nexports.UINT24_BE = {\n    len: 3,\n    get(buf, off) {\n        return buf.readUIntBE(off, 3);\n    },\n    put(buf, off, v) {\n        return buf.writeUIntBE(v, off, 3);\n    }\n};\n/**\n * 32-bit unsigned integer, Little Endian byte order\n */\nexports.UINT32_LE = {\n    len: 4,\n    get(buf, off) {\n        return buf.readUInt32LE(off);\n    },\n    put(b, o, v) {\n        return b.writeUInt32LE(v, o);\n    }\n};\n/**\n * 32-bit unsigned integer, Big Endian byte order\n */\nexports.UINT32_BE = {\n    len: 4,\n    get(buf, off) {\n        return buf.readUInt32BE(off);\n    },\n    put(buf, off, v) {\n        return buf.writeUInt32BE(v, off);\n    }\n};\n/**\n * 8-bit signed integer\n */\nexports.INT8 = {\n    len: 1,\n    get(buf, off) {\n        return buf.readInt8(off);\n    },\n    put(buf, off, v) {\n        return buf.writeInt8(v, off);\n    }\n};\n/**\n * 16-bit signed integer, Big Endian byte order\n */\nexports.INT16_BE = {\n    len: 2,\n    get(buf, off) {\n        return buf.readInt16BE(off);\n    },\n    put(b, o, v) {\n        return b.writeInt16BE(v, o);\n    }\n};\n/**\n * 16-bit signed integer, Little Endian byte order\n */\nexports.INT16_LE = {\n    len: 2,\n    get(buf, off) {\n        return buf.readInt16LE(off);\n    },\n    put(b, o, v) {\n        return b.writeInt16LE(v, o);\n    }\n};\n/**\n * 24-bit signed integer, Little Endian byte order\n */\nexports.INT24_LE = {\n    len: 3,\n    get(buf, off) {\n        return buf.readIntLE(off, 3);\n    },\n    put(b, o, v) {\n        return b.writeIntLE(v, o, 3);\n    }\n};\n/**\n * 24-bit signed integer, Big Endian byte order\n */\nexports.INT24_BE = {\n    len: 3,\n    get(buf, off) {\n        return buf.readIntBE(off, 3);\n    },\n    put(b, o, v) {\n        return b.writeIntBE(v, o, 3);\n    }\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\nexports.INT32_BE = {\n    len: 4,\n    get(buf, off) {\n        return buf.readInt32BE(off);\n    },\n    put(b, o, v) {\n        return b.writeInt32BE(v, o);\n    }\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\nexports.INT32_LE = {\n    len: 4,\n    get(buf, off) {\n        return buf.readInt32LE(off);\n    },\n    put(b, o, v) {\n        return b.writeInt32LE(v, o);\n    }\n};\n/**\n * 64-bit unsigned integer, Little Endian byte order\n */\nexports.UINT64_LE = {\n    len: 8,\n    get(buf, off) {\n        return readUIntLE(buf, off, this.len);\n    },\n    put(b, o, v) {\n        return writeUIntLE(b, v, o, this.len);\n    }\n};\n/**\n * 64-bit signed integer, Little Endian byte order\n */\nexports.INT64_LE = {\n    len: 8,\n    get(buf, off) {\n        return readIntLE(buf, off, this.len);\n    },\n    put(b, off, v) {\n        return writeIntLE(b, v, off, this.len);\n    }\n};\n/**\n * 64-bit unsigned integer, Big Endian byte order\n */\nexports.UINT64_BE = {\n    len: 8,\n    get(b, off) {\n        return readUIntBE(b, off, this.len);\n    },\n    put(b, o, v) {\n        return writeUIntBE(b, v, o, this.len);\n    }\n};\n/**\n * 64-bit signed integer, Big Endian byte order\n */\nexports.INT64_BE = {\n    len: 8,\n    get(b, off) {\n        return readIntBE(b, off, this.len);\n    },\n    put(b, off, v) {\n        return writeIntBE(b, v, off, this.len);\n    }\n};\n/**\n * IEEE 754 16-bit (half precision) float, big endian\n */\nexports.Float16_BE = {\n    len: 2,\n    get(b, off) {\n        return ieee754.read(b, off, false, 10, this.len);\n    },\n    put(b, off, v) {\n        ieee754.write(b, v, off, false, 10, this.len);\n        return off + this.len;\n    }\n};\n/**\n * IEEE 754 16-bit (half precision) float, little endian\n */\nexports.Float16_LE = {\n    len: 2,\n    get(b, off) {\n        return ieee754.read(b, off, true, 10, this.len);\n    },\n    put(b, off, v) {\n        ieee754.write(b, v, off, true, 10, this.len);\n        return off + this.len;\n    }\n};\n/**\n * IEEE 754 32-bit (single precision) float, big endian\n */\nexports.Float32_BE = {\n    len: 4,\n    get(b, off) {\n        return b.readFloatBE(off);\n    },\n    put(b, off, v) {\n        return b.writeFloatBE(v, off);\n    }\n};\n/**\n * IEEE 754 32-bit (single precision) float, little endian\n */\nexports.Float32_LE = {\n    len: 4,\n    get(b, off) {\n        return b.readFloatLE(off);\n    },\n    put(b, off, v) {\n        return b.writeFloatLE(v, off);\n    }\n};\n/**\n * IEEE 754 64-bit (double precision) float, big endian\n */\nexports.Float64_BE = {\n    len: 8,\n    get(b, off) {\n        return b.readDoubleBE(off);\n    },\n    put(b, off, v) {\n        return b.writeDoubleBE(v, off);\n    }\n};\n/**\n * IEEE 754 64-bit (double precision) float, little endian\n */\nexports.Float64_LE = {\n    len: 8,\n    get(b, off) {\n        return b.readDoubleLE(off);\n    },\n    put(b, off, v) {\n        return b.writeDoubleLE(v, off);\n    }\n};\n/**\n * IEEE 754 80-bit (extended precision) float, big endian\n */\nexports.Float80_BE = {\n    len: 10,\n    get(b, off) {\n        return ieee754.read(b, off, false, 63, this.len);\n    },\n    put(b, off, v) {\n        ieee754.write(b, v, off, false, 63, this.len);\n        return off + this.len;\n    }\n};\n/**\n * IEEE 754 80-bit (extended precision) float, little endian\n */\nexports.Float80_LE = {\n    len: 10,\n    get(b, off) {\n        return ieee754.read(b, off, true, 63, this.len);\n    },\n    put(b, off, v) {\n        ieee754.write(b, v, off, true, 63, this.len);\n        return off + this.len;\n    }\n};\n/**\n * Ignore a given number of bytes\n */\nclass IgnoreType {\n    /**\n     * @param len number of bytes to ignore\n     */\n    constructor(len) {\n        this.len = len;\n    }\n    // ToDo: don't read, but skip data\n    get(buf, off) {\n    }\n}\nexports.IgnoreType = IgnoreType;\nclass BufferType {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return buf.slice(off, off + this.len);\n    }\n}\nexports.BufferType = BufferType;\n/**\n * Consume a fixed number of bytes from the stream and return a string with a specified encoding.\n */\nclass StringType {\n    constructor(len, encoding) {\n        this.len = len;\n        this.encoding = encoding;\n    }\n    get(buf, off) {\n        return buf.toString(this.encoding, off, off + this.len);\n    }\n}\nexports.StringType = StringType;\n/**\n * ANSI Latin 1 String\n * Using windows-1252 / ISO 8859-1 decoding\n */\nclass AnsiStringType {\n    constructor(len) {\n        this.len = len;\n    }\n    static decode(buffer, off, until) {\n        let str = '';\n        for (let i = off; i < until; ++i) {\n            str += AnsiStringType.codePointToString(AnsiStringType.singleByteDecoder(buffer[i]));\n        }\n        return str;\n    }\n    static inRange(a, min, max) {\n        return min <= a && a <= max;\n    }\n    static codePointToString(cp) {\n        if (cp <= 0xFFFF) {\n            return String.fromCharCode(cp);\n        }\n        else {\n            cp -= 0x10000;\n            return String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);\n        }\n    }\n    static singleByteDecoder(bite) {\n        if (AnsiStringType.inRange(bite, 0x00, 0x7F)) {\n            return bite;\n        }\n        const codePoint = AnsiStringType.windows1252[bite - 0x80];\n        if (codePoint === null) {\n            throw Error('invaliding encoding');\n        }\n        return codePoint;\n    }\n    get(buf, off = 0) {\n        return AnsiStringType.decode(buf, off, off + this.len);\n    }\n}\nexports.AnsiStringType = AnsiStringType;\nAnsiStringType.windows1252 = [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352,\n    8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732,\n    8482, 353, 8250, 339, 157, 382, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n    169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,\n    185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,\n    201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,\n    217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,\n    233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\n    248, 249, 250, 251, 252, 253, 254, 255];\n/**\n * Best effort approach to read up to 64 bit unsigned integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction readUIntLE(buf, offset, byteLength) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let val = buf[offset];\n    let mul = 1;\n    let i = 0;\n    while (++i < byteLength && (mul *= 0x100)) {\n        val += buf[offset + i] * mul;\n    }\n    return val;\n}\n/**\n * Best effort approach to write up to 64 bit unsigned integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction writeUIntLE(buf, value, offset, byteLength) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let mul = 1;\n    let i = 0;\n    buf[offset] = value & 0xFF;\n    while (++i < byteLength && (mul *= 0x100)) {\n        buf[offset + i] = (value / mul) & 0xFF;\n    }\n    return offset + byteLength;\n}\n/**\n * Best effort approach to read 64 but signed integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction readIntLE(buf, offset, byteLength) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let val = buf[offset];\n    let mul = 1;\n    let i = 0;\n    while (++i < byteLength && (mul *= 0x100)) {\n        val += buf[offset + i] * mul;\n    }\n    mul *= 0x80;\n    if (val >= mul)\n        val -= Math.pow(2, 8 * byteLength);\n    return val;\n}\n/**\n * Best effort approach to write 64 but signed integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction writeIntLE(buf, value, offset, byteLength) {\n    value = +value;\n    offset = offset >>> 0;\n    let i = 0;\n    let mul = 1;\n    let sub = 0;\n    buf[offset] = value & 0xFF;\n    while (++i < byteLength && (mul *= 0x100)) {\n        if (value < 0 && sub === 0 && buf[offset + i - 1] !== 0) {\n            sub = 1;\n        }\n        buf[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n}\nexports.writeIntLE = writeIntLE;\n/**\n * Best effort approach to read up to 64 bit unsigned integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction readUIntBE(buf, offset, byteLength) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let val = buf[offset + --byteLength];\n    let mul = 1;\n    while (byteLength > 0 && (mul *= 0x100)) {\n        val += buf[offset + --byteLength] * mul;\n    }\n    return val;\n}\nexports.readUIntBE = readUIntBE;\n/**\n * Best effort approach to write up to 64 bit unsigned integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction writeUIntBE(buf, value, offset, byteLength) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let i = byteLength - 1;\n    let mul = 1;\n    buf[offset + i] = value & 0xFF;\n    while (--i >= 0 && (mul *= 0x100)) {\n        buf[offset + i] = (value / mul) & 0xFF;\n    }\n    return offset + byteLength;\n}\nexports.writeUIntBE = writeUIntBE;\n/**\n * Best effort approach to read 64 but signed integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction readIntBE(buf, offset, byteLength) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let i = byteLength;\n    let mul = 1;\n    let val = buf[offset + --i];\n    while (i > 0 && (mul *= 0x100)) {\n        val += buf[offset + --i] * mul;\n    }\n    mul *= 0x80;\n    if (val >= mul)\n        val -= Math.pow(2, 8 * byteLength);\n    return val;\n}\nexports.readIntBE = readIntBE;\n/**\n * Best effort approach to write 64 but signed integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction writeIntBE(buf, value, offset, byteLength) {\n    value = +value;\n    offset = offset >>> 0;\n    let i = byteLength - 1;\n    let mul = 1;\n    let sub = 0;\n    buf[offset + i] = value & 0xFF;\n    while (--i >= 0 && (mul *= 0x100)) {\n        if (value < 0 && sub === 0 && buf[offset + i + 1] !== 0) {\n            sub = 1;\n        }\n        buf[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n}\nexports.writeIntBE = writeIntBE;\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/token-types/lib/index.js?");

/***/ }),

/***/ "./src/main/main.ts":
/*!**************************!*\
  !*** ./src/main/main.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar electron_1 = __webpack_require__(/*! electron */ \"electron\");\r\nvar path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nvar graceful_fs_1 = __importDefault(__webpack_require__(/*! graceful-fs */ \"./node_modules/graceful-fs/graceful-fs.js\"));\r\nvar electron_is_dev_1 = __importDefault(__webpack_require__(/*! electron-is-dev */ \"./node_modules/electron-is-dev/index.js\")); // New Import\r\nvar mm = __importStar(__webpack_require__(/*! music-metadata */ \"./node_modules/music-metadata/lib/index.js\"));\r\nvar uniqid_1 = __importDefault(__webpack_require__(/*! uniqid */ \"./node_modules/uniqid/index.js\"));\r\n// Function that creates the main window\r\nvar createWindow = function () {\r\n    var mainWindow = new electron_1.BrowserWindow({\r\n        width: 800,\r\n        height: 600,\r\n        webPreferences: {\r\n            nodeIntegration: true,\r\n            contextIsolation: false,\r\n            // Removed preload JS since latest Electron - React supports ipchandler as a module\r\n            // preload: __dirname + \"/preload.js\",\r\n        },\r\n    });\r\n    // React Loaded\r\n    mainWindow.loadURL(electron_is_dev_1.default ? \"http://localhost:9000\" : \"file://\" + electron_1.app.getAppPath() + \"/index.html\");\r\n    // Worker Window\r\n    // const workerWindow = new BrowserWindow({\r\n    //   show: false,\r\n    //   webPreferences: { nodeIntegration: true },\r\n    // });\r\n    // workerWindow.loadFile(\"worker.html\");\r\n    mainWindow.webContents.openDevTools();\r\n};\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\n// This method is equivalent to 'app.on('ready', function())'\r\nelectron_1.app.whenReady().then(createWindow);\r\n// Quit when all windows are closed.\r\nelectron_1.app.on(\"window-all-closed\", function () {\r\n    // On macOS it is common for applications and their\r\n    // menu bar to stay active until the user quits\r\n    // explicitly with Cmd + Q\r\n    if (process.platform !== \"darwin\") {\r\n        electron_1.app.quit();\r\n    }\r\n});\r\nelectron_1.app.on(\"activate\", function () {\r\n    // On macOS it's common to re-create a window in the\r\n    // app when the dock icon is clicked and there are no\r\n    // other windows open\r\n    if (electron_1.BrowserWindow.getAllWindows().length === 0) {\r\n        createWindow();\r\n    }\r\n});\r\n// In this file, you can include the rest of your\r\n// app's specific main process code. You can also\r\n// put them in separate files and require them here.\r\n/* -------------------------------------------------------------------------- */\r\n/*                       Functions and Listeneres below                       */\r\n/* -------------------------------------------------------------------------- */\r\n// Functions for recursively searching directories\r\nfunction flatten(lists) {\r\n    return lists.reduce(function (a, b) { return a.concat(b); }, []);\r\n}\r\nfunction getDirectories(srcpath) {\r\n    return graceful_fs_1.default\r\n        .readdirSync(srcpath)\r\n        .map(function (file) { return path_1.default.join(srcpath, file); })\r\n        .filter(function (path) { return graceful_fs_1.default.statSync(path).isDirectory(); });\r\n}\r\nfunction getDirectoriesRecursive(srcpath) {\r\n    return __spreadArray([\r\n        srcpath\r\n    ], flatten(getDirectories(srcpath).map(getDirectoriesRecursive)));\r\n}\r\n// Save books as JSON\r\nfunction saveBooksAsJSON(books) {\r\n    try {\r\n        var bookData = JSON.stringify(books, null, 2);\r\n        // Write to AppDate directory\r\n        graceful_fs_1.default.writeFileSync(electron_1.app.getPath(\"userData\") + \"\\\\myLibrary.json\", bookData);\r\n        console.log(\"Saved to -> \" + electron_1.app.getPath(\"userData\") + \"\\\\myLibrary.json\");\r\n    }\r\n    catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n// Get All details of a book\r\nfunction getBookData(dirPath) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var dirTitle, files, book, images, book_parts, book_duration, filePath, book_metadata, error_1;\r\n        var _this = this;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    dirTitle = dirPath.split(\"\\\\\").pop();\r\n                    files = graceful_fs_1.default.readdirSync(dirPath);\r\n                    book = {};\r\n                    images = [];\r\n                    book_parts = [];\r\n                    book_duration = 0;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, 3, , 4]);\r\n                    // For accumulating data from all parts of the book (all files, inside given directory)\r\n                    files.forEach(function (element) { return __awaiter(_this, void 0, void 0, function () {\r\n                        var extType, filePath, book_metadata_1;\r\n                        return __generator(this, function (_a) {\r\n                            switch (_a.label) {\r\n                                case 0:\r\n                                    extType = path_1.default.extname(element);\r\n                                    filePath = dirPath + \"\\\\\" + element;\r\n                                    if (!(extType == \".mp3\" ||\r\n                                        extType == \".m4a\" ||\r\n                                        extType == \".m4b\" ||\r\n                                        extType == \".ogg\" ||\r\n                                        extType == \".wav\" ||\r\n                                        extType == \".aax\" ||\r\n                                        extType == \".aac\" ||\r\n                                        extType == \".m4p\" ||\r\n                                        extType == \".wma\" ||\r\n                                        extType == \".flac\" ||\r\n                                        extType == \".alac\")) return [3 /*break*/, 2];\r\n                                    // 1. Get current audio files path, use this as part for the book\r\n                                    book_parts.push(filePath);\r\n                                    return [4 /*yield*/, mm.parseFile(filePath)];\r\n                                case 1:\r\n                                    book_metadata_1 = _a.sent();\r\n                                    // 3. Accumulate all duration of audio files\r\n                                    if (book_metadata_1.format && book_metadata_1.format.duration) {\r\n                                        book_duration += book_metadata_1.format.duration;\r\n                                    }\r\n                                    book_duration += Number(book_metadata_1.format.duration);\r\n                                    return [3 /*break*/, 3];\r\n                                case 2:\r\n                                    if (extType == \".jpg\" || extType == \".jpeg\" || extType == \".png\") {\r\n                                        // Get images/covers from folder\r\n                                        images.push(element);\r\n                                    }\r\n                                    _a.label = 3;\r\n                                case 3: return [2 /*return*/];\r\n                            }\r\n                        });\r\n                    }); });\r\n                    filePath = book_parts[0];\r\n                    return [4 /*yield*/, mm.parseFile(filePath)];\r\n                case 2:\r\n                    book_metadata = _a.sent();\r\n                    // Create book object with gathered data\r\n                    book = {\r\n                        id: uniqid_1.default(),\r\n                        title: book_metadata.common.title ? book_metadata.common.title : dirTitle,\r\n                        author: book_metadata.common.artist ? book_metadata.common.artist : \"\",\r\n                        description: book_metadata.common.description\r\n                            ? book_metadata.common.description\r\n                            : \"\",\r\n                        comments: book_metadata.common.comment\r\n                            ? book_metadata.common.comment\r\n                            : \"\",\r\n                        total_length: book_duration,\r\n                        composers: book_metadata.common.composer\r\n                            ? __spreadArray([], book_metadata.common.composer) : [],\r\n                        genre: book_metadata.common.genre ? __spreadArray([], book_metadata.common.genre) : [],\r\n                        folder_path: dirPath,\r\n                        parts_paths: book_parts,\r\n                        image_paths: images,\r\n                        year: book_metadata.common.year\r\n                            ? Number(book_metadata.common.year)\r\n                            : book_metadata.common.date\r\n                                ? Number(book_metadata.common.date)\r\n                                : 0,\r\n                        series_name: book_metadata.common.album ? book_metadata.common.album : \"\",\r\n                        copyright: book_metadata.common.copyright &&\r\n                            book_metadata.common.copyright.length > 0\r\n                            ? book_metadata.common.copyright[0]\r\n                            : \"\",\r\n                    };\r\n                    // console.log(`\\n\\nBook -> `, book);\r\n                    return [2 /*return*/, book];\r\n                case 3:\r\n                    error_1 = _a.sent();\r\n                    console.error(error_1.message);\r\n                    return [2 /*return*/, null];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n// Interface -> Get List of Audiobooks\r\nelectron_1.ipcMain.on(\"asynchronous-open-folder\", function (event, arg) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var booksList, result, openedDirectory, list, i, src, files, index, extType, res, err_1;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                _a.trys.push([0, 10, , 11]);\r\n                booksList = [];\r\n                return [4 /*yield*/, electron_1.dialog.showOpenDialog({\r\n                        filters: [{ name: \"Audio\", extensions: [\"mp3\", \"ogg\", \"wav\"] }],\r\n                        title: \"Select a root directory\",\r\n                        buttonLabel: \"Select directory\",\r\n                        properties: [\"openDirectory\"],\r\n                    })];\r\n            case 1:\r\n                result = _a.sent();\r\n                openedDirectory = null;\r\n                if (!!result.canceled) return [3 /*break*/, 8];\r\n                openedDirectory = result.filePaths[0];\r\n                list = getDirectoriesRecursive(openedDirectory);\r\n                i = 0;\r\n                _a.label = 2;\r\n            case 2:\r\n                if (!(i < list.length)) return [3 /*break*/, 7];\r\n                src = list[i];\r\n                files = graceful_fs_1.default.readdirSync(src);\r\n                index = 0;\r\n                _a.label = 3;\r\n            case 3:\r\n                if (!(index < files.length)) return [3 /*break*/, 6];\r\n                extType = path_1.default.extname(files[index]);\r\n                if (!(extType == \".mp3\" ||\r\n                    extType == \".m4a\" ||\r\n                    extType == \".m4b\" ||\r\n                    extType == \".ogg\" ||\r\n                    extType == \".wav\" ||\r\n                    extType == \".aax\" ||\r\n                    extType == \".aac\" ||\r\n                    extType == \".m4p\" ||\r\n                    extType == \".wma\" ||\r\n                    extType == \".flac\" ||\r\n                    extType == \".alac\")) return [3 /*break*/, 5];\r\n                return [4 /*yield*/, getBookData(src)];\r\n            case 4:\r\n                res = _a.sent();\r\n                if (res) {\r\n                    booksList.push(res);\r\n                }\r\n                _a.label = 5;\r\n            case 5:\r\n                index++;\r\n                return [3 /*break*/, 3];\r\n            case 6:\r\n                i++;\r\n                return [3 /*break*/, 2];\r\n            case 7:\r\n                console.log(\"\\n\\nhi---------------------------------------------------------------------------\");\r\n                // Save the list of books\r\n                saveBooksAsJSON(booksList);\r\n                console.log(\"👉 -> booksList\", booksList);\r\n                // reply to renderer process\r\n                event.reply(\"asynchronous-reply\", [\r\n                    result.canceled,\r\n                    openedDirectory,\r\n                    booksList,\r\n                ]);\r\n                return [3 /*break*/, 9];\r\n            case 8:\r\n                event.reply(\"asynchronous-reply\", [result.canceled, result.filePaths]);\r\n                _a.label = 9;\r\n            case 9: return [3 /*break*/, 11];\r\n            case 10:\r\n                err_1 = _a.sent();\r\n                console.error(err_1);\r\n                return [3 /*break*/, 11];\r\n            case 11: return [2 /*return*/];\r\n        }\r\n    });\r\n}); });\r\n// Startup -> Check if library exists\r\n// ipcMain.on(\"start-up-checks\", (event, arg) => {\r\n//   try {\r\n//     if (fs.existsSync(app.getPath(\"appData\"))) {\r\n//       event.reply(\"start-up-checks-reply\", true);\r\n//     } else {\r\n//       event.reply(\"start-up-checks-reply\", false);\r\n//     }\r\n//   } catch (err) {\r\n//     console.error(err);\r\n//   }\r\n// });\r\n/* -------------------------------------------------------------------------- */\r\n/*                                 this is app                                */\r\n/* -------------------------------------------------------------------------- */\r\nconsole.log(\"\\n\\uD83D\\uDE80 Electron App is running\\n\");\r\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./src/main/main.ts?");

/***/ }),

/***/ "./node_modules/uniqid/index.js":
/*!**************************************!*\
  !*** ./node_modules/uniqid/index.js ***!
  \**************************************/
/***/ ((module) => {

eval("/* \n(The MIT License)\nCopyright (c) 2014-2021 Halász Ádám <adam@aimform.com>\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//  Unique Hexatridecimal ID Generator\n// ================================================\n\n//  Dependencies\n// ================================================\nvar pid = typeof process !== 'undefined' && process.pid ? process.pid.toString(36) : '' ;\nvar address = '';\nif(false){ var i, mac, networkInterfaces; } \n\n//  Exports\n// ================================================\nmodule.exports = module.exports.default = function(prefix, suffix){ return (prefix ? prefix : '') + address + pid + now().toString(36) + (suffix ? suffix : ''); }\nmodule.exports.process = function(prefix, suffix){ return (prefix ? prefix : '') + pid + now().toString(36) + (suffix ? suffix : ''); }\nmodule.exports.time    = function(prefix, suffix){ return (prefix ? prefix : '') + now().toString(36) + (suffix ? suffix : ''); }\n\n//  Helpers\n// ================================================\nfunction now(){\n    var time = Date.now();\n    var last = now.last || time;\n    return now.last = time > last ? time : last + 1;\n}\n\n\n//# sourceURL=webpack://atomic-audiobook-player/./node_modules/uniqid/index.js?");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");;

/***/ }),

/***/ "constants":
/*!****************************!*\
  !*** external "constants" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("constants");;

/***/ }),

/***/ "electron":
/*!***************************!*\
  !*** external "electron" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("electron");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");;

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");;

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");;

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");;

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");;

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main/main.ts");
/******/ 	
/******/ })()
;