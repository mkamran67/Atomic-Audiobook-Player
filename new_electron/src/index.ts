import {
  app,
  BrowserWindow,
  dialog,
  ipcMain,
  net,
  protocol,
  session
} from "electron";
import isDev from "electron-is-dev";
import { existsSync, mkdirSync } from "fs";
import path from 'node:path';
import getSimpleBookData from "./back/main/electron-utils/bookData";
import {
  ELECTRON_ERROR,
  ELECTRON_RESPONSE_BOOK_DETAILS_TYPE,
  ELECTRON_RESPONSE_BOOKDATA_TYPE,
  ELECTRON_RESPONSE_SETTINGSDATA_TYPE,
  INFO_FOLDER_LOCATION
} from "./back/main/electron-utils/constants";
import { handleSettings } from "./back/main/electron-utils/settings";
import scanBooks, { getBookDetails } from "./back/main/electron-utils/utils";
import { BookData, BookDetails } from "./back/main/types/library.types";
import { RequestFromReactType, ResponseFromElectronType } from "./back/main/types/response.type";

// import { app, BrowserWindow } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  // REVIEW add your own icon
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (isDev) {
    mainWindow.webContents.openDevTools({
      mode: 'detach'
    });
  }

  mainWindow.webContents.on('did-finish-load', () => {
    mainWindow.webContents.send('main-process-message', (new Date).toLocaleString());
  })
};

protocol.registerSchemesAsPrivileged([{
  scheme: 'get-file',
  privileges: { secure: true, standard: true, stream: true }
}])


app.whenReady().then(async () => {
  protocol.handle("get-file", (request) => {
    const normURI = path.normalize(decodeURI(request.url).slice("get-file://".length));
    const url = `file://${normURI[0]}:${normURI.slice(1, normURI.length)}`;
    return net.fetch(url);
  })
})

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);


// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.



if (!existsSync(INFO_FOLDER_LOCATION)) {
  mkdirSync(INFO_FOLDER_LOCATION);
}

// ------------------------------- Event Listeners Below -------------------------------
ipcMain.on("requestToElectron", async (event, req: RequestFromReactType) => {
  const { type, data } = req;

  // Determines what actions to take
  switch (type) {
    // Returns the Library data to React -> Does not Scan or ReScan.
    case "getAllBooksSimplified": {
      try {
        const results: ResponseFromElectronType = {
          type: ELECTRON_RESPONSE_BOOKDATA_TYPE,
          data: getSimpleBookData(),
        };

        event.reply("responseFromElectron", results);
      } catch (err) {
        const results: ResponseFromElectronType = {
          type: ELECTRON_ERROR,
          data: err,
        };
        event.reply("responseFromElectron", results);
      }
      break;
    }
    // Scans a directory for audiobooks
    case "newAudioBookDirectory": {
      // Get directory path from user
      const dirPath = await dialog.showOpenDialog({
        properties: ["openDirectory"],
        message: "Select the root directory containing your audiobooks",
      });

      if (dirPath && dirPath.canceled) {
        // Tell React it failed/canceled
        const results: ResponseFromElectronType = {
          type: ELECTRON_ERROR,
          data: {
            message: "Failed to get a directory",
          },
        };

        event.reply("responseFromElectron", results);
      } else if (dirPath) {
        try {
          const rootPathForBooks = dirPath.filePaths[0];

          // Scan for books and build a save file
          // This will take place in a sub process
          const arrayOfBooks: BookData[] = await scanBooks(rootPathForBooks);

          const results: ResponseFromElectronType = {
            type: ELECTRON_RESPONSE_BOOKDATA_TYPE,
            data: arrayOfBooks,
          };

          if (arrayOfBooks) {
            console.log(`Updating Settings ->`);
            await handleSettings("update", arrayOfBooks);
            console.log(`Replying to React ->`);
            event.reply("responseFromElectron", results);
          }
        } catch (err) {
          const results: ResponseFromElectronType = {
            type: ELECTRON_ERROR,
            data: err,
          };

          event.reply("responseFromElectron", results);
        }
      }
      break;
    }
    // Get settings from file
    case "getSettings": {
      try {
        const res = await handleSettings("read", data);

        if (res) {
          const results: ResponseFromElectronType = {
            type: ELECTRON_RESPONSE_SETTINGSDATA_TYPE,
            data: res,
          };
          event.reply("responseFromElectron", results);
        }
      } catch (err) {
        const results: ResponseFromElectronType = {
          type: ELECTRON_ERROR,
          data: err,
        };
        event.reply("responseFromElectron", results);
      }
      break;
    }
    // Get a books details
    case "getBookDetails": {
      try {
        // TODO -> Send to child process to fetch the book details
        const { path } = data;

        if (existsSync(path)) {
          const results: BookDetails = await getBookDetails(path);

          if (results) {
            console.log(`Replying to React`);

            const reply: ResponseFromElectronType = {
              type: ELECTRON_RESPONSE_BOOK_DETAILS_TYPE,
              data: results,
            };

            event.reply("responseFromElectron", reply);
          }
        } else {
          throw new Error(`Did not find book at : ${path}`);
        }
      } catch (err) {
        const results: ResponseFromElectronType = {
          type: ELECTRON_ERROR,
          data: err,
        };
        event.reply("responseFromElectron", results);
      }
      break;
    }
    // Save current book progress
    case "saveBookProgress": {
      console.log(`You've hit ${type}`);
      console.log(data);
      break;
    }
    // get book history
    default: {
      console.log(`You've hit default -> ${type}`);
      break;
    }
  }
});
