
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on

import { INFO_FOLDER_LOCATION } from "./main/electron_constants";
import { createSettingsFile } from "./main/handlers/settings";
import { checkIfDirectoryExists } from "./main/utils/diskReader";
import fs from 'fs';
import logger from "./main/utils/logger";
import { createLibraryFile, createStatsFile, handleRendererRequest } from "./main/handlers/library";
import { BrowserWindow, app, ipcMain, protocol } from "electron";
import { getFileFromDisk } from "./main/handlers/file_reader";
import { is } from "@electron-toolkit/utils";

// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}


function setupConfigFiles() {
  logger.info('Setting up config files');

  // 1. Check if INFO folder exists
  if (!checkIfDirectoryExists(INFO_FOLDER_LOCATION)) {
    // Create INFO folder
    fs.mkdirSync(INFO_FOLDER_LOCATION);
  }

  // Create settings file
  const settingsResults = createSettingsFile();
  if (settingsResults) {
    logger.info('Settings file created');
  }
  // Create library file
  const libraryResults = createLibraryFile();
  if (libraryResults) {
    logger.info('Library file created');
  }
  // Create stats file
  const statsResults = createStatsFile();
  if (statsResults) {
    logger.info('Stats file created');
  }
}

const createWindow = (): void => {

  protocol.handle('get-file', getFileFromDisk);

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    autoHideMenuBar: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (is.dev) {
    mainWindow.webContents.openDevTools();
  }
};


setupConfigFiles();

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// IPC test
ipcMain.on('requestToElectron', handleRendererRequest);