
import { app, BrowserWindow, dialog, ipcMain, net, protocol } from 'electron';
import isDev from 'electron-is-dev';
import { existsSync, mkdirSync } from 'fs';
import path from 'node:path';

import getSimpleBookData from './back/main/electron-utils/bookData';
import {
  ELECTRON_ERROR, ELECTRON_RESPONSE_BOOK_DETAILS_TYPE, ELECTRON_RESPONSE_BOOKDATA_TYPE,
  ELECTRON_RESPONSE_SETTINGSDATA_TYPE, INFO_FOLDER_LOCATION
} from './back/main/electron-utils/constants';
import { handleSettings } from './back/main/electron-utils/settings';
import scanBooks, { getBookDetails } from './back/main/electron-utils/utils';
import { BookData, BookDetails } from './back/main/types/library.types';
import { RequestFromReactType, ResponseFromElectronType } from './back/main/types/response.type';
import handleRequestFromReact from './back/main/listeners/recievers';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

if (!existsSync(INFO_FOLDER_LOCATION)) {
  mkdirSync(INFO_FOLDER_LOCATION);
}

// make sure this listener is set before your renderer.js code is called
// ipcMain.on('get-preload-path', (e) => {
//   e.returnValue = WINDOW_PRELOAD_WEBPACK_ENTRY;
// });

const createWindow = (): void => {
  // Create the browser window.
  // REVIEW add your own icon
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      // nodeIntegration: true,
      // contextIsolation: true,
      sandbox: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (isDev) {
    mainWindow.webContents.openDevTools({
      mode: 'detach'
    });
  }

  mainWindow.webContents.on('did-finish-load', () => {
    mainWindow.webContents.send('main-process-message', (new Date).toLocaleString());
  })
};

protocol.registerSchemesAsPrivileged([{
  scheme: 'get-file',
  privileges: { secure: true, standard: true, stream: true }
}])


app.whenReady().then(async () => {
  protocol.handle("get-file", (request) => {
    console.log("ðŸ‘‰ -> file: index.ts:62 -> request:", request.url)

    try {
      const normURI = path.normalize(decodeURI(request.url).slice("get-file://".length));
      const url = `file://${normURI[0]}:${normURI.slice(1, normURI.length)}`;
      return net.fetch(url);
    } catch (error: any) {
      console.log("ðŸ‘‰ -> file: index.ts:69 -> error:", error)
    }
  })
})

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);


// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});


// ------------------------------- Event Listeners Below -------------------------------
ipcMain.on("requestToElectron", async (event, request) => await handleRequestFromReact(event, request));
